!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EV_NET_INPUT_BUFFER	netlib.c	/^int EV_NET_INPUT_BUFFER;$/;"	v
EV_NET_OUTPUT_BUFFER	netlib.c	/^int EV_NET_OUTPUT_BUFFER;$/;"	v
EV_NET_RECEIVE	netlib.c	/^int EV_NET_RECEIVE;$/;"	v
EV_NET_SEND	netlib.c	/^int EV_NET_SEND;$/;"	v
NETWORK_H	network.h	21;"	d
NET_MSG_TABLE_SIZE	network.h	343;"	d
NET_NODE_COLOR_BLACK	routing-table.c	41;"	d	file:
NET_NODE_COLOR_GRAY	routing-table.c	40;"	d	file:
NET_NODE_COLOR_WHITE	routing-table.c	39;"	d	file:
bandwidth	network.h	/^	int bandwidth;$/;"	m	struct:net_link_t
bandwidth	network.h	/^	int bandwidth;$/;"	m	struct:net_node_t
bucket_next	network.h	/^	struct net_msg_t *bucket_next;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_msg_t
buffer	network.h	/^	struct net_buffer_t *buffer;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_buffer_t
bus_busy	network.h	/^	long long bus_busy;$/;"	m	struct:net_node_t
busy	network.h	/^	long long busy;  \/* Busy until this cycle inclusive *\/$/;"	m	struct:net_link_t
busy	network.h	/^	long long busy;  \/* In transit until cycle *\/$/;"	m	struct:net_msg_t
busy_cycles	network.h	/^	long long busy_cycles;$/;"	m	struct:net_link_t
bytes_received	network.h	/^	long long bytes_received;$/;"	m	struct:net_node_t
bytes_sent	network.h	/^	long long bytes_sent;$/;"	m	struct:net_node_t
cost	network.h	/^	int cost;  \/* Cost in hops *\/$/;"	m	struct:net_routing_table_entry_t
count	network.h	/^	int count;  \/* Occupied buffer size *\/$/;"	m	struct:net_buffer_t
data	network.h	/^	void *data;$/;"	m	struct:net_msg_t
dim	network.h	/^	int dim;  \/* Array dimensions ('dim' x 'dim') *\/$/;"	m	struct:net_routing_table_t
dst_buffer	network.h	/^	struct net_buffer_t *dst_buffer;  \/* Final destination buffer *\/$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_buffer_t
dst_buffer	network.h	/^	struct net_buffer_t *dst_buffer;$/;"	m	struct:net_link_t	typeref:struct:net_link_t::net_buffer_t
dst_node	network.h	/^	struct net_node_t *dst_node;$/;"	m	struct:net_link_t	typeref:struct:net_link_t::net_node_t
dst_node	network.h	/^	struct net_node_t *dst_node;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_node_t
end_node_count	network.h	/^	int end_node_count;  \/* Number of end nodes *\/$/;"	m	struct:net_t
entries	network.h	/^	struct net_routing_table_entry_t *entries;$/;"	m	struct:net_routing_table_t	typeref:struct:net_routing_table_t::net_routing_table_entry_t
err_net_can_send	netlib.c	/^char *err_net_can_send =$/;"	v
err_net_config	netlib.c	/^char *err_net_config =$/;"	v
err_net_cycle	routing-table.c	/^static char *err_net_cycle =$/;"	v	file:
err_net_end_nodes	netlib.c	/^char *err_net_end_nodes =$/;"	v
err_net_large_message	netlib.c	/^char *err_net_large_message =$/;"	v
err_net_no_route	netlib.c	/^char *err_net_no_route =$/;"	v
err_net_node_name_duplicate	netlib.c	/^char *err_net_node_name_duplicate =$/;"	v
err_net_routing	routing-table.c	/^static char *err_net_routing = $/;"	v	file:
event	network.h	/^	int event;$/;"	m	struct:net_buffer_wakeup_t
exp_random	netlib.c	/^static double exp_random(double lambda)$/;"	f	file:
has_cycle	network.h	/^	int has_cycle;$/;"	m	struct:net_routing_table_t
id	network.h	/^	long long id;$/;"	m	struct:net_msg_t
index	network.h	/^	int index;  \/* Index in input\/output buffer list of node *\/$/;"	m	struct:net_buffer_t
index	network.h	/^	int index;  \/* Used to index routing table *\/$/;"	m	struct:net_node_t
input_buffer_list	network.h	/^	struct list_t *input_buffer_list;$/;"	m	struct:net_node_t	typeref:struct:net_node_t::list_t
input_buffer_size	network.h	/^	int input_buffer_size;$/;"	m	struct:net_node_t
kind	network.h	/^	enum net_node_kind_t kind;$/;"	m	struct:net_node_t	typeref:enum:net_node_t::net_node_kind_t
lat_acc	network.h	/^	long long lat_acc;  \/* Accumulated latency *\/$/;"	m	struct:net_t
link	network.h	/^	struct net_link_t *link;$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::net_link_t
link_list	network.h	/^	struct list_t *link_list;$/;"	m	struct:net_t	typeref:struct:net_t::list_t
msg	network.h	/^	struct net_msg_t *msg;$/;"	m	struct:net_stack_t	typeref:struct:net_stack_t::net_msg_t
msg_id_counter	network.h	/^	long long msg_id_counter;  \/* Counter to assign message IDs *\/$/;"	m	struct:net_t
msg_list	network.h	/^	struct list_t *msg_list;$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::list_t
msg_size_acc	network.h	/^	long long msg_size_acc;  \/* Accumulated message size *\/$/;"	m	struct:net_t
msg_table	network.h	/^	struct net_msg_t *msg_table[NET_MSG_TABLE_SIZE];$/;"	m	struct:net_t	typeref:struct:net_t::net_msg_t
msgs_received	network.h	/^	long long msgs_received;$/;"	m	struct:net_node_t
msgs_sent	network.h	/^	long long msgs_sent;$/;"	m	struct:net_node_t
name	network.h	/^	char *name;  \/* String identifier *\/$/;"	m	struct:net_buffer_t
name	network.h	/^	char *name;$/;"	m	struct:net_link_t
name	network.h	/^	char *name;$/;"	m	struct:net_node_t
name	network.h	/^	char *name;$/;"	m	struct:net_t
net	network.h	/^	struct net_t *net;  \/* Associated network *\/$/;"	m	struct:net_routing_table_t	typeref:struct:net_routing_table_t::net_t
net	network.h	/^	struct net_t *net;  \/* Network it belongs to *\/$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::net_t
net	network.h	/^	struct net_t *net;$/;"	m	struct:net_link_t	typeref:struct:net_link_t::net_t
net	network.h	/^	struct net_t *net;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_t
net	network.h	/^	struct net_t *net;$/;"	m	struct:net_node_t	typeref:struct:net_node_t::net_t
net	network.h	/^	struct net_t *net;$/;"	m	struct:net_stack_t	typeref:struct:net_stack_t::net_t
net_add_bidirectional_link	network.c	/^void net_add_bidirectional_link(struct net_t *net,$/;"	f
net_add_bus	network.c	/^struct net_node_t *net_add_bus(struct net_t *net, int bandwidth, char *name)$/;"	f
net_add_end_node	network.c	/^struct net_node_t *net_add_end_node(struct net_t *net,$/;"	f
net_add_link	network.c	/^struct net_link_t *net_add_link(struct net_t *net,$/;"	f
net_add_switch	network.c	/^struct net_node_t *net_add_switch(struct net_t *net,$/;"	f
net_buffer_create	buffer.c	/^struct net_buffer_t *net_buffer_create(struct net_t *net, struct net_node_t *node,$/;"	f
net_buffer_dump	buffer.c	/^void net_buffer_dump(struct net_buffer_t *buffer, FILE *f)$/;"	f
net_buffer_dump_report	buffer.c	/^void net_buffer_dump_report(struct net_buffer_t *buffer, FILE *f)$/;"	f
net_buffer_extract	buffer.c	/^void net_buffer_extract(struct net_buffer_t *buffer, struct net_msg_t *msg)$/;"	f
net_buffer_free	buffer.c	/^void net_buffer_free(struct net_buffer_t *buffer)$/;"	f
net_buffer_insert	buffer.c	/^void net_buffer_insert(struct net_buffer_t *buffer, struct net_msg_t *msg)$/;"	f
net_buffer_t	network.h	/^struct net_buffer_t$/;"	s
net_buffer_update_occupancy	buffer.c	/^void net_buffer_update_occupancy(struct net_buffer_t *buffer)$/;"	f
net_buffer_wait	buffer.c	/^void net_buffer_wait(struct net_buffer_t *buffer, int event, void *stack)$/;"	f
net_buffer_wakeup	buffer.c	/^void net_buffer_wakeup(struct net_buffer_t *buffer)$/;"	f
net_buffer_wakeup_t	network.h	/^struct net_buffer_wakeup_t$/;"	s
net_can_send	network.c	/^int net_can_send(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_can_send_ev	network.c	/^int net_can_send_ev(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_config_file_name	netlib.c	/^char *net_config_file_name = "";$/;"	v
net_config_help	netlib.c	/^char *net_config_help =$/;"	v
net_config_load	netlib.c	/^void net_config_load(void)$/;"	f
net_create	network.c	/^struct net_t *net_create(char *name)$/;"	f
net_create_from_config	network.c	/^struct net_t *net_create_from_config(struct config_t *config, char *name)$/;"	f
net_debug	network.h	431;"	d
net_debug_category	netlib.c	/^int net_debug_category;$/;"	v
net_done	netlib.c	/^void net_done(void)$/;"	f
net_dump	network.c	/^void net_dump(struct net_t *net, FILE *f)$/;"	f
net_dump_report	network.c	/^void net_dump_report(struct net_t *net, FILE *f)$/;"	f
net_event_handler	message.c	/^void net_event_handler(int event, void *data)$/;"	f
net_find	netlib.c	/^struct net_t *net_find(char *name)$/;"	f
net_free	network.c	/^void net_free(struct net_t *net)$/;"	f
net_get_node_by_name	network.c	/^struct net_node_t *net_get_node_by_name(struct net_t *net, char *name)$/;"	f
net_get_node_by_user_data	network.c	/^struct net_node_t *net_get_node_by_user_data(struct net_t *net, void *user_data)$/;"	f
net_init	netlib.c	/^void net_init(void)$/;"	f
net_injection_rate	netlib.c	/^double net_injection_rate = 0.01;  \/* 1 packet every 100 cycles *\/$/;"	v
net_link_create	link.c	/^struct net_link_t *net_link_create(struct net_t *net,$/;"	f
net_link_dump_report	link.c	/^void net_link_dump_report(struct net_link_t *link, FILE *f)$/;"	f
net_link_free	link.c	/^void net_link_free(struct net_link_t *link)$/;"	f
net_link_t	network.h	/^struct net_link_t$/;"	s
net_list	netlib.c	/^static struct hash_table_t *net_list;$/;"	v	typeref:struct:hash_table_t	file:
net_max_cycles	netlib.c	/^long long net_max_cycles = 1000000;  \/* 1M cycles default *\/$/;"	v
net_msg_create	message.c	/^struct net_msg_t *net_msg_create(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_msg_free	message.c	/^void net_msg_free(struct net_msg_t *msg)$/;"	f
net_msg_size	netlib.c	/^int net_msg_size = 1;  \/* Message size in bytes *\/$/;"	v
net_msg_t	network.h	/^struct net_msg_t$/;"	s
net_msg_table_extract	network.c	/^struct net_msg_t *net_msg_table_extract(struct net_t *net, long long id)$/;"	f
net_msg_table_get	network.c	/^struct net_msg_t *net_msg_table_get(struct net_t *net, long long id)$/;"	f
net_msg_table_insert	network.c	/^void net_msg_table_insert(struct net_t *net, struct net_msg_t *msg)$/;"	f
net_node_add_input_buffer	node.c	/^struct net_buffer_t *net_node_add_input_buffer(struct net_node_t *node)$/;"	f
net_node_add_output_buffer	node.c	/^struct net_buffer_t *net_node_add_output_buffer(struct net_node_t *node)$/;"	f
net_node_bus	network.h	/^	net_node_bus$/;"	e	enum:net_node_kind_t
net_node_create	node.c	/^struct net_node_t *net_node_create(struct net_t *net,$/;"	f
net_node_dump	node.c	/^void net_node_dump(struct net_node_t *node, FILE *f)$/;"	f
net_node_dump_report	node.c	/^void net_node_dump_report(struct net_node_t *node, FILE *f)$/;"	f
net_node_end	network.h	/^	net_node_end,$/;"	e	enum:net_node_kind_t
net_node_free	node.c	/^void net_node_free(struct net_node_t *node)$/;"	f
net_node_invalid	network.h	/^	net_node_invalid = 0,$/;"	e	enum:net_node_kind_t
net_node_kind_t	network.h	/^enum net_node_kind_t$/;"	g
net_node_schedule	node.c	/^struct net_buffer_t *net_node_schedule(struct net_node_t *node,$/;"	f
net_node_switch	network.h	/^	net_node_switch,$/;"	e	enum:net_node_kind_t
net_node_t	network.h	/^struct net_node_t$/;"	s
net_receive	network.c	/^void net_receive(struct net_t *net, struct net_node_t *node, struct net_msg_t *msg)$/;"	f
net_report_file	netlib.c	/^FILE *net_report_file;$/;"	v
net_report_file_name	netlib.c	/^char *net_report_file_name = "";$/;"	v
net_routing_table_create	routing-table.c	/^struct net_routing_table_t *net_routing_table_create(struct net_t *net)$/;"	f
net_routing_table_cycle_detection	routing-table.c	/^static void net_routing_table_cycle_detection(struct net_routing_table_t *routing_table)$/;"	f	file:
net_routing_table_dump	routing-table.c	/^void net_routing_table_dump(struct net_routing_table_t *routing_table, FILE *f)$/;"	f
net_routing_table_entry_t	network.h	/^struct net_routing_table_entry_t$/;"	s
net_routing_table_floyd_warshall	routing-table.c	/^void net_routing_table_floyd_warshall(struct net_routing_table_t *routing_table)$/;"	f
net_routing_table_free	routing-table.c	/^void net_routing_table_free(struct net_routing_table_t *routing_table)$/;"	f
net_routing_table_initiate	routing-table.c	/^void net_routing_table_initiate(struct net_routing_table_t *routing_table)$/;"	f
net_routing_table_lookup	routing-table.c	/^struct net_routing_table_entry_t *net_routing_table_lookup(struct net_routing_table_t *routing_table,$/;"	f
net_routing_table_route_update	routing-table.c	/^void net_routing_table_route_update(struct net_routing_table_t *routing_table, struct net_node_t *src_node,$/;"	f
net_routing_table_t	network.h	/^struct net_routing_table_t$/;"	s
net_send	network.c	/^struct net_msg_t *net_send(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_send_ev	network.c	/^struct net_msg_t *net_send_ev(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_sim	netlib.c	/^void net_sim(char *debug_file_name)$/;"	f
net_sim_network_name	netlib.c	/^char *net_sim_network_name = "";$/;"	v
net_stack_create	message.c	/^struct net_stack_t *net_stack_create(struct net_t *net,$/;"	f
net_stack_return	message.c	/^void net_stack_return(struct net_stack_t *stack)$/;"	f
net_stack_t	network.h	/^struct net_stack_t$/;"	s
net_t	network.h	/^struct net_t$/;"	s
net_try_send	network.c	/^struct net_msg_t *net_try_send(struct net_t *net, struct net_node_t *src_node,$/;"	f
net_try_send_ev	network.c	/^struct net_msg_t *net_try_send_ev(struct net_t *net, struct net_node_t *src_node,$/;"	f
next_node	network.h	/^	struct net_node_t *next_node;  \/* Next node to destination *\/$/;"	m	struct:net_routing_table_entry_t	typeref:struct:net_routing_table_entry_t::net_node_t
node	network.h	/^	struct net_node_t *node;  \/* Node where it belongs *\/$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::net_node_t
node	network.h	/^	struct net_node_t *node;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_node_t
node_count	network.h	/^	int node_count;$/;"	m	struct:net_t
node_list	network.h	/^	struct list_t *node_list;$/;"	m	struct:net_t	typeref:struct:net_t::list_t
occupancy_bytes_acc	network.h	/^	long long occupancy_bytes_acc;$/;"	m	struct:net_buffer_t
occupancy_bytes_value	network.h	/^	int occupancy_bytes_value;$/;"	m	struct:net_buffer_t
occupancy_measured_cycle	network.h	/^	long long occupancy_measured_cycle;$/;"	m	struct:net_buffer_t
occupancy_msgs_acc	network.h	/^	long long occupancy_msgs_acc;$/;"	m	struct:net_buffer_t
occupancy_msgs_value	network.h	/^	int occupancy_msgs_value;$/;"	m	struct:net_buffer_t
output_buffer	network.h	/^	struct net_buffer_t *output_buffer;  \/* Output buffer to destination *\/$/;"	m	struct:net_routing_table_entry_t	typeref:struct:net_routing_table_entry_t::net_buffer_t
output_buffer_list	network.h	/^	struct list_t *output_buffer_list;$/;"	m	struct:net_node_t	typeref:struct:net_node_t::list_t
output_buffer_size	network.h	/^	int output_buffer_size;$/;"	m	struct:net_node_t
read_busy	network.h	/^	long long read_busy;$/;"	m	struct:net_buffer_t
ret_event	network.h	/^	int ret_event;$/;"	m	struct:net_stack_t
ret_stack	network.h	/^	struct net_stack_t *ret_stack;$/;"	m	struct:net_stack_t	typeref:struct:net_stack_t::net_stack_t
routing_table	network.h	/^	struct net_routing_table_t *routing_table;$/;"	m	struct:net_t	typeref:struct:net_t::net_routing_table_t
routing_table_cycle_detection_dfs_visit	routing-table.c	/^static void routing_table_cycle_detection_dfs_visit(struct net_routing_table_t *routing_table,$/;"	f	file:
sched_buffer	network.h	/^	struct net_buffer_t *sched_buffer;  \/* Input buffer to fetch data from *\/$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::net_buffer_t
sched_when	network.h	/^	long long sched_when;  \/* Last cycle when scheduler was called *\/$/;"	m	struct:net_buffer_t
send_cycle	network.h	/^	long long send_cycle;  \/* Cycle when it was sent *\/$/;"	m	struct:net_msg_t
size	network.h	/^	int size;  \/* Total size *\/$/;"	m	struct:net_buffer_t
size	network.h	/^	int size;$/;"	m	struct:net_msg_t
src_buffer	network.h	/^	struct net_buffer_t *src_buffer;  \/* Original source buffer *\/$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_buffer_t
src_buffer	network.h	/^	struct net_buffer_t *src_buffer;$/;"	m	struct:net_link_t	typeref:struct:net_link_t::net_buffer_t
src_node	network.h	/^	struct net_node_t *src_node;$/;"	m	struct:net_link_t	typeref:struct:net_link_t::net_node_t
src_node	network.h	/^	struct net_node_t *src_node;$/;"	m	struct:net_msg_t	typeref:struct:net_msg_t::net_node_t
stack	network.h	/^	void *stack;$/;"	m	struct:net_buffer_wakeup_t
transferred_bytes	network.h	/^	long long transferred_bytes;$/;"	m	struct:net_link_t
transferred_msgs	network.h	/^	long long transferred_msgs;$/;"	m	struct:net_link_t
transfers	network.h	/^	long long transfers;  \/* Transfers *\/$/;"	m	struct:net_t
user_data	network.h	/^	void *user_data;$/;"	m	struct:net_node_t
wakeup_list	network.h	/^	struct linked_list_t *wakeup_list;$/;"	m	struct:net_buffer_t	typeref:struct:net_buffer_t::linked_list_t
write_busy	network.h	/^	long long write_busy;$/;"	m	struct:net_buffer_t
