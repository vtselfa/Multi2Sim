!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BIN_CONFIG_ERR_DATA	bin-config.h	/^	BIN_CONFIG_ERR_DATA,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_DUPLICATE	bin-config.h	/^	BIN_CONFIG_ERR_DUPLICATE,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_FORMAT	bin-config.h	/^	BIN_CONFIG_ERR_FORMAT$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_IO	bin-config.h	/^	BIN_CONFIG_ERR_IO,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_NOT_FOUND	bin-config.h	/^	BIN_CONFIG_ERR_NOT_FOUND,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_OK	bin-config.h	/^	BIN_CONFIG_ERR_OK = 0,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_ERR_PARENT	bin-config.h	/^	BIN_CONFIG_ERR_PARENT,$/;"	e	enum:bin_config_error_t
BIN_CONFIG_H	bin-config.h	21;"	d
BUFFER_H	buffer.h	21;"	d
CHRONO_H	chrono.h	21;"	d
CHRONO_RUNNING	chrono.c	29;"	d	file:
CHRONO_STOPPED	chrono.c	28;"	d	file:
CONFIG_H	config.h	21;"	d
DEBUG_H	debug.h	21;"	d
ELEM	list.c	27;"	d	file:
ELF_FORMAT_H	elf-format.h	21;"	d
HASH_H	hash-table.h	21;"	d
HASH_TABLE_FOR_EACH	hash-table.h	31;"	d
HASH_TABLE_MIN_INITIAL_SIZE	hash-table.c	30;"	d	file:
HASH_TABLE_SIZE	config.c	30;"	d	file:
HEAP_EELEM	heap.h	26;"	d
HEAP_EEMPTY	heap.h	25;"	d
HEAP_ENOMEM	heap.h	24;"	d
HEAP_H	heap.h	21;"	d
INLIST	list.c	26;"	d	file:
ITEM_ALLOWED	config.c	32;"	d	file:
ITEM_MANDATORY	config.c	33;"	d	file:
LEFT	heap.c	26;"	d	file:
LINKED_LIST_ERR_BOUNDS	linked-list.h	/^	LINKED_LIST_ERR_BOUNDS,$/;"	e	enum:linked_list_error_t
LINKED_LIST_ERR_EMPTY	linked-list.h	/^	LINKED_LIST_ERR_EMPTY,$/;"	e	enum:linked_list_error_t
LINKED_LIST_ERR_NOT_FOUND	linked-list.h	/^	LINKED_LIST_ERR_NOT_FOUND$/;"	e	enum:linked_list_error_t
LINKED_LIST_ERR_OK	linked-list.h	/^	LINKED_LIST_ERR_OK = 0,$/;"	e	enum:linked_list_error_t
LINKED_LIST_FOR_EACH	linked-list.h	60;"	d
LINKED_LIST_H	linked-list.h	21;"	d
LIST_ERR_BOUNDS	list.h	/^	LIST_ERR_BOUNDS,$/;"	e	enum:list_err_t
LIST_ERR_EMPTY	list.h	/^	LIST_ERR_EMPTY$/;"	e	enum:list_err_t
LIST_ERR_NOT_FOUND	list.h	/^	LIST_ERR_NOT_FOUND,$/;"	e	enum:list_err_t
LIST_ERR_OK	list.h	/^	LIST_ERR_OK = 0,$/;"	e	enum:list_err_t
LIST_FOR_EACH	list.h	53;"	d
LIST_H	list.h	21;"	d
MATRIX_FOR_EACH	matrix.h	27;"	d
MATRIX_FOR_EACH_COLUMN	matrix.h	34;"	d
MATRIX_FOR_EACH_ROW	matrix.h	31;"	d
MATRIX_H	matrix.h	21;"	d
MAX	buffer.c	26;"	d	file:
MAX_STRING_SIZE	config.c	29;"	d	file:
MIN	buffer.c	25;"	d	file:
PARENT	heap.c	25;"	d	file:
REPOS_H	repos.h	21;"	d
RIGHT	heap.c	27;"	d	file:
__debug	debug.c	/^void __debug(int category, char *fmt, ...)$/;"	f
__debug_buffer	debug.c	/^void __debug_buffer(int category, char *buffer_name, void *buffer, int size)$/;"	f
__debug_file	debug.c	/^FILE *__debug_file(int category)$/;"	f
__debug_flush	debug.c	/^void __debug_flush(int category)$/;"	f
__debug_off	debug.c	/^void __debug_off(int category)$/;"	f
__debug_on	debug.c	/^void __debug_on(int category)$/;"	f
__debug_status	debug.c	/^int __debug_status(int category)$/;"	f
__debug_tab	debug.c	/^void __debug_tab(int category, int space_count)$/;"	f
__debug_tab_dec	debug.c	/^void __debug_tab_dec(int category, int space_count)$/;"	f
__debug_tab_inc	debug.c	/^void __debug_tab_inc(int category, int space_count)$/;"	f
__x86_cuda_debug	debug.c	/^void __x86_cuda_debug(int category, char *fmt, ...)$/;"	f
alloc_head	repos.c	/^	void *alloc_head;$/;"	m	struct:repos_t	file:
allowed_items	config.c	/^	struct hash_table_t *allowed_items;$/;"	m	struct:config_t	typeref:struct:config_t::hash_table_t	file:
allowed_items_insert	config.c	/^static void allowed_items_insert(struct config_t *cfg, char *section, char *var, void *property)$/;"	f	file:
bin_config	bin-config.h	/^	struct bin_config_t *bin_config;$/;"	m	struct:bin_config_elem_t	typeref:struct:bin_config_elem_t::bin_config_t
bin_config_add	bin-config.c	/^struct bin_config_elem_t *bin_config_add(struct bin_config_t *bin_config,$/;"	f
bin_config_add_dup_data	bin-config.c	/^static struct bin_config_elem_t *bin_config_add_dup_data(struct bin_config_t *bin_config,$/;"	f	file:
bin_config_add_no_dup	bin-config.c	/^struct bin_config_elem_t *bin_config_add_no_dup(struct bin_config_t *bin_config,$/;"	f
bin_config_clear	bin-config.c	/^void bin_config_clear(struct bin_config_t *bin_config)$/;"	f
bin_config_create	bin-config.c	/^struct bin_config_t *bin_config_create(char *file_name)$/;"	f
bin_config_dump	bin-config.c	/^void bin_config_dump(struct bin_config_t *bin_config, FILE *f)$/;"	f
bin_config_dump_elem_list	bin-config.c	/^static void bin_config_dump_elem_list(struct hash_table_t *elem_list, int level, FILE *f)$/;"	f	file:
bin_config_elem_create	bin-config.c	/^static struct bin_config_elem_t *bin_config_elem_create(struct bin_config_t *bin_config,$/;"	f	file:
bin_config_elem_free	bin-config.c	/^static void bin_config_elem_free(struct bin_config_elem_t *elem)$/;"	f	file:
bin_config_elem_list_save	bin-config.c	/^static void bin_config_elem_list_save(struct hash_table_t *elem_list, gzFile f)$/;"	f	file:
bin_config_elem_t	bin-config.h	/^struct bin_config_elem_t$/;"	s
bin_config_error_t	bin-config.h	/^enum bin_config_error_t$/;"	g
bin_config_find_first	bin-config.c	/^struct bin_config_elem_t *bin_config_find_first(struct bin_config_t *bin_config,$/;"	f
bin_config_find_next	bin-config.c	/^struct bin_config_elem_t *bin_config_find_next(struct bin_config_t *bin_config,$/;"	f
bin_config_free	bin-config.c	/^void bin_config_free(struct bin_config_t *bin_config)$/;"	f
bin_config_get	bin-config.c	/^struct bin_config_elem_t *bin_config_get(struct bin_config_t *bin_config,$/;"	f
bin_config_load	bin-config.c	/^int bin_config_load(struct bin_config_t *bin_config)$/;"	f
bin_config_load_elem_list	bin-config.c	/^static struct hash_table_t *bin_config_load_elem_list(struct bin_config_t *bin_config,$/;"	f	file:
bin_config_remove	bin-config.c	/^int bin_config_remove(struct bin_config_t *bin_config,$/;"	f
bin_config_save	bin-config.c	/^int bin_config_save(struct bin_config_t *bin_config)$/;"	f
bin_config_t	bin-config.h	/^struct bin_config_t$/;"	s
buffer	elf-format.h	/^	struct elf_buffer_t buffer;$/;"	m	struct:elf_file_t	typeref:struct:elf_file_t::elf_buffer_t
buffer	elf-format.h	/^	struct elf_buffer_t buffer;$/;"	m	struct:elf_section_t	typeref:struct:elf_section_t::elf_buffer_t
buffer_count	buffer.c	/^int buffer_count(struct buffer_t *buffer)$/;"	f
buffer_create	buffer.c	/^struct buffer_t *buffer_create(int size)$/;"	f
buffer_free	buffer.c	/^void buffer_free(struct buffer_t *buffer)$/;"	f
buffer_read	buffer.c	/^int buffer_read(struct buffer_t *buffer, void *dest, int size)$/;"	f
buffer_t	buffer.c	/^struct buffer_t {$/;"	s	file:
buffer_write	buffer.c	/^int buffer_write(struct buffer_t *buffer, void *dest, int size)$/;"	f
case_sensitive	hash-table.c	/^	int case_sensitive;$/;"	m	struct:hash_table_t	file:
child_elem_list	bin-config.h	/^	struct hash_table_t *child_elem_list;$/;"	m	struct:bin_config_elem_t	typeref:struct:bin_config_elem_t::hash_table_t
chrono_create	chrono.c	/^struct chrono_t *chrono_create(char *name)$/;"	f
chrono_ellapsed	chrono.c	/^double chrono_ellapsed(struct chrono_t *chrono)$/;"	f
chrono_free	chrono.c	/^void chrono_free(struct chrono_t *chrono)$/;"	f
chrono_list_create	chrono.c	/^struct chrono_list_t *chrono_list_create()$/;"	f
chrono_list_dump	chrono.c	/^void chrono_list_dump(struct chrono_list_t *chrono_list, FILE *f)$/;"	f
chrono_list_free	chrono.c	/^void chrono_list_free(struct chrono_list_t *chrono_list)$/;"	f
chrono_list_new	chrono.c	/^int chrono_list_new(struct chrono_list_t *chrono_list, char *name)$/;"	f
chrono_list_start	chrono.c	/^void chrono_list_start(struct chrono_list_t *chrono_list, int idx)$/;"	f
chrono_list_stop	chrono.c	/^void chrono_list_stop(struct chrono_list_t *chrono_list, int idx)$/;"	f
chrono_list_t	chrono.c	/^struct chrono_list_t$/;"	s	file:
chrono_name	chrono.c	/^char *chrono_name(struct chrono_t *chrono)$/;"	f
chrono_reset	chrono.c	/^void chrono_reset(struct chrono_t *chrono)$/;"	f
chrono_start	chrono.c	/^void chrono_start(struct chrono_t *chrono)$/;"	f
chrono_stop	chrono.c	/^void chrono_stop(struct chrono_t *chrono)$/;"	f
chrono_t	chrono.c	/^struct chrono_t {$/;"	s	file:
config_check	config.c	/^void config_check(struct config_t *cfg)$/;"	f
config_create	config.c	/^struct config_t *config_create(char *filename)$/;"	f
config_free	config.c	/^void config_free(struct config_t *cfg)$/;"	f
config_insert_section	config.c	/^static void config_insert_section(struct config_t *cfg, char *section)$/;"	f	file:
config_insert_var	config.c	/^static void config_insert_var(struct config_t *cfg, char *section, char *var, char *value)$/;"	f	file:
config_key_remove	config.c	/^int config_key_remove(struct config_t *cfg, char *section, char *key)$/;"	f
config_load	config.c	/^int config_load(struct config_t *cfg)$/;"	f
config_read_bool	config.c	/^int config_read_bool(struct config_t *cfg, char *section, char *var, int def)$/;"	f
config_read_double	config.c	/^double config_read_double(struct config_t *cfg, char *section, char *var, double def)$/;"	f
config_read_enum	config.c	/^int config_read_enum(struct config_t *cfg, char *section, char *var, int def, char **map, int map_count)$/;"	f
config_read_int	config.c	/^int config_read_int(struct config_t *cfg, char *section, char *var, int def)$/;"	f
config_read_llint	config.c	/^long long config_read_llint(struct config_t *cfg, char *section, char *var, long long def)$/;"	f
config_read_ptr	config.c	/^void *config_read_ptr(struct config_t *cfg, char *section, char *var, void *def)$/;"	f
config_read_string	config.c	/^char *config_read_string(struct config_t *cfg, char *section, char *var, char *def)$/;"	f
config_save	config.c	/^int config_save(struct config_t *config)$/;"	f
config_section_allow	config.c	/^void config_section_allow(struct config_t *cfg, char *section)$/;"	f
config_section_enforce	config.c	/^void config_section_enforce(struct config_t *cfg, char *section)$/;"	f
config_section_exists	config.c	/^int config_section_exists(struct config_t *cfg, char *section)$/;"	f
config_section_first	config.c	/^char *config_section_first(struct config_t *cfg)$/;"	f
config_section_next	config.c	/^char *config_section_next(struct config_t *cfg)$/;"	f
config_section_remove	config.c	/^int config_section_remove(struct config_t *cfg, char *section)$/;"	f
config_t	config.c	/^struct config_t$/;"	s	file:
config_var_allow	config.c	/^void config_var_allow(struct config_t *cfg, char *section, char *var)$/;"	f
config_var_enforce	config.c	/^void config_var_enforce(struct config_t *cfg, char *section, char *var)$/;"	f
config_var_exists	config.c	/^int config_var_exists(struct config_t *cfg, char *section, char *var)$/;"	f
config_write_bool	config.c	/^void config_write_bool(struct config_t *cfg, char *section, char *var, int value)$/;"	f
config_write_double	config.c	/^void config_write_double(struct config_t *cfg, char *section, char *var, double value)$/;"	f
config_write_int	config.c	/^void config_write_int(struct config_t *cfg, char *section, char *var, int value)$/;"	f
config_write_llint	config.c	/^void config_write_llint(struct config_t *cfg, char *section, char *var, long long value)$/;"	f
config_write_ptr	config.c	/^void config_write_ptr(struct config_t *cfg, char *section, char *var, void *value)$/;"	f
config_write_string	config.c	/^void config_write_string(struct config_t *cfg, char *section, char *var, char *value)$/;"	f
count	buffer.c	/^	int count, size;$/;"	m	struct:buffer_t	file:
count	hash-table.c	/^	int count;$/;"	m	struct:hash_table_t	file:
count	heap.c	/^	int size, count, current;$/;"	m	struct:heap_t	file:
count	linked-list.h	/^	int count;$/;"	m	struct:linked_list_t
count	list.h	/^	int count;  \/* Number of elements in the list *\/$/;"	m	struct:list_t
current	heap.c	/^	int size, count, current;$/;"	m	struct:heap_t	file:
current	linked-list.h	/^	struct linked_list_elem_t *head, *tail, *current;$/;"	m	struct:linked_list_t	typeref:struct:linked_list_t::
current_index	linked-list.h	/^	int current_index;$/;"	m	struct:linked_list_t
current_time	chrono.c	/^static double current_time()$/;"	f	file:
data	bin-config.h	/^	void *data;$/;"	m	struct:bin_config_elem_t
data	buffer.c	/^	void *data;$/;"	m	struct:buffer_t	file:
data	hash-table.c	/^	void *data;$/;"	m	struct:hash_table_elem_t	file:
data	heap.c	/^	void *data;$/;"	m	struct:heap_elem_t	file:
data	linked-list.h	/^	void *data;$/;"	m	struct:linked_list_elem_t
dealloc_head	repos.c	/^	void *dealloc_head;$/;"	m	struct:repos_t	file:
debug	debug.h	65;"	d
debug_buffer	debug.h	74;"	d
debug_category_list	debug.c	/^static struct list_t *debug_category_list;$/;"	v	typeref:struct:list_t	file:
debug_category_t	debug.c	/^struct debug_category_t$/;"	s	file:
debug_done	debug.c	/^void debug_done(void)$/;"	f
debug_file	debug.h	49;"	d
debug_flush	debug.h	53;"	d
debug_init	debug.c	/^void debug_init(void)$/;"	f
debug_new_category	debug.c	/^int debug_new_category(char *file_name)$/;"	f
debug_off	debug.h	39;"	d
debug_on	debug.h	38;"	d
debug_status	debug.h	45;"	d
debug_status_invalid	debug.c	/^	debug_status_invalid = 0,$/;"	e	enum:debug_status_t	file:
debug_status_off	debug.c	/^	debug_status_off$/;"	e	enum:debug_status_t	file:
debug_status_on	debug.c	/^	debug_status_on,$/;"	e	enum:debug_status_t	file:
debug_status_t	debug.c	/^enum debug_status_t$/;"	g	file:
debug_tab	debug.h	57;"	d
debug_tab_dec	debug.h	59;"	d
debug_tab_inc	debug.h	58;"	d
dup_data	bin-config.h	/^	int dup_data;$/;"	m	struct:bin_config_elem_t
elem	heap.c	/^	struct heap_elem_t *elem;$/;"	m	struct:heap_t	typeref:struct:heap_t::heap_elem_t	file:
elem	list.h	/^	void **elem;  \/* Vector of elements *\/$/;"	m	struct:list_t
elem	matrix.c	/^	void **elem;$/;"	m	struct:matrix_t	file:
elem_list	bin-config.h	/^	struct hash_table_t *elem_list;$/;"	m	struct:bin_config_t	typeref:struct:bin_config_t::hash_table_t
elem_vector	hash-table.c	/^	struct hash_table_elem_t **elem_vector;$/;"	m	struct:hash_table_t	typeref:struct:hash_table_t::hash_table_elem_t	file:
elf_buffer_read	elf-format.c	/^int elf_buffer_read(struct elf_buffer_t *buffer, void *ptr, int size)$/;"	f
elf_buffer_read_line	elf-format.c	/^int elf_buffer_read_line(struct elf_buffer_t *buffer, char *str, int size)$/;"	f
elf_buffer_seek	elf-format.c	/^void elf_buffer_seek(struct elf_buffer_t *elf_buffer, int pos)$/;"	f
elf_buffer_t	elf-format.h	/^struct elf_buffer_t$/;"	s
elf_buffer_tell	elf-format.c	/^void *elf_buffer_tell(struct elf_buffer_t *buffer)$/;"	f
elf_debug	elf-format.h	94;"	d
elf_debug_category	elf-format.c	/^int elf_debug_category;$/;"	v
elf_file_create_from_allocated_buffer	elf-format.c	/^static struct elf_file_t *elf_file_create_from_allocated_buffer(void *buffer, int size, char *path)$/;"	f	file:
elf_file_create_from_buffer	elf-format.c	/^struct elf_file_t *elf_file_create_from_buffer(void *ptr, int size, char *name)$/;"	f
elf_file_create_from_path	elf-format.c	/^struct elf_file_t *elf_file_create_from_path(char *path)$/;"	f
elf_file_free	elf-format.c	/^void elf_file_free(struct elf_file_t *elf_file)$/;"	f
elf_file_read_elf_header	elf-format.c	/^static void elf_file_read_elf_header(struct elf_file_t *elf_file)$/;"	f	file:
elf_file_read_program_headers	elf-format.c	/^static void elf_file_read_program_headers(struct elf_file_t *elf_file)$/;"	f	file:
elf_file_read_section_headers	elf-format.c	/^static void elf_file_read_section_headers(struct elf_file_t *elf_file)$/;"	f	file:
elf_file_read_symbol_section	elf-format.c	/^static void elf_file_read_symbol_section(struct elf_file_t *elf_file, struct elf_section_t *section)$/;"	f	file:
elf_file_read_symbol_table	elf-format.c	/^static void elf_file_read_symbol_table(struct elf_file_t *elf_file)$/;"	f	file:
elf_file_t	elf-format.h	/^struct elf_file_t$/;"	s
elf_program_header_t	elf-format.h	/^struct elf_program_header_t$/;"	s
elf_section_t	elf-format.h	/^struct elf_section_t$/;"	s
elf_symbol_compare	elf-format.c	/^static int elf_symbol_compare(const void *a, const void *b)$/;"	f	file:
elf_symbol_get_by_address	elf-format.c	/^struct elf_symbol_t *elf_symbol_get_by_address(struct elf_file_t *elf_file, uint32_t addr, uint32_t *offset_ptr)$/;"	f
elf_symbol_get_by_name	elf-format.c	/^struct elf_symbol_t *elf_symbol_get_by_name(struct elf_file_t *elf_file, char *name)$/;"	f
elf_symbol_t	elf-format.h	/^struct elf_symbol_t$/;"	s
ellapsed	chrono.c	/^	double ellapsed;$/;"	m	struct:chrono_t	file:
enumerate_map	config.c	/^static void enumerate_map(char **map, int map_count)$/;"	f	file:
err_elf_64bit	elf-format.c	/^static char *err_elf_64bit =$/;"	v	file:
error	heap.c	/^	int error;$/;"	m	struct:heap_t	file:
error_code	bin-config.h	/^	int error_code;$/;"	m	struct:bin_config_t
error_code	linked-list.h	/^	int error_code;$/;"	m	struct:linked_list_t
error_code	list.h	/^	int error_code;  \/* Error code updated by functions *\/$/;"	m	struct:list_t
f	debug.c	/^	FILE *f;$/;"	m	struct:debug_category_t	file:
fatal	debug.c	/^void fatal(char *fmt, ...)$/;"	f
file_name	bin-config.h	/^	char *file_name;$/;"	m	struct:bin_config_t
file_name	config.c	/^	char *file_name;$/;"	m	struct:config_t	file:
file_name	debug.c	/^	char *file_name;$/;"	m	struct:debug_category_t	file:
find_elem	hash-table.c	/^	struct hash_table_elem_t *find_elem;$/;"	m	struct:hash_table_t	typeref:struct:hash_table_t::hash_table_elem_t	file:
find_index	hash-table.c	/^	int find_index;$/;"	m	struct:hash_table_t	file:
find_op	hash-table.c	/^	int find_op;$/;"	m	struct:hash_table_t	file:
get_item_from_section_var	config.c	/^static void get_item_from_section_var(char *section, char *var, char *item)$/;"	f	file:
get_section_var_from_item	config.c	/^static void get_section_var_from_item(char *item, char *section, char *var)$/;"	f	file:
get_var_value_from_item	config.c	/^static void get_var_value_from_item(char *item, char *var, char *value)$/;"	f	file:
grow	buffer.c	/^static int grow(struct buffer_t *buffer, int size)$/;"	f	file:
hash_table_clear	hash-table.c	/^void hash_table_clear(struct hash_table_t *table)$/;"	f
hash_table_count	hash-table.c	/^int hash_table_count(struct hash_table_t *table)$/;"	f
hash_table_create	hash-table.c	/^struct hash_table_t *hash_table_create(int size, int case_sensitive)$/;"	f
hash_table_elem_create	hash-table.c	/^struct hash_table_elem_t *hash_table_elem_create(char *key, void *data)$/;"	f
hash_table_elem_free	hash-table.c	/^void hash_table_elem_free(struct hash_table_elem_t *elem)$/;"	f
hash_table_elem_t	hash-table.c	/^struct hash_table_elem_t$/;"	s	file:
hash_table_find	hash-table.c	/^static struct hash_table_elem_t *hash_table_find(struct hash_table_t *table, char *key, int *index_ptr)$/;"	f	file:
hash_table_find_first	hash-table.c	/^char *hash_table_find_first(struct hash_table_t *table, void **data_ptr)$/;"	f
hash_table_find_next	hash-table.c	/^char *hash_table_find_next(struct hash_table_t *table, void **data_ptr)$/;"	f
hash_table_free	hash-table.c	/^void hash_table_free(struct hash_table_t *table)$/;"	f
hash_table_get	hash-table.c	/^void *hash_table_get(struct hash_table_t *table, char *key)$/;"	f
hash_table_get_index	hash-table.c	/^static int hash_table_get_index(struct hash_table_t *table, char *key)$/;"	f	file:
hash_table_grow	hash-table.c	/^static void hash_table_grow(struct hash_table_t *table)$/;"	f	file:
hash_table_insert	hash-table.c	/^int hash_table_insert(struct hash_table_t *table, char *key, void *data)$/;"	f
hash_table_remove	hash-table.c	/^void *hash_table_remove(struct hash_table_t *table, char *key)$/;"	f
hash_table_set	hash-table.c	/^int hash_table_set(struct hash_table_t *table, char *key, void *data)$/;"	f
hash_table_t	hash-table.c	/^struct hash_table_t$/;"	s	file:
head	buffer.c	/^	int head, tail;$/;"	m	struct:buffer_t	file:
head	linked-list.h	/^	struct linked_list_elem_t *head, *tail, *current;$/;"	m	struct:linked_list_t	typeref:struct:linked_list_t::linked_list_elem_t
head	list.h	/^	int head;  \/* Head element in vector *\/$/;"	m	struct:list_t
header	elf-format.h	/^	Elf32_Ehdr *header;$/;"	m	struct:elf_file_t
header	elf-format.h	/^	Elf32_Phdr *header;$/;"	m	struct:elf_program_header_t
header	elf-format.h	/^	Elf32_Shdr *header;$/;"	m	struct:elf_section_t
heap_count	heap.c	/^int heap_count(struct heap_t *heap)$/;"	f
heap_create	heap.c	/^struct heap_t *heap_create(int size)$/;"	f
heap_elem_t	heap.c	/^struct heap_elem_t {$/;"	s	file:
heap_error	heap.c	/^int heap_error(struct heap_t *heap)$/;"	f
heap_error_msg	heap.c	/^char *heap_error_msg(struct heap_t *heap)$/;"	f
heap_extract	heap.c	/^long long heap_extract(struct heap_t *heap, void **data)$/;"	f
heap_first	heap.c	/^long long heap_first(struct heap_t *heap, void **data)$/;"	f
heap_free	heap.c	/^void heap_free(struct heap_t *heap)$/;"	f
heap_grow	heap.c	/^static int heap_grow(struct heap_t *heap)$/;"	f	file:
heap_insert	heap.c	/^void heap_insert(struct heap_t *heap, long long value, void *data)$/;"	f
heap_less_than	heap.c	/^static int heap_less_than(struct heap_t *heap, int x, int y)$/;"	f	file:
heap_next	heap.c	/^long long heap_next(struct heap_t *heap, void **data)$/;"	f
heap_peek	heap.c	/^long long heap_peek(struct heap_t *heap, void **data)$/;"	f
heap_t	heap.c	/^struct heap_t {$/;"	s	file:
heap_time_policy	heap.c	/^void heap_time_policy(struct heap_t *heap, enum heap_time_policy_enum policy)$/;"	f
heap_time_policy_enum	heap.h	/^enum heap_time_policy_enum {$/;"	g
heap_time_policy_fifo	heap.h	/^	heap_time_policy_fifo = 0,	\/* default *\/$/;"	e	enum:heap_time_policy_enum
heap_time_policy_lifo	heap.h	/^	heap_time_policy_lifo$/;"	e	enum:heap_time_policy_enum
heapify	heap.c	/^static void heapify(struct heap_t *heap, int i)$/;"	f	file:
id	repos.c	/^	int id;$/;"	m	struct:objtail_t	file:
id	repos.c	/^	int id;$/;"	m	struct:repos_t	file:
item_is_allowed	config.c	/^static int item_is_allowed(struct config_t *cfg, char *section, char *var)$/;"	f	file:
item_is_present	config.c	/^static int item_is_present(struct config_t *cfg, char *section, char *var)$/;"	f	file:
items	config.c	/^	struct hash_table_t *items;$/;"	m	struct:config_t	typeref:struct:config_t::hash_table_t	file:
key	hash-table.c	/^	char *key;$/;"	m	struct:hash_table_elem_t	file:
linked_list_add	linked-list.c	/^void linked_list_add(struct linked_list_t *list, void *data)$/;"	f
linked_list_clear	linked-list.c	/^void linked_list_clear(struct linked_list_t *list)$/;"	f
linked_list_count	linked-list.c	/^int linked_list_count(struct linked_list_t *list)$/;"	f
linked_list_create	linked-list.c	/^struct linked_list_t *linked_list_create()$/;"	f
linked_list_current	linked-list.c	/^int linked_list_current(struct linked_list_t *list)$/;"	f
linked_list_elem_t	linked-list.h	/^struct linked_list_elem_t$/;"	s
linked_list_error_t	linked-list.h	/^enum linked_list_error_t$/;"	g
linked_list_find	linked-list.c	/^void linked_list_find(struct linked_list_t *list, void *data)$/;"	f
linked_list_free	linked-list.c	/^void linked_list_free(struct linked_list_t *list)$/;"	f
linked_list_get	linked-list.c	/^void *linked_list_get(struct linked_list_t *list)$/;"	f
linked_list_goto	linked-list.c	/^void linked_list_goto(struct linked_list_t *list, int index)$/;"	f
linked_list_head	linked-list.c	/^void linked_list_head(struct linked_list_t *list)$/;"	f
linked_list_insert	linked-list.c	/^void linked_list_insert(struct linked_list_t *list, void *data)$/;"	f
linked_list_is_end	linked-list.c	/^int linked_list_is_end(struct linked_list_t *list)$/;"	f
linked_list_next	linked-list.c	/^void linked_list_next(struct linked_list_t *list)$/;"	f
linked_list_next_circular	linked-list.c	/^void linked_list_next_circular(struct linked_list_t *list)$/;"	f
linked_list_out	linked-list.c	/^void linked_list_out(struct linked_list_t *list)$/;"	f
linked_list_prev	linked-list.c	/^void linked_list_prev(struct linked_list_t *list)$/;"	f
linked_list_prev_circular	linked-list.c	/^void linked_list_prev_circular(struct linked_list_t *list)$/;"	f
linked_list_remove	linked-list.c	/^void linked_list_remove(struct linked_list_t *list)$/;"	f
linked_list_sort	linked-list.c	/^void linked_list_sort(struct linked_list_t *list, int (*comp)(const void *, const void *))$/;"	f
linked_list_sorted	linked-list.c	/^int linked_list_sorted(struct linked_list_t *list,$/;"	f
linked_list_t	linked-list.h	/^struct linked_list_t$/;"	s
linked_list_tail	linked-list.c	/^void linked_list_tail(struct linked_list_t *list)$/;"	f
list	chrono.c	/^	struct list_t *list;$/;"	m	struct:chrono_list_t	typeref:struct:chrono_list_t::list_t	file:
list_add	list.c	/^void list_add(struct list_t *list, void *elem)$/;"	f
list_bottom	list.c	/^void *list_bottom(struct list_t *list)$/;"	f
list_clear	list.c	/^void list_clear(struct list_t *list)$/;"	f
list_count	list.c	/^int list_count(struct list_t *list)$/;"	f
list_create	list.c	/^struct list_t *list_create(void)$/;"	f
list_create_with_size	list.c	/^struct list_t *list_create_with_size(int size)$/;"	f
list_dequeue	list.c	/^void *list_dequeue(struct list_t *list)$/;"	f
list_enqueue	list.c	/^void list_enqueue(struct list_t *list, void *elem)$/;"	f
list_err_t	list.h	/^enum list_err_t$/;"	g
list_free	list.c	/^void list_free(struct list_t *list)$/;"	f
list_get	list.c	/^void *list_get(struct list_t *list, int index)$/;"	f
list_grow	list.c	/^static void list_grow(struct list_t *list)$/;"	f	file:
list_head	list.c	/^void *list_head(struct list_t *list)$/;"	f
list_index_of	list.c	/^int list_index_of(struct list_t *list, void *elem)$/;"	f
list_insert	list.c	/^void list_insert(struct list_t *list, int index, void *elem)$/;"	f
list_pop	list.c	/^void *list_pop(struct list_t *list)$/;"	f
list_push	list.c	/^void list_push(struct list_t *list, void *elem)$/;"	f
list_remove	list.c	/^void *list_remove(struct list_t *list, void *elem)$/;"	f
list_remove_at	list.c	/^void *list_remove_at(struct list_t *list, int index)$/;"	f
list_set	list.c	/^void list_set(struct list_t *list, int index, void *elem)$/;"	f
list_sort	list.c	/^void list_sort(struct list_t *list, int (*comp)(const void *, const void *))$/;"	f
list_t	list.h	/^struct list_t$/;"	s
list_tail	list.c	/^void *list_tail(struct list_t *list)$/;"	f
list_top	list.c	/^void *list_top(struct list_t *list)$/;"	f
matrix_clear	matrix.c	/^void matrix_clear(struct matrix_t *matrix)$/;"	f
matrix_create	matrix.c	/^struct matrix_t *matrix_create(int num_rows, int num_cols)$/;"	f
matrix_free	matrix.c	/^void matrix_free(struct matrix_t *matrix)$/;"	f
matrix_get	matrix.c	/^void *matrix_get(struct matrix_t *matrix, int row, int col)$/;"	f
matrix_get_num_cols	matrix.c	/^int matrix_get_num_cols(struct matrix_t *matrix)$/;"	f
matrix_get_num_rows	matrix.c	/^int matrix_get_num_rows(struct matrix_t *matrix)$/;"	f
matrix_set	matrix.c	/^void matrix_set(struct matrix_t *matrix, int row, int col, void *value)$/;"	f
matrix_t	matrix.c	/^struct matrix_t$/;"	s	file:
name	chrono.c	/^	char *name;$/;"	m	struct:chrono_t	file:
name	elf-format.h	/^	char *name;$/;"	m	struct:elf_section_t
name	elf-format.h	/^	char *name;$/;"	m	struct:elf_symbol_t
name	repos.c	/^	char *name;$/;"	m	struct:repos_t	file:
next	hash-table.c	/^	struct hash_table_elem_t *next;$/;"	m	struct:hash_table_elem_t	typeref:struct:hash_table_elem_t::hash_table_elem_t	file:
next	linked-list.h	/^	struct linked_list_elem_t *next;$/;"	m	struct:linked_list_elem_t	typeref:struct:linked_list_elem_t::linked_list_elem_t
next	repos.c	/^	void *next;$/;"	m	struct:objtail_t	file:
num_cols	matrix.c	/^	int num_cols;$/;"	m	struct:matrix_t	file:
num_rows	matrix.c	/^	int num_rows;$/;"	m	struct:matrix_t	file:
object_size	repos.c	/^	int object_size;$/;"	m	struct:repos_t	file:
objtail_t	repos.c	/^struct objtail_t$/;"	s	file:
panic	debug.c	/^void panic(char *fmt, ...)$/;"	f
parent_elem	bin-config.h	/^	struct bin_config_elem_t *parent_elem;$/;"	m	struct:bin_config_elem_t	typeref:struct:bin_config_elem_t::bin_config_elem_t
path	elf-format.h	/^	char *path;$/;"	m	struct:elf_file_t
pos	elf-format.h	/^	int pos;  \/* Current position in buffer [0..size-1] *\/$/;"	m	struct:elf_buffer_t
prev	linked-list.h	/^	struct linked_list_elem_t *prev;$/;"	m	struct:linked_list_elem_t	typeref:struct:linked_list_elem_t::linked_list_elem_t
prev	repos.c	/^	void *prev;$/;"	m	struct:objtail_t	file:
program_header_list	elf-format.h	/^	struct list_t *program_header_list;  \/* Elements of type 'struct elf_program_header_t' *\/$/;"	m	struct:elf_file_t	typeref:struct:elf_file_t::list_t
ptr	elf-format.h	/^	void *ptr;  \/* Contents of the buffer *\/$/;"	m	struct:elf_buffer_t
repos_allocated_object	repos.c	/^int repos_allocated_object(struct repos_t *repos, void *obj)$/;"	f
repos_create	repos.c	/^struct repos_t *repos_create(int object_size, char *name)$/;"	f
repos_create_object	repos.c	/^void *repos_create_object(struct repos_t *repos)$/;"	f
repos_free	repos.c	/^void repos_free(struct repos_t *repos)$/;"	f
repos_free_dump	repos.c	/^void repos_free_dump(struct repos_t *repos, void(*dump)(void *, FILE *))$/;"	f
repos_free_object	repos.c	/^void repos_free_object(struct repos_t *repos, void *obj)$/;"	f
repos_t	repos.c	/^struct repos_t$/;"	s	file:
section	elf-format.h	/^	int section;$/;"	m	struct:elf_symbol_t
section_list	elf-format.h	/^	struct list_t *section_list;  \/* Elements of type 'struct elf_section_t' *\/$/;"	m	struct:elf_file_t	typeref:struct:elf_file_t::list_t
size	bin-config.h	/^	int size;$/;"	m	struct:bin_config_elem_t
size	buffer.c	/^	int count, size;$/;"	m	struct:buffer_t	file:
size	elf-format.h	/^	int size;  \/* Size of the buffer *\/$/;"	m	struct:elf_buffer_t
size	elf-format.h	/^	uint32_t size;$/;"	m	struct:elf_symbol_t
size	hash-table.c	/^	int size;$/;"	m	struct:hash_table_t	file:
size	heap.c	/^	int size, count, current;$/;"	m	struct:heap_t	file:
size	list.h	/^	int size;  \/* Size of allocated vector *\/$/;"	m	struct:list_t
sort	linked-list.c	/^static void sort(struct linked_list_elem_t **array, int lo, int hi, int (*comp)(const void *, const void *))$/;"	f	file:
sort	list.c	/^static void sort(struct list_t *list, int lo, int hi,$/;"	f	file:
space_count	debug.c	/^	int space_count;$/;"	m	struct:debug_category_t	file:
start	chrono.c	/^	double start;$/;"	m	struct:chrono_t	file:
status	chrono.c	/^	int status;$/;"	m	struct:chrono_t	file:
status	debug.c	/^	enum debug_status_t status;$/;"	m	struct:debug_category_t	typeref:enum:debug_category_t::debug_status_t	file:
status	repos.c	/^	int status;  \/* 0=free, 1=allocated *\/$/;"	m	struct:objtail_t	file:
str_compare_func	hash-table.c	/^	int (*str_compare_func)(const char *, const char *);$/;"	m	struct:hash_table_t	file:
string_table	elf-format.h	/^	struct elf_section_t *string_table;  \/* String table section *\/$/;"	m	struct:elf_file_t	typeref:struct:elf_file_t::elf_section_t
symbol_table	elf-format.h	/^	struct list_t *symbol_table;  \/* Elements of type 'struct elf_symbol_t' *\/$/;"	m	struct:elf_file_t	typeref:struct:elf_file_t::list_t
tail	buffer.c	/^	int head, tail;$/;"	m	struct:buffer_t	file:
tail	linked-list.h	/^	struct linked_list_elem_t *head, *tail, *current;$/;"	m	struct:linked_list_t	typeref:struct:linked_list_t::
tail	list.h	/^	int tail;  \/* Tail element in vector *\/$/;"	m	struct:list_t
time	heap.c	/^	long long time, value;$/;"	m	struct:heap_elem_t	file:
time	heap.c	/^	long long time;$/;"	m	struct:heap_t	file:
time_policy	heap.c	/^	enum heap_time_policy_enum time_policy;$/;"	m	struct:heap_t	typeref:enum:heap_t::heap_time_policy_enum	file:
trim	config.c	/^static void trim(char *dest, char *str)$/;"	f	file:
value	elf-format.h	/^	uint32_t value;$/;"	m	struct:elf_symbol_t
value	heap.c	/^	long long time, value;$/;"	m	struct:heap_elem_t	file:
warning	debug.c	/^void warning(char *fmt, ...)$/;"	f
x86_cuda_debug	debug.h	69;"	d
