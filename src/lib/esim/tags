!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ESIM_EV_INVALID	esim.c	/^static int ESIM_EV_INVALID;$/;"	v	file:
ESIM_EV_NONE	esim.c	/^int ESIM_EV_NONE;$/;"	v
ESIM_H	esim.h	21;"	d
__trace	trace.c	/^void __trace(int category, int print_cycle, char *fmt, ...)$/;"	f
__trace_status	trace.c	/^int __trace_status(int category)$/;"	f
curr_event	esim.c	/^static int curr_event = 0;$/;"	v	file:
data	esim.c	/^	void *data;$/;"	m	struct:esim_event_t	file:
err_esim_finalization	esim.c	/^static char *err_esim_finalization =$/;"	v	file:
esim_cycle	esim.c	/^long long esim_cycle = 1;$/;"	v
esim_done	esim.c	/^void esim_done()$/;"	f
esim_drain_heap	esim.c	/^static void esim_drain_heap(void)$/;"	f	file:
esim_empty	esim.c	/^void esim_empty()$/;"	f
esim_end_event_list	esim.c	/^static struct linked_list_t *esim_end_event_list;$/;"	v	typeref:struct:linked_list_t	file:
esim_event_count	esim.c	/^int esim_event_count()$/;"	f
esim_event_handler_list	esim.c	/^static struct list_t *esim_event_handler_list;$/;"	v	typeref:struct:list_t	file:
esim_event_handler_t	esim.h	/^typedef void (*esim_event_handler_t)(int event, void *data);$/;"	t
esim_event_heap	esim.c	/^static struct heap_t *esim_event_heap;$/;"	v	typeref:struct:heap_t	file:
esim_event_t	esim.c	/^struct esim_event_t$/;"	s	file:
esim_execute_event	esim.c	/^void esim_execute_event(int event, void *data)$/;"	f
esim_init	esim.c	/^void esim_init()$/;"	f
esim_lock_schedule	esim.c	/^static int esim_lock_schedule = 0;$/;"	v	file:
esim_process_all_events	esim.c	/^void esim_process_all_events(void)$/;"	f
esim_process_events	esim.c	/^void esim_process_events()$/;"	f
esim_register_event	esim.c	/^int esim_register_event(esim_event_handler_t handler)$/;"	f
esim_schedule_end_event	esim.c	/^void esim_schedule_end_event(int event, void *data)$/;"	f
esim_schedule_event	esim.c	/^void esim_schedule_event(int event, void *data, int after)$/;"	f
event	esim.c	/^	int event;$/;"	m	struct:esim_event_t	file:
status	trace.c	/^	enum trace_status_t status;$/;"	m	struct:trace_category_t	typeref:enum:trace_category_t::trace_status_t	file:
trace	esim.h	99;"	d
trace_category_list	trace.c	/^static struct list_t *trace_category_list;$/;"	v	typeref:struct:list_t	file:
trace_category_t	trace.c	/^struct trace_category_t$/;"	s	file:
trace_done	trace.c	/^void trace_done(void)$/;"	f
trace_file	trace.c	/^static gzFile *trace_file;$/;"	v	file:
trace_header	esim.h	101;"	d
trace_init	trace.c	/^void trace_init(char *file_name)$/;"	f
trace_last_cycle	trace.c	/^static long long trace_last_cycle = -1;$/;"	v	file:
trace_new_category	trace.c	/^int trace_new_category(void)$/;"	f
trace_status	esim.h	96;"	d
trace_status_invalid	trace.c	/^	trace_status_invalid = 0,$/;"	e	enum:trace_status_t	file:
trace_status_off	trace.c	/^	trace_status_off$/;"	e	enum:trace_status_t	file:
trace_status_on	trace.c	/^	trace_status_on,$/;"	e	enum:trace_status_t	file:
trace_status_t	trace.c	/^enum trace_status_t$/;"	g	file:
