!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BTB_ENTRY	bpred.c	24;"	d	file:
DUMP_CORE_STRUCT_STATS	cpu.c	583;"	d	file:
DUMP_DISPATCH_STAT	cpu.c	579;"	d	file:
DUMP_FU_STAT	cpu.c	572;"	d	file:
DUMP_THREAD_STRUCT_STATS	cpu.c	592;"	d	file:
UOP_MAGIC	uop.c	23;"	d	file:
UPDATE_CORE_OCCUPANCY_STATS	cpu.c	973;"	d	file:
UPDATE_THREAD_OCCUPANCY_STATS	cpu.c	966;"	d	file:
X86_CORE	x86-timing.h	560;"	d
X86_CORE_FOR_EACH	x86-timing.h	564;"	d
X86_CORE_IDX	x86-timing.h	562;"	d
X86_FU_RES_MAX	x86-timing.h	213;"	d
X86_REG_FILE_MIN_FP_SIZE	x86-timing.h	388;"	d
X86_REG_FILE_MIN_INT_SIZE	x86-timing.h	387;"	d
X86_THREAD	x86-timing.h	561;"	d
X86_THREAD_FOR_EACH	x86-timing.h	565;"	d
X86_THREAD_IDX	x86-timing.h	563;"	d
X86_TIMING_H	x86-timing.h	21;"	d
X86_TRACE_CACHE_ENTRY	x86-timing.h	491;"	d
X86_TRACE_CACHE_ENTRY_SIZE	x86-timing.h	488;"	d
X86_TRACE_VERSION_MAJOR	cpu.c	826;"	d	file:
X86_TRACE_VERSION_MINOR	cpu.c	827;"	d	file:
accesses	bpred.c	/^	long long accesses;$/;"	m	struct:x86_bpred_t	file:
accesses	x86-timing.h	/^	long long accesses;$/;"	m	struct:x86_trace_cache_t
accesses	x86-timing.h	/^	long long accesses[x86_fu_count];$/;"	m	struct:x86_fu_t
bimod	bpred.c	/^	char *bimod;$/;"	m	struct:x86_bpred_t	file:
bimod_index	x86-timing.h	/^	int bimod_index, bimod_pred;$/;"	m	struct:x86_uop_t
bimod_pred	x86-timing.h	/^	int bimod_index, bimod_pred;$/;"	m	struct:x86_uop_t
bpred	x86-timing.h	/^	struct x86_bpred_t *bpred;  \/* branch predictor *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::x86_bpred_t
branch_count	x86-timing.h	/^	int branch_mask, branch_flags, branch_count;$/;"	m	struct:x86_trace_cache_entry_t
branch_flags	x86-timing.h	/^	int branch_mask, branch_flags, branch_count;$/;"	m	struct:x86_trace_cache_entry_t
branch_mask	x86-timing.h	/^	int branch_mask, branch_flags, branch_count;$/;"	m	struct:x86_trace_cache_entry_t
branches	x86-timing.h	/^	long long branches;$/;"	m	struct:x86_core_t
branches	x86-timing.h	/^	long long branches;$/;"	m	struct:x86_cpu_t
branches	x86-timing.h	/^	long long branches;$/;"	m	struct:x86_thread_t
btb	bpred.c	/^	struct btb_entry_t *btb;$/;"	m	struct:x86_bpred_t	typeref:struct:x86_bpred_t::btb_entry_t	file:
btb_entry_t	bpred.c	/^struct btb_entry_t$/;"	s	file:
btb_reads	x86-timing.h	/^	long long btb_reads;$/;"	m	struct:x86_thread_t
btb_writes	x86-timing.h	/^	long long btb_writes;$/;"	m	struct:x86_thread_t
busy	x86-timing.h	/^	int busy;  \/* number of mapped logical registers *\/$/;"	m	struct:x86_phreg_t
choice	bpred.c	/^	char *choice;$/;"	m	struct:x86_bpred_t	file:
choice_index	x86-timing.h	/^	int choice_index, choice_pred;$/;"	m	struct:x86_uop_t
choice_pred	x86-timing.h	/^	int choice_index, choice_pred;$/;"	m	struct:x86_uop_t
commit_current	x86-timing.h	/^	int commit_current;$/;"	m	struct:x86_core_t
committed	x86-timing.h	/^	long long committed;$/;"	m	struct:x86_trace_cache_t
committed	x86-timing.h	/^	long long committed[x86_uinst_opcode_count];$/;"	m	struct:x86_core_t
committed	x86-timing.h	/^	long long committed[x86_uinst_opcode_count];$/;"	m	struct:x86_cpu_t
committed	x86-timing.h	/^	long long committed[x86_uinst_opcode_count];$/;"	m	struct:x86_thread_t
completed	x86-timing.h	/^	int completed;$/;"	m	struct:x86_uop_t
core	x86-timing.h	/^	int core;$/;"	m	struct:x86_uop_t
core	x86-timing.h	/^	struct x86_core_t *core;$/;"	m	struct:x86_cpu_t	typeref:struct:x86_cpu_t::x86_core_t
count	x86-timing.h	/^	int count;$/;"	m	struct:x86_fu_res_t
counter	bpred.c	/^	int counter;  \/* LRU counter *\/$/;"	m	struct:btb_entry_t	file:
counter	x86-timing.h	/^	int counter;  \/* lru counter *\/$/;"	m	struct:x86_trace_cache_entry_t
ctx	x86-timing.h	/^	struct x86_ctx_t *ctx;  \/* allocated kernel context *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::x86_ctx_t
ctx	x86-timing.h	/^	struct x86_ctx_t *ctx;$/;"	m	struct:x86_uop_t	typeref:struct:x86_uop_t::x86_ctx_t
ctx_alloc_oldest	x86-timing.h	/^	long long ctx_alloc_oldest;  \/* Time when oldest context was allocated *\/$/;"	m	struct:x86_cpu_t
ctx_dealloc_signals	x86-timing.h	/^	int ctx_dealloc_signals;  \/* Sent deallocation signals *\/$/;"	m	struct:x86_cpu_t
cycle	x86-timing.h	/^	long long cycle;$/;"	m	struct:x86_cpu_t
cycle_when_free	x86-timing.h	/^	long long cycle_when_free[x86_fu_count][X86_FU_RES_MAX];$/;"	m	struct:x86_fu_t
data_mod	x86-timing.h	/^	struct mod_t *data_mod;  \/* Entry for data *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::mod_t
decode_current	x86-timing.h	/^	int decode_current;$/;"	m	struct:x86_core_t
denied	x86-timing.h	/^	long long denied[x86_fu_count];$/;"	m	struct:x86_fu_t
dispatch_current	x86-timing.h	/^	int dispatch_current;$/;"	m	struct:x86_core_t
dispatch_seq	x86-timing.h	/^	long long dispatch_seq;  \/* Counter for uop ID assignment *\/$/;"	m	struct:x86_core_t
dispatch_stall	x86-timing.h	/^	long long dispatch_stall[x86_dispatch_stall_max];$/;"	m	struct:x86_core_t
dispatched	x86-timing.h	/^	long long dispatched[x86_uinst_opcode_count];$/;"	m	struct:x86_core_t
dispatched	x86-timing.h	/^	long long dispatched[x86_uinst_opcode_count];$/;"	m	struct:x86_cpu_t
dispatched	x86-timing.h	/^	long long dispatched[x86_uinst_opcode_count];$/;"	m	struct:x86_thread_t
eip	x86-timing.h	/^	unsigned int eip;  \/* Address of x86 macro-instruction *\/$/;"	m	struct:x86_uop_t
entry	x86-timing.h	/^	struct x86_trace_cache_entry_t *entry;$/;"	m	struct:x86_trace_cache_t	typeref:struct:x86_trace_cache_t::x86_trace_cache_entry_t
err_x86_cpu_commit_stall	stg-commit.c	/^static char *err_x86_cpu_commit_stall =$/;"	v	file:
event_queue	x86-timing.h	/^	struct linked_list_t *event_queue;$/;"	m	struct:x86_core_t	typeref:struct:x86_core_t::linked_list_t
eventq_compare	queues.c	/^static int eventq_compare(const void *item1, const void *item2)$/;"	f	file:
fall_through	x86-timing.h	/^	unsigned int fall_through;$/;"	m	struct:x86_trace_cache_entry_t
fetch_access	x86-timing.h	/^	long long fetch_access;  \/* Access identifier to fetch this instruction *\/$/;"	m	struct:x86_uop_t
fetch_access	x86-timing.h	/^	long long fetch_access;  \/* Module access ID of last instruction fetch *\/$/;"	m	struct:x86_thread_t
fetch_address	x86-timing.h	/^	unsigned int fetch_address;  \/* Physical address of last instruction fetch *\/$/;"	m	struct:x86_thread_t
fetch_address	x86-timing.h	/^	unsigned int fetch_address;  \/* Physical address of memory access to fetch this instruction *\/$/;"	m	struct:x86_uop_t
fetch_block	x86-timing.h	/^	unsigned int fetch_block;  \/* Virtual address of last fetched block *\/$/;"	m	struct:x86_thread_t
fetch_current	x86-timing.h	/^	int fetch_current;  \/* Currently fetching thread *\/$/;"	m	struct:x86_core_t
fetch_eip	x86-timing.h	/^	unsigned int fetch_eip, fetch_neip;  \/* eip and next eip *\/$/;"	m	struct:x86_thread_t
fetch_neip	x86-timing.h	/^	unsigned int fetch_eip, fetch_neip;  \/* eip and next eip *\/$/;"	m	struct:x86_thread_t
fetch_queue	x86-timing.h	/^	struct list_t *fetch_queue;$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::list_t
fetch_stall_until	x86-timing.h	/^	long long fetch_stall_until;  \/* Cycle until which fetching is stalled (inclussive) *\/$/;"	m	struct:x86_thread_t
fetch_switch_when	x86-timing.h	/^	long long fetch_switch_when;  \/* Cycle for last thread switch (for SwitchOnEvent) *\/$/;"	m	struct:x86_core_t
fetch_trace_cache	x86-timing.h	/^	int fetch_trace_cache;  \/* True if uop comes from trace cache *\/$/;"	m	struct:x86_uop_t
fetched	x86-timing.h	/^	long long fetched;$/;"	m	struct:x86_cpu_t
fetched	x86-timing.h	/^	long long fetched;$/;"	m	struct:x86_thread_t
fetchq_occ	x86-timing.h	/^	int fetchq_occ;  \/* Number of bytes occupied in the fetch queue *\/$/;"	m	struct:x86_thread_t
flags	x86-timing.h	/^	enum x86_uinst_flag_t flags;$/;"	m	struct:x86_uop_t	typeref:enum:x86_uop_t::x86_uinst_flag_t
fp_free_phreg	x86-timing.h	/^	int *fp_free_phreg;$/;"	m	struct:x86_reg_file_t
fp_free_phreg_count	x86-timing.h	/^	int fp_free_phreg_count;$/;"	m	struct:x86_reg_file_t
fp_phreg	x86-timing.h	/^	struct x86_phreg_t *fp_phreg;$/;"	m	struct:x86_reg_file_t	typeref:struct:x86_reg_file_t::x86_phreg_t
fp_phreg_count	x86-timing.h	/^	int fp_phreg_count;$/;"	m	struct:x86_reg_file_t
fp_rat	x86-timing.h	/^	int fp_rat[x86_dep_fp_count];$/;"	m	struct:x86_reg_file_t
fp_top_of_stack	x86-timing.h	/^	int fp_top_of_stack;  \/* Value between 0 and 7 *\/$/;"	m	struct:x86_reg_file_t
fu	x86-timing.h	/^	struct x86_fu_t *fu;$/;"	m	struct:x86_core_t	typeref:struct:x86_core_t::x86_fu_t
fu_class_table	fu.c	/^static enum x86_fu_class_t fu_class_table[x86_uinst_opcode_count] =$/;"	v	typeref:enum:x86_fu_class_t	file:
hits	bpred.c	/^	long long hits;$/;"	m	struct:x86_bpred_t	file:
hits	x86-timing.h	/^	long long hits;$/;"	m	struct:x86_trace_cache_t
id	x86-timing.h	/^	long long id;  \/* Unique ID *\/$/;"	m	struct:x86_uop_t
id_in_core	x86-timing.h	/^	long long id_in_core;  \/* Unique ID in core *\/$/;"	m	struct:x86_uop_t
idep_count	x86-timing.h	/^	int idep_count;$/;"	m	struct:x86_uop_t
in_event_queue	x86-timing.h	/^	int in_event_queue : 1;$/;"	m	struct:x86_uop_t
in_fetch_queue	x86-timing.h	/^	int in_fetch_queue : 1;$/;"	m	struct:x86_uop_t
in_iq	x86-timing.h	/^	int in_iq : 1;$/;"	m	struct:x86_uop_t
in_lq	x86-timing.h	/^	int in_lq : 1;$/;"	m	struct:x86_uop_t
in_rob	x86-timing.h	/^	int in_rob : 1;$/;"	m	struct:x86_uop_t
in_sq	x86-timing.h	/^	int in_sq : 1;$/;"	m	struct:x86_uop_t
in_uop_queue	x86-timing.h	/^	int in_uop_queue : 1;$/;"	m	struct:x86_uop_t
in_uop_trace_list	x86-timing.h	/^	int in_uop_trace_list : 1;$/;"	m	struct:x86_uop_t
inst	x86-timing.h	/^	long long inst;$/;"	m	struct:x86_cpu_t
inst_mod	x86-timing.h	/^	struct mod_t *inst_mod;  \/* Entry for instructions *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::mod_t
int_free_phreg	x86-timing.h	/^	int *int_free_phreg;$/;"	m	struct:x86_reg_file_t
int_free_phreg_count	x86-timing.h	/^	int int_free_phreg_count;$/;"	m	struct:x86_reg_file_t
int_phreg	x86-timing.h	/^	struct x86_phreg_t *int_phreg;$/;"	m	struct:x86_reg_file_t	typeref:struct:x86_reg_file_t::x86_phreg_t
int_phreg_count	x86-timing.h	/^	int int_phreg_count;$/;"	m	struct:x86_reg_file_t
int_rat	x86-timing.h	/^	int int_rat[x86_dep_int_count];$/;"	m	struct:x86_reg_file_t
iq	x86-timing.h	/^	struct linked_list_t *iq;$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::linked_list_t
iq_count	x86-timing.h	/^	int iq_count;$/;"	m	struct:x86_core_t
iq_count	x86-timing.h	/^	int iq_count;$/;"	m	struct:x86_thread_t
iq_full	x86-timing.h	/^	long long iq_full;$/;"	m	struct:x86_core_t
iq_full	x86-timing.h	/^	long long iq_full;$/;"	m	struct:x86_thread_t
iq_occupancy	x86-timing.h	/^	long long iq_occupancy;$/;"	m	struct:x86_core_t
iq_occupancy	x86-timing.h	/^	long long iq_occupancy;$/;"	m	struct:x86_thread_t
iq_reads	x86-timing.h	/^	long long iq_reads;$/;"	m	struct:x86_core_t
iq_reads	x86-timing.h	/^	long long iq_reads;$/;"	m	struct:x86_thread_t
iq_wakeup_accesses	x86-timing.h	/^	long long iq_wakeup_accesses;$/;"	m	struct:x86_core_t
iq_wakeup_accesses	x86-timing.h	/^	long long iq_wakeup_accesses;$/;"	m	struct:x86_thread_t
iq_writes	x86-timing.h	/^	long long iq_writes;$/;"	m	struct:x86_core_t
iq_writes	x86-timing.h	/^	long long iq_writes;$/;"	m	struct:x86_thread_t
issue_current	x86-timing.h	/^	int issue_current;$/;"	m	struct:x86_core_t
issue_try_when	x86-timing.h	/^	long long issue_try_when;  \/* first cycle when f.u. is tried to be reserved *\/$/;"	m	struct:x86_uop_t
issue_when	x86-timing.h	/^	long long issue_when;  \/* cycle when issued *\/$/;"	m	struct:x86_uop_t
issued	x86-timing.h	/^	int issued;$/;"	m	struct:x86_uop_t
issued	x86-timing.h	/^	long long issued[x86_uinst_opcode_count];$/;"	m	struct:x86_core_t
issued	x86-timing.h	/^	long long issued[x86_uinst_opcode_count];$/;"	m	struct:x86_cpu_t
issued	x86-timing.h	/^	long long issued[x86_uinst_opcode_count];$/;"	m	struct:x86_thread_t
issuelat	x86-timing.h	/^	int issuelat;$/;"	m	struct:x86_fu_res_t
last_alloc_pid	x86-timing.h	/^	int last_alloc_pid;  \/* pid of last allocated context *\/$/;"	m	struct:x86_thread_t
last_commit_cycle	x86-timing.h	/^	long long last_commit_cycle;$/;"	m	struct:x86_thread_t
last_committed	x86-timing.h	/^	long long last_committed;$/;"	m	struct:x86_cpu_t
last_dump	x86-timing.h	/^	long long last_dump;$/;"	m	struct:x86_cpu_t
lq	x86-timing.h	/^	struct linked_list_t *lq;$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::linked_list_t
lsq_count	x86-timing.h	/^	int lsq_count;$/;"	m	struct:x86_core_t
lsq_count	x86-timing.h	/^	int lsq_count;$/;"	m	struct:x86_thread_t
lsq_full	x86-timing.h	/^	long long lsq_full;$/;"	m	struct:x86_core_t
lsq_full	x86-timing.h	/^	long long lsq_full;$/;"	m	struct:x86_thread_t
lsq_occupancy	x86-timing.h	/^	long long lsq_occupancy;$/;"	m	struct:x86_core_t
lsq_occupancy	x86-timing.h	/^	long long lsq_occupancy;$/;"	m	struct:x86_thread_t
lsq_reads	x86-timing.h	/^	long long lsq_reads;$/;"	m	struct:x86_core_t
lsq_reads	x86-timing.h	/^	long long lsq_reads;$/;"	m	struct:x86_thread_t
lsq_wakeup_accesses	x86-timing.h	/^	long long lsq_wakeup_accesses;$/;"	m	struct:x86_core_t
lsq_wakeup_accesses	x86-timing.h	/^	long long lsq_wakeup_accesses;$/;"	m	struct:x86_thread_t
lsq_writes	x86-timing.h	/^	long long lsq_writes;$/;"	m	struct:x86_core_t
lsq_writes	x86-timing.h	/^	long long lsq_writes;$/;"	m	struct:x86_thread_t
magic	x86-timing.h	/^	long long magic;  \/* Magic number for debugging *\/$/;"	m	struct:x86_uop_t
mispred	x86-timing.h	/^	long long mispred;$/;"	m	struct:x86_core_t
mispred	x86-timing.h	/^	long long mispred;$/;"	m	struct:x86_cpu_t
mispred	x86-timing.h	/^	long long mispred;$/;"	m	struct:x86_thread_t
mop_array	x86-timing.h	/^	unsigned int mop_array[0];$/;"	m	struct:x86_trace_cache_entry_t
mop_count	x86-timing.h	/^	int mop_count;  \/* Number of uops within macroinstruction *\/$/;"	m	struct:x86_uop_t
mop_count	x86-timing.h	/^	int uop_count, mop_count;$/;"	m	struct:x86_trace_cache_entry_t
mop_id	x86-timing.h	/^	long long mop_id;  \/* Sequence number of macroinstruction *\/$/;"	m	struct:x86_uop_t
mop_index	x86-timing.h	/^	int mop_index;  \/* Index of uop within macroinstruction *\/$/;"	m	struct:x86_uop_t
mop_name	x86-timing.h	/^	char mop_name[40];$/;"	m	struct:x86_uop_t
mop_size	x86-timing.h	/^	int mop_size;  \/* Corresponding macroinstruction size *\/$/;"	m	struct:x86_uop_t
name	bpred.c	/^	char *name;$/;"	m	struct:x86_bpred_t	file:
name	x86-timing.h	/^	char *name;$/;"	m	struct:x86_fu_res_t
name	x86-timing.h	/^	char name[20];$/;"	m	struct:x86_trace_cache_t
name	x86-timing.h	/^	char name[40];$/;"	m	struct:x86_uop_t
neip	x86-timing.h	/^	unsigned int neip;  \/* Address of next non-speculative x86 macro-instruction *\/$/;"	m	struct:x86_uop_t
odep_count	x86-timing.h	/^	int odep_count;$/;"	m	struct:x86_uop_t
oplat	x86-timing.h	/^	int oplat;$/;"	m	struct:x86_fu_res_t
pending	x86-timing.h	/^	int pending;  \/* not completed (bit) *\/$/;"	m	struct:x86_phreg_t
ph_fp_idep_count	x86-timing.h	/^	int ph_int_idep_count, ph_fp_idep_count;$/;"	m	struct:x86_uop_t
ph_fp_odep_count	x86-timing.h	/^	int ph_int_odep_count, ph_fp_odep_count;$/;"	m	struct:x86_uop_t
ph_idep	x86-timing.h	/^	int ph_idep[X86_UINST_MAX_IDEPS];$/;"	m	struct:x86_uop_t
ph_int_idep_count	x86-timing.h	/^	int ph_int_idep_count, ph_fp_idep_count;$/;"	m	struct:x86_uop_t
ph_int_odep_count	x86-timing.h	/^	int ph_int_odep_count, ph_fp_odep_count;$/;"	m	struct:x86_uop_t
ph_odep	x86-timing.h	/^	int ph_odep[X86_UINST_MAX_ODEPS];$/;"	m	struct:x86_uop_t
ph_oodep	x86-timing.h	/^	int ph_oodep[X86_UINST_MAX_ODEPS];$/;"	m	struct:x86_uop_t
phy_addr	x86-timing.h	/^	unsigned int phy_addr;  \/* ... corresponding to 'uop->uinst->address' *\/$/;"	m	struct:x86_uop_t
pq	x86-timing.h	/^	struct linked_list_t *pq; \/* prefetch queue *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::linked_list_t
pred	x86-timing.h	/^	int pred;  \/* Global prediction (0=not taken, 1=taken) *\/$/;"	m	struct:x86_uop_t
pred_neip	x86-timing.h	/^	unsigned int pred_neip; \/* Address of next predicted x86 macro-instruction (for branches) *\/$/;"	m	struct:x86_uop_t
prefetch	x86-timing.h	/^	int prefetch;$/;"	m	struct:x86_uop_t
ras	bpred.c	/^	unsigned int *ras;$/;"	m	struct:x86_bpred_t	file:
ras_index	bpred.c	/^	int ras_index;$/;"	m	struct:x86_bpred_t	file:
rat_fp_reads	x86-timing.h	/^	long long rat_fp_reads;$/;"	m	struct:x86_thread_t
rat_fp_writes	x86-timing.h	/^	long long rat_fp_writes;$/;"	m	struct:x86_thread_t
rat_int_reads	x86-timing.h	/^	long long rat_int_reads;$/;"	m	struct:x86_thread_t
rat_int_writes	x86-timing.h	/^	long long rat_int_writes;$/;"	m	struct:x86_thread_t
ready	x86-timing.h	/^	int ready;$/;"	m	struct:x86_uop_t
reg_file	x86-timing.h	/^	struct x86_reg_file_t *reg_file;  \/* physical register file *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::x86_reg_file_t
reg_file_fp_count	x86-timing.h	/^	int reg_file_fp_count;$/;"	m	struct:x86_core_t
reg_file_fp_count	x86-timing.h	/^	int reg_file_fp_count;$/;"	m	struct:x86_thread_t
reg_file_fp_full	x86-timing.h	/^	long long reg_file_fp_full;$/;"	m	struct:x86_core_t
reg_file_fp_full	x86-timing.h	/^	long long reg_file_fp_full;$/;"	m	struct:x86_thread_t
reg_file_fp_occupancy	x86-timing.h	/^	long long reg_file_fp_occupancy;$/;"	m	struct:x86_core_t
reg_file_fp_occupancy	x86-timing.h	/^	long long reg_file_fp_occupancy;$/;"	m	struct:x86_thread_t
reg_file_fp_reads	x86-timing.h	/^	long long reg_file_fp_reads;$/;"	m	struct:x86_core_t
reg_file_fp_reads	x86-timing.h	/^	long long reg_file_fp_reads;$/;"	m	struct:x86_thread_t
reg_file_fp_writes	x86-timing.h	/^	long long reg_file_fp_writes;$/;"	m	struct:x86_core_t
reg_file_fp_writes	x86-timing.h	/^	long long reg_file_fp_writes;$/;"	m	struct:x86_thread_t
reg_file_int_count	x86-timing.h	/^	int reg_file_int_count;$/;"	m	struct:x86_core_t
reg_file_int_count	x86-timing.h	/^	int reg_file_int_count;$/;"	m	struct:x86_thread_t
reg_file_int_full	x86-timing.h	/^	long long reg_file_int_full;$/;"	m	struct:x86_core_t
reg_file_int_full	x86-timing.h	/^	long long reg_file_int_full;$/;"	m	struct:x86_thread_t
reg_file_int_occupancy	x86-timing.h	/^	long long reg_file_int_occupancy;$/;"	m	struct:x86_core_t
reg_file_int_occupancy	x86-timing.h	/^	long long reg_file_int_occupancy;$/;"	m	struct:x86_thread_t
reg_file_int_reads	x86-timing.h	/^	long long reg_file_int_reads;$/;"	m	struct:x86_core_t
reg_file_int_reads	x86-timing.h	/^	long long reg_file_int_reads;$/;"	m	struct:x86_thread_t
reg_file_int_writes	x86-timing.h	/^	long long reg_file_int_writes;$/;"	m	struct:x86_core_t
reg_file_int_writes	x86-timing.h	/^	long long reg_file_int_writes;$/;"	m	struct:x86_thread_t
rob	x86-timing.h	/^	struct list_t *rob;$/;"	m	struct:x86_core_t	typeref:struct:x86_core_t::list_t
rob_count	x86-timing.h	/^	int rob_count;$/;"	m	struct:x86_core_t
rob_count	x86-timing.h	/^	int rob_count;$/;"	m	struct:x86_thread_t
rob_full	x86-timing.h	/^	long long rob_full;$/;"	m	struct:x86_core_t
rob_full	x86-timing.h	/^	long long rob_full;$/;"	m	struct:x86_thread_t
rob_head	x86-timing.h	/^	int rob_head;$/;"	m	struct:x86_core_t
rob_head	x86-timing.h	/^	int rob_head;$/;"	m	struct:x86_thread_t
rob_left_bound	x86-timing.h	/^	int rob_left_bound;$/;"	m	struct:x86_thread_t
rob_occupancy	x86-timing.h	/^	long long rob_occupancy;$/;"	m	struct:x86_core_t
rob_occupancy	x86-timing.h	/^	long long rob_occupancy;$/;"	m	struct:x86_thread_t
rob_reads	x86-timing.h	/^	long long rob_reads;$/;"	m	struct:x86_core_t
rob_reads	x86-timing.h	/^	long long rob_reads;$/;"	m	struct:x86_thread_t
rob_right_bound	x86-timing.h	/^	int rob_right_bound;$/;"	m	struct:x86_thread_t
rob_tail	x86-timing.h	/^	int rob_tail;$/;"	m	struct:x86_core_t
rob_tail	x86-timing.h	/^	int rob_tail;$/;"	m	struct:x86_thread_t
rob_writes	x86-timing.h	/^	long long rob_writes;$/;"	m	struct:x86_core_t
rob_writes	x86-timing.h	/^	long long rob_writes;$/;"	m	struct:x86_thread_t
sigusr_received	cpu.c	/^static int sigusr_received;$/;"	v	file:
source	bpred.c	/^	uint32_t source;  \/* eip *\/$/;"	m	struct:btb_entry_t	file:
specmode	x86-timing.h	/^	int specmode;$/;"	m	struct:x86_uop_t
sq	x86-timing.h	/^	struct linked_list_t *sq;$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::linked_list_t
squashed	x86-timing.h	/^	long long squashed;$/;"	m	struct:x86_core_t
squashed	x86-timing.h	/^	long long squashed;$/;"	m	struct:x86_cpu_t
squashed	x86-timing.h	/^	long long squashed;$/;"	m	struct:x86_thread_t
squashed	x86-timing.h	/^	long long squashed;$/;"	m	struct:x86_trace_cache_t
stage	x86-timing.h	/^	char *stage;  \/* Name of currently simulated stage *\/$/;"	m	struct:x86_cpu_t
tag	x86-timing.h	/^	unsigned int tag;$/;"	m	struct:x86_trace_cache_entry_t
target	bpred.c	/^	uint32_t target;  \/* neip *\/$/;"	m	struct:btb_entry_t	file:
target	x86-timing.h	/^	unsigned int target;$/;"	m	struct:x86_trace_cache_entry_t
target_neip	x86-timing.h	/^	unsigned int target_neip;  \/* Address of target x86 macro-instruction assuming branch taken (for branches) *\/$/;"	m	struct:x86_uop_t
temp	x86-timing.h	/^	struct x86_trace_cache_entry_t *temp;  \/* Temporary trace *\/$/;"	m	struct:x86_trace_cache_t	typeref:struct:x86_trace_cache_t::x86_trace_cache_entry_t
thread	x86-timing.h	/^	int thread;$/;"	m	struct:x86_uop_t
thread	x86-timing.h	/^	struct x86_thread_t *thread;$/;"	m	struct:x86_core_t	typeref:struct:x86_core_t::x86_thread_t
time	x86-timing.h	/^	double time;$/;"	m	struct:x86_cpu_t
trace_cache	x86-timing.h	/^	struct x86_trace_cache_t *trace_cache;  \/* trace cache *\/$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::x86_trace_cache_t
trace_cache_queue_occ	x86-timing.h	/^	int trace_cache_queue_occ;  \/* Number of uops occupied in the trace cache queue *\/$/;"	m	struct:x86_thread_t
trace_length_acc	x86-timing.h	/^	long long trace_length_acc;$/;"	m	struct:x86_trace_cache_t
trace_length_count	x86-timing.h	/^	long long trace_length_count;$/;"	m	struct:x86_trace_cache_t
twolevel_bht	bpred.c	/^	unsigned int *twolevel_bht;  \/* array of level1_size branch history registers *\/$/;"	m	struct:x86_bpred_t	file:
twolevel_bht_index	x86-timing.h	/^	int twolevel_bht_index, twolevel_pht_row, twolevel_pht_col, twolevel_pred;$/;"	m	struct:x86_uop_t
twolevel_pht	bpred.c	/^	char *twolevel_pht;  \/* array of level2_size*2^hist_size 2-bit counters *\/$/;"	m	struct:x86_bpred_t	file:
twolevel_pht_col	x86-timing.h	/^	int twolevel_bht_index, twolevel_pht_row, twolevel_pht_col, twolevel_pred;$/;"	m	struct:x86_uop_t
twolevel_pht_row	x86-timing.h	/^	int twolevel_bht_index, twolevel_pht_row, twolevel_pht_col, twolevel_pred;$/;"	m	struct:x86_uop_t
twolevel_pred	x86-timing.h	/^	int twolevel_bht_index, twolevel_pht_row, twolevel_pht_col, twolevel_pred;$/;"	m	struct:x86_uop_t
uinst	x86-timing.h	/^	struct x86_uinst_t *uinst;$/;"	m	struct:x86_uop_t	typeref:struct:x86_uop_t::x86_uinst_t
uop_count	x86-timing.h	/^	int uop_count, mop_count;$/;"	m	struct:x86_trace_cache_entry_t
uop_id_counter	x86-timing.h	/^	long long uop_id_counter;  \/* Counter for uop ID assignment *\/$/;"	m	struct:x86_core_t
uop_id_counter	x86-timing.h	/^	long long uop_id_counter;  \/* Counter of uop ID assignment *\/$/;"	m	struct:x86_cpu_t
uop_queue	x86-timing.h	/^	struct list_t *uop_queue;$/;"	m	struct:x86_thread_t	typeref:struct:x86_thread_t::list_t
uop_trace_list	x86-timing.h	/^	struct linked_list_t *uop_trace_list;$/;"	m	struct:x86_cpu_t	typeref:struct:x86_cpu_t::linked_list_t
waiting_time	x86-timing.h	/^	long long waiting_time[x86_fu_count];$/;"	m	struct:x86_fu_t
when	x86-timing.h	/^	long long when;  \/* cycle when ready *\/$/;"	m	struct:x86_uop_t
x86_bpred_bimod_size	bpred.c	/^int x86_bpred_bimod_size;  \/* Number of entries for bimodal predictor *\/$/;"	v
x86_bpred_btb_assoc	bpred.c	/^int x86_bpred_btb_assoc;  \/* Number of BTB ways *\/$/;"	v
x86_bpred_btb_lookup	bpred.c	/^unsigned int x86_bpred_btb_lookup(struct x86_bpred_t *bpred, struct x86_uop_t *uop)$/;"	f
x86_bpred_btb_next_branch	bpred.c	/^unsigned int x86_bpred_btb_next_branch(struct x86_bpred_t *bpred, uint32_t eip, uint32_t bsize)$/;"	f
x86_bpred_btb_sets	bpred.c	/^int x86_bpred_btb_sets;  \/* Number of BTB sets *\/$/;"	v
x86_bpred_btb_update	bpred.c	/^void x86_bpred_btb_update(struct x86_bpred_t *bpred, struct x86_uop_t *uop)$/;"	f
x86_bpred_choice_size	bpred.c	/^int x86_bpred_choice_size;  \/* Number of entries for choice predictor *\/$/;"	v
x86_bpred_create	bpred.c	/^struct x86_bpred_t *x86_bpred_create(char *name)$/;"	f
x86_bpred_done	bpred.c	/^void x86_bpred_done()$/;"	f
x86_bpred_free	bpred.c	/^void x86_bpred_free(struct x86_bpred_t *bpred)$/;"	f
x86_bpred_init	bpred.c	/^void x86_bpred_init()$/;"	f
x86_bpred_kind	bpred.c	/^enum x86_bpred_kind_t x86_bpred_kind;$/;"	v	typeref:enum:x86_bpred_kind_t
x86_bpred_kind_bimod	x86-timing.h	/^	x86_bpred_kind_bimod,$/;"	e	enum:x86_bpred_kind_t
x86_bpred_kind_comb	x86-timing.h	/^	x86_bpred_kind_comb$/;"	e	enum:x86_bpred_kind_t
x86_bpred_kind_map	bpred.c	/^char *x86_bpred_kind_map[] = { "Perfect", "Taken", "NotTaken", "Bimodal", "TwoLevel", "Combined" };$/;"	v
x86_bpred_kind_nottaken	x86-timing.h	/^	x86_bpred_kind_nottaken,$/;"	e	enum:x86_bpred_kind_t
x86_bpred_kind_perfect	x86-timing.h	/^	x86_bpred_kind_perfect = 0,$/;"	e	enum:x86_bpred_kind_t
x86_bpred_kind_t	x86-timing.h	/^extern enum x86_bpred_kind_t$/;"	g
x86_bpred_kind_taken	x86-timing.h	/^	x86_bpred_kind_taken,$/;"	e	enum:x86_bpred_kind_t
x86_bpred_kind_twolevel	x86-timing.h	/^	x86_bpred_kind_twolevel,$/;"	e	enum:x86_bpred_kind_t
x86_bpred_lookup	bpred.c	/^int x86_bpred_lookup(struct x86_bpred_t *bpred, struct x86_uop_t *uop)$/;"	f
x86_bpred_lookup_multiple	bpred.c	/^int x86_bpred_lookup_multiple(struct x86_bpred_t *bpred, uint32_t eip, int count)$/;"	f
x86_bpred_ras_size	bpred.c	/^int x86_bpred_ras_size;  \/* Return address stack size *\/$/;"	v
x86_bpred_t	bpred.c	/^struct x86_bpred_t$/;"	s	file:
x86_bpred_twolevel_hist_size	bpred.c	/^int x86_bpred_twolevel_hist_size;  \/* Two-level adaptive predictor: level-2 history size *\/$/;"	v
x86_bpred_twolevel_l1size	bpred.c	/^int x86_bpred_twolevel_l1size;  \/* Two-level adaptive predictor: level-1 size *\/$/;"	v
x86_bpred_twolevel_l2height	bpred.c	/^static int x86_bpred_twolevel_l2height;$/;"	v	file:
x86_bpred_twolevel_l2size	bpred.c	/^int x86_bpred_twolevel_l2size;  \/* Two-level adaptive predictor: level-2 size *\/$/;"	v
x86_bpred_update	bpred.c	/^void x86_bpred_update(struct x86_bpred_t *bpred, struct x86_uop_t *uop)$/;"	f
x86_core_t	x86-timing.h	/^struct x86_core_t$/;"	s
x86_cpu	cpu.c	/^struct x86_cpu_t *x86_cpu;$/;"	v	typeref:struct:x86_cpu_t
x86_cpu_can_commit_thread	stg-commit.c	/^static int x86_cpu_can_commit_thread(int core, int thread)$/;"	f	file:
x86_cpu_can_dispatch_thread	stg-dispatch.c	/^static enum x86_dispatch_stall_t x86_cpu_can_dispatch_thread(int core, int thread)$/;"	f	file:
x86_cpu_can_fetch	stg-fetch.c	/^static int x86_cpu_can_fetch(int core, int thread)$/;"	f	file:
x86_cpu_commit	stg-commit.c	/^void x86_cpu_commit()$/;"	f
x86_cpu_commit_core	stg-commit.c	/^static void x86_cpu_commit_core(int core)$/;"	f	file:
x86_cpu_commit_kind	cpu.c	/^enum x86_cpu_commit_kind_t x86_cpu_commit_kind;$/;"	v	typeref:enum:x86_cpu_commit_kind_t
x86_cpu_commit_kind_map	cpu.c	/^char *x86_cpu_commit_kind_map[] = { "Shared", "TimeSlice" };$/;"	v
x86_cpu_commit_kind_shared	x86-timing.h	/^	x86_cpu_commit_kind_shared = 0,$/;"	e	enum:x86_cpu_commit_kind_t
x86_cpu_commit_kind_t	x86-timing.h	/^extern enum x86_cpu_commit_kind_t$/;"	g
x86_cpu_commit_kind_timeslice	x86-timing.h	/^	x86_cpu_commit_kind_timeslice$/;"	e	enum:x86_cpu_commit_kind_t
x86_cpu_commit_thread	stg-commit.c	/^static void x86_cpu_commit_thread(int core, int thread, int quant)$/;"	f	file:
x86_cpu_commit_width	cpu.c	/^int x86_cpu_commit_width;$/;"	v
x86_cpu_config_check	cpu.c	/^static void x86_cpu_config_check(void)$/;"	f	file:
x86_cpu_config_dump	cpu.c	/^static void x86_cpu_config_dump(FILE *f)$/;"	f	file:
x86_cpu_config_file_name	cpu.c	/^char *x86_cpu_config_file_name = "";$/;"	v
x86_cpu_config_help	cpu.c	/^char *x86_cpu_config_help =$/;"	v
x86_cpu_context_quantum	cpu.c	/^int x86_cpu_context_quantum;$/;"	v
x86_cpu_context_switch	cpu.c	/^int x86_cpu_context_switch;$/;"	v
x86_cpu_context_to_cpu	sched.c	/^static int x86_cpu_context_to_cpu(struct x86_ctx_t *ctx)$/;"	f	file:
x86_cpu_core_init	cpu.c	/^static void x86_cpu_core_init(int core)$/;"	f	file:
x86_cpu_decode	stg-decode.c	/^void x86_cpu_decode()$/;"	f
x86_cpu_decode_core	stg-decode.c	/^static void x86_cpu_decode_core(int core)$/;"	f	file:
x86_cpu_decode_thread	stg-decode.c	/^static void x86_cpu_decode_thread(int core, int thread)$/;"	f	file:
x86_cpu_decode_width	cpu.c	/^int x86_cpu_decode_width;$/;"	v
x86_cpu_dispatch	stg-dispatch.c	/^void x86_cpu_dispatch()$/;"	f
x86_cpu_dispatch_core	stg-dispatch.c	/^static void x86_cpu_dispatch_core(int core)$/;"	f	file:
x86_cpu_dispatch_kind	cpu.c	/^enum x86_cpu_dispatch_kind_t x86_cpu_dispatch_kind;$/;"	v	typeref:enum:x86_cpu_dispatch_kind_t
x86_cpu_dispatch_kind_map	cpu.c	/^char *x86_cpu_dispatch_kind_map[] = { "Shared", "TimeSlice" };$/;"	v
x86_cpu_dispatch_kind_shared	x86-timing.h	/^	x86_cpu_dispatch_kind_shared = 0,$/;"	e	enum:x86_cpu_dispatch_kind_t
x86_cpu_dispatch_kind_t	x86-timing.h	/^extern enum x86_cpu_dispatch_kind_t$/;"	g
x86_cpu_dispatch_kind_timeslice	x86-timing.h	/^	x86_cpu_dispatch_kind_timeslice,$/;"	e	enum:x86_cpu_dispatch_kind_t
x86_cpu_dispatch_thread	stg-dispatch.c	/^static int x86_cpu_dispatch_thread(int core, int thread, int quant)$/;"	f	file:
x86_cpu_dispatch_width	cpu.c	/^int x86_cpu_dispatch_width;$/;"	v
x86_cpu_done	cpu.c	/^void x86_cpu_done()$/;"	f
x86_cpu_dump	cpu.c	/^void x86_cpu_dump(FILE *f)$/;"	f
x86_cpu_dump_log	cpu.c	/^static void x86_cpu_dump_log()$/;"	f	file:
x86_cpu_dump_report	cpu.c	/^static void x86_cpu_dump_report()$/;"	f	file:
x86_cpu_dump_uop_report	cpu.c	/^static void x86_cpu_dump_uop_report(FILE *f, long long *uop_stats, char *prefix, int peak_ipc)$/;"	f	file:
x86_cpu_dynamic_schedule	sched.c	/^void x86_cpu_dynamic_schedule()$/;"	f
x86_cpu_error_debug	x86-timing.h	39;"	d
x86_cpu_fast_forward	cpu.c	/^static void x86_cpu_fast_forward(long long max_inst)$/;"	f	file:
x86_cpu_fast_forward_count	cpu.c	/^long long x86_cpu_fast_forward_count;$/;"	v
x86_cpu_fetch	stg-fetch.c	/^void x86_cpu_fetch()$/;"	f
x86_cpu_fetch_core	stg-fetch.c	/^static void x86_cpu_fetch_core(int core)$/;"	f	file:
x86_cpu_fetch_inst	stg-fetch.c	/^static struct x86_uop_t *x86_cpu_fetch_inst(int core, int thread, int fetch_trace_cache)$/;"	f	file:
x86_cpu_fetch_kind	cpu.c	/^enum x86_cpu_fetch_kind_t x86_cpu_fetch_kind;$/;"	v	typeref:enum:x86_cpu_fetch_kind_t
x86_cpu_fetch_kind_map	cpu.c	/^char *x86_cpu_fetch_kind_map[] = { "Shared", "TimeSlice", "SwitchOnEvent" };$/;"	v
x86_cpu_fetch_kind_shared	x86-timing.h	/^	x86_cpu_fetch_kind_shared = 0,$/;"	e	enum:x86_cpu_fetch_kind_t
x86_cpu_fetch_kind_switchonevent	x86-timing.h	/^	x86_cpu_fetch_kind_switchonevent$/;"	e	enum:x86_cpu_fetch_kind_t
x86_cpu_fetch_kind_t	x86-timing.h	/^extern enum x86_cpu_fetch_kind_t$/;"	g
x86_cpu_fetch_kind_timeslice	x86-timing.h	/^	x86_cpu_fetch_kind_timeslice,$/;"	e	enum:x86_cpu_fetch_kind_t
x86_cpu_fetch_thread	stg-fetch.c	/^static void x86_cpu_fetch_thread(int core, int thread)$/;"	f	file:
x86_cpu_fetch_thread_trace_cache	stg-fetch.c	/^static int x86_cpu_fetch_thread_trace_cache(int core, int thread)$/;"	f	file:
x86_cpu_init	cpu.c	/^void x86_cpu_init()$/;"	f
x86_cpu_issue	stg-issue.c	/^void x86_cpu_issue()$/;"	f
x86_cpu_issue_core	stg-issue.c	/^static void x86_cpu_issue_core(int core)$/;"	f	file:
x86_cpu_issue_iq	stg-issue.c	/^static int x86_cpu_issue_iq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_kind	cpu.c	/^enum x86_cpu_issue_kind_t x86_cpu_issue_kind;$/;"	v	typeref:enum:x86_cpu_issue_kind_t
x86_cpu_issue_kind_map	cpu.c	/^char *x86_cpu_issue_kind_map[] = { "Shared", "TimeSlice" };$/;"	v
x86_cpu_issue_kind_shared	x86-timing.h	/^	x86_cpu_issue_kind_shared = 0,$/;"	e	enum:x86_cpu_issue_kind_t
x86_cpu_issue_kind_t	x86-timing.h	/^extern enum x86_cpu_issue_kind_t$/;"	g
x86_cpu_issue_kind_timeslice	x86-timing.h	/^	x86_cpu_issue_kind_timeslice,$/;"	e	enum:x86_cpu_issue_kind_t
x86_cpu_issue_lq	stg-issue.c	/^static int x86_cpu_issue_lq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_pq	stg-issue.c	/^static int x86_cpu_issue_pq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_sq	stg-issue.c	/^static int x86_cpu_issue_sq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_thread_iq	stg-issue.c	/^static int x86_cpu_issue_thread_iq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_thread_lsq	stg-issue.c	/^static int x86_cpu_issue_thread_lsq(int core, int thread, int quant)$/;"	f	file:
x86_cpu_issue_width	cpu.c	/^int x86_cpu_issue_width;$/;"	v
x86_cpu_load_progs	cpu.c	/^void x86_cpu_load_progs(int argc, char **argv, char *ctxfile)$/;"	f
x86_cpu_map_context	sched.c	/^void x86_cpu_map_context(int core, int thread, struct x86_ctx_t *ctx)$/;"	f
x86_cpu_num_cores	cpu.c	/^int x86_cpu_num_cores = 1;$/;"	v
x86_cpu_num_threads	cpu.c	/^int x86_cpu_num_threads = 1;$/;"	v
x86_cpu_occupancy_stats	cpu.c	/^int x86_cpu_occupancy_stats;$/;"	v
x86_cpu_pipeline_empty	sched.c	/^int x86_cpu_pipeline_empty(int core, int thread)$/;"	f
x86_cpu_recover	recover.c	/^void x86_cpu_recover(int core, int thread)$/;"	f
x86_cpu_recover_kind	cpu.c	/^enum x86_cpu_recover_kind_t x86_cpu_recover_kind;$/;"	v	typeref:enum:x86_cpu_recover_kind_t
x86_cpu_recover_kind_commit	x86-timing.h	/^	x86_cpu_recover_kind_commit$/;"	e	enum:x86_cpu_recover_kind_t
x86_cpu_recover_kind_map	cpu.c	/^char *x86_cpu_recover_kind_map[] = { "Writeback", "Commit" };$/;"	v
x86_cpu_recover_kind_t	x86-timing.h	/^extern enum x86_cpu_recover_kind_t$/;"	g
x86_cpu_recover_kind_writeback	x86-timing.h	/^	x86_cpu_recover_kind_writeback = 0,$/;"	e	enum:x86_cpu_recover_kind_t
x86_cpu_recover_penalty	cpu.c	/^int x86_cpu_recover_penalty;$/;"	v
x86_cpu_report_file_name	cpu.c	/^char *x86_cpu_report_file_name = "";$/;"	v
x86_cpu_run	cpu.c	/^void x86_cpu_run()$/;"	f
x86_cpu_run_stages	cpu.c	/^void x86_cpu_run_stages()$/;"	f
x86_cpu_signal_handler	cpu.c	/^static void x86_cpu_signal_handler(int signum)$/;"	f	file:
x86_cpu_static_schedule	sched.c	/^void x86_cpu_static_schedule()$/;"	f
x86_cpu_t	x86-timing.h	/^struct x86_cpu_t$/;"	s
x86_cpu_thread_init	cpu.c	/^static void x86_cpu_thread_init(int core, int thread)$/;"	f	file:
x86_cpu_thread_quantum	cpu.c	/^int x86_cpu_thread_quantum;$/;"	v
x86_cpu_thread_switch_penalty	cpu.c	/^int x86_cpu_thread_switch_penalty;$/;"	v
x86_cpu_unmap_context	sched.c	/^void x86_cpu_unmap_context(int core, int thread)$/;"	f
x86_cpu_unmap_context_signal	sched.c	/^void x86_cpu_unmap_context_signal(struct x86_ctx_t *ctx)$/;"	f
x86_cpu_uop_trace_list_add	cpu.c	/^void x86_cpu_uop_trace_list_add(struct x86_uop_t *uop)$/;"	f
x86_cpu_uop_trace_list_empty	cpu.c	/^void x86_cpu_uop_trace_list_empty(void)$/;"	f
x86_cpu_update_occupancy_stats	cpu.c	/^void x86_cpu_update_occupancy_stats()$/;"	f
x86_cpu_writeback	stg-writeback.c	/^void x86_cpu_writeback()$/;"	f
x86_cpu_writeback_core	stg-writeback.c	/^static void x86_cpu_writeback_core(int core)$/;"	f	file:
x86_dispatch_stall_ctx	x86-timing.h	/^	x86_dispatch_stall_ctx,  \/* No running ctx *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_iq	x86-timing.h	/^	x86_dispatch_stall_iq,  \/* No space in the iq *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_lsq	x86-timing.h	/^	x86_dispatch_stall_lsq,  \/* No space in the lsq *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_max	x86-timing.h	/^	x86_dispatch_stall_max$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_rename	x86-timing.h	/^	x86_dispatch_stall_rename,  \/* No free physical register *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_rob	x86-timing.h	/^	x86_dispatch_stall_rob,  \/* No space in the rob *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_spec	x86-timing.h	/^	x86_dispatch_stall_spec,  \/* Used with a speculative inst. *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_t	x86-timing.h	/^enum x86_dispatch_stall_t$/;"	g
x86_dispatch_stall_uop_queue	x86-timing.h	/^	x86_dispatch_stall_uop_queue,  \/* No instruction in the uop queue *\/$/;"	e	enum:x86_dispatch_stall_t
x86_dispatch_stall_used	x86-timing.h	/^	x86_dispatch_stall_used = 0,  \/* Dispatch slot was used with a finally committed inst. *\/$/;"	e	enum:x86_dispatch_stall_t
x86_event_queue_cache_miss	queues.c	/^int x86_event_queue_cache_miss(int core, int thread)$/;"	f
x86_event_queue_done	queues.c	/^void x86_event_queue_done()$/;"	f
x86_event_queue_extract	queues.c	/^struct x86_uop_t *x86_event_queue_extract(struct linked_list_t *event_queue)$/;"	f
x86_event_queue_init	queues.c	/^void x86_event_queue_init()$/;"	f
x86_event_queue_insert	queues.c	/^void x86_event_queue_insert(struct linked_list_t *event_queue, struct x86_uop_t *uop)$/;"	f
x86_event_queue_long_latency	queues.c	/^int x86_event_queue_long_latency(int core, int thread)$/;"	f
x86_event_queue_recover	queues.c	/^void x86_event_queue_recover(int core, int thread)$/;"	f
x86_fetch_queue_done	queues.c	/^void x86_fetch_queue_done()$/;"	f
x86_fetch_queue_init	queues.c	/^void x86_fetch_queue_init()$/;"	f
x86_fetch_queue_recover	queues.c	/^void x86_fetch_queue_recover(int core, int thread)$/;"	f
x86_fetch_queue_remove	queues.c	/^struct x86_uop_t *x86_fetch_queue_remove(int core, int thread, int index)$/;"	f
x86_fetch_queue_size	queues.c	/^int x86_fetch_queue_size;$/;"	v
x86_fu_class_t	x86-timing.h	/^enum x86_fu_class_t$/;"	g
x86_fu_count	x86-timing.h	/^	x86_fu_count$/;"	e	enum:x86_fu_class_t
x86_fu_done	fu.c	/^void x86_fu_done()$/;"	f
x86_fu_effaddr	x86-timing.h	/^	x86_fu_effaddr,$/;"	e	enum:x86_fu_class_t
x86_fu_fpadd	x86-timing.h	/^	x86_fu_fpadd,$/;"	e	enum:x86_fu_class_t
x86_fu_fpcomplex	x86-timing.h	/^	x86_fu_fpcomplex,$/;"	e	enum:x86_fu_class_t
x86_fu_fpdiv	x86-timing.h	/^	x86_fu_fpdiv,$/;"	e	enum:x86_fu_class_t
x86_fu_fpmult	x86-timing.h	/^	x86_fu_fpmult,$/;"	e	enum:x86_fu_class_t
x86_fu_fpsimple	x86-timing.h	/^	x86_fu_fpsimple,$/;"	e	enum:x86_fu_class_t
x86_fu_init	fu.c	/^void x86_fu_init()$/;"	f
x86_fu_intadd	x86-timing.h	/^	x86_fu_intadd,$/;"	e	enum:x86_fu_class_t
x86_fu_intdiv	x86-timing.h	/^	x86_fu_intdiv,$/;"	e	enum:x86_fu_class_t
x86_fu_intmult	x86-timing.h	/^	x86_fu_intmult,$/;"	e	enum:x86_fu_class_t
x86_fu_logic	x86-timing.h	/^	x86_fu_logic,$/;"	e	enum:x86_fu_class_t
x86_fu_none	x86-timing.h	/^	x86_fu_none = 0,$/;"	e	enum:x86_fu_class_t
x86_fu_release	fu.c	/^void x86_fu_release(int core)$/;"	f
x86_fu_res_pool	fu.c	/^struct x86_fu_res_t x86_fu_res_pool[x86_fu_count];$/;"	v	typeref:struct:x86_fu_res_t
x86_fu_res_t	x86-timing.h	/^struct x86_fu_res_t$/;"	s
x86_fu_reserve	fu.c	/^int x86_fu_reserve(struct x86_uop_t *uop)$/;"	f
x86_fu_t	x86-timing.h	/^struct x86_fu_t$/;"	s
x86_iq_can_insert	queues.c	/^int x86_iq_can_insert(struct x86_uop_t *uop)$/;"	f
x86_iq_done	queues.c	/^void x86_iq_done()$/;"	f
x86_iq_init	queues.c	/^void x86_iq_init()$/;"	f
x86_iq_insert	queues.c	/^void x86_iq_insert(struct x86_uop_t *uop)$/;"	f
x86_iq_kind	queues.c	/^enum x86_iq_kind_t x86_iq_kind;$/;"	v	typeref:enum:x86_iq_kind_t
x86_iq_kind_map	queues.c	/^char *x86_iq_kind_map[] = { "Shared", "Private" };$/;"	v
x86_iq_kind_private	x86-timing.h	/^	x86_iq_kind_private$/;"	e	enum:x86_iq_kind_t
x86_iq_kind_shared	x86-timing.h	/^	x86_iq_kind_shared = 0,$/;"	e	enum:x86_iq_kind_t
x86_iq_kind_t	x86-timing.h	/^extern enum x86_iq_kind_t$/;"	g
x86_iq_recover	queues.c	/^void x86_iq_recover(int core, int thread)$/;"	f
x86_iq_remove	queues.c	/^void x86_iq_remove(int core, int thread)$/;"	f
x86_iq_size	queues.c	/^int x86_iq_size;$/;"	v
x86_lq_remove	queues.c	/^void x86_lq_remove(int core, int thread)$/;"	f
x86_lsq_can_insert	queues.c	/^int x86_lsq_can_insert(struct x86_uop_t *uop)$/;"	f
x86_lsq_done	queues.c	/^void x86_lsq_done()$/;"	f
x86_lsq_init	queues.c	/^void x86_lsq_init()$/;"	f
x86_lsq_insert	queues.c	/^void x86_lsq_insert(struct x86_uop_t *uop)$/;"	f
x86_lsq_kind	queues.c	/^enum x86_lsq_kind_t x86_lsq_kind;$/;"	v	typeref:enum:x86_lsq_kind_t
x86_lsq_kind_map	queues.c	/^char *x86_lsq_kind_map[] = { "Shared", "Private" };$/;"	v
x86_lsq_kind_private	x86-timing.h	/^	x86_lsq_kind_private$/;"	e	enum:x86_lsq_kind_t
x86_lsq_kind_shared	x86-timing.h	/^	x86_lsq_kind_shared = 0,$/;"	e	enum:x86_lsq_kind_t
x86_lsq_kind_t	x86-timing.h	/^extern enum x86_lsq_kind_t$/;"	g
x86_lsq_recover	queues.c	/^void x86_lsq_recover(int core, int thread)$/;"	f
x86_lsq_size	queues.c	/^int x86_lsq_size;$/;"	v
x86_phreg_t	x86-timing.h	/^struct x86_phreg_t$/;"	s
x86_pq_insert	queues.c	/^void x86_pq_insert(struct x86_uop_t *uop)$/;"	f
x86_pq_remove	queues.c	/^void x86_pq_remove(int core, int thread)$/;"	f
x86_reg_file_can_rename	reg-file.c	/^int x86_reg_file_can_rename(struct x86_uop_t *uop)$/;"	f
x86_reg_file_check_integrity	reg-file.c	/^void x86_reg_file_check_integrity(int core, int thread)$/;"	f
x86_reg_file_commit	reg-file.c	/^void x86_reg_file_commit(struct x86_uop_t *uop)$/;"	f
x86_reg_file_count_deps	reg-file.c	/^void x86_reg_file_count_deps(struct x86_uop_t *uop)$/;"	f
x86_reg_file_create	reg-file.c	/^struct x86_reg_file_t *x86_reg_file_create(int int_size, int fp_size)$/;"	f
x86_reg_file_done	reg-file.c	/^void x86_reg_file_done(void)$/;"	f
x86_reg_file_dump	reg-file.c	/^void x86_reg_file_dump(int core, int thread, FILE *f)$/;"	f
x86_reg_file_fp_local_size	reg-file.c	/^static int x86_reg_file_fp_local_size;$/;"	v	file:
x86_reg_file_fp_reclaim	reg-file.c	/^static int x86_reg_file_fp_reclaim(int core, int thread)$/;"	f	file:
x86_reg_file_fp_size	reg-file.c	/^int x86_reg_file_fp_size = 40;  \/* Per-thread floating-point register file size *\/$/;"	v
x86_reg_file_free	reg-file.c	/^void x86_reg_file_free(struct x86_reg_file_t *reg_file)$/;"	f
x86_reg_file_init	reg-file.c	/^void x86_reg_file_init(void)$/;"	f
x86_reg_file_init_thread	reg-file.c	/^static void x86_reg_file_init_thread(int core, int thread)$/;"	f	file:
x86_reg_file_int_local_size	reg-file.c	/^static int x86_reg_file_int_local_size;  \/* maximum number of registers allowed per thread *\/$/;"	v	file:
x86_reg_file_int_reclaim	reg-file.c	/^static int x86_reg_file_int_reclaim(int core, int thread)$/;"	f	file:
x86_reg_file_int_size	reg-file.c	/^int x86_reg_file_int_size = 80;  \/* Per-thread integer register file size *\/$/;"	v
x86_reg_file_kind	reg-file.c	/^enum x86_reg_file_kind_t x86_reg_file_kind = x86_reg_file_kind_private;  \/* Sharing policy for register file *\/$/;"	v	typeref:enum:x86_reg_file_kind_t
x86_reg_file_kind_map	reg-file.c	/^char *x86_reg_file_kind_map[] = { "Shared", "Private" };$/;"	v
x86_reg_file_kind_private	x86-timing.h	/^	x86_reg_file_kind_private$/;"	e	enum:x86_reg_file_kind_t
x86_reg_file_kind_shared	x86-timing.h	/^	x86_reg_file_kind_shared = 0,$/;"	e	enum:x86_reg_file_kind_t
x86_reg_file_kind_t	x86-timing.h	/^extern enum x86_reg_file_kind_t$/;"	g
x86_reg_file_ready	reg-file.c	/^int x86_reg_file_ready(struct x86_uop_t *uop)$/;"	f
x86_reg_file_rename	reg-file.c	/^void x86_reg_file_rename(struct x86_uop_t *uop)$/;"	f
x86_reg_file_t	x86-timing.h	/^struct x86_reg_file_t$/;"	s
x86_reg_file_undo	reg-file.c	/^void x86_reg_file_undo(struct x86_uop_t *uop)$/;"	f
x86_reg_file_write	reg-file.c	/^void x86_reg_file_write(struct x86_uop_t *uop)$/;"	f
x86_rob_can_dequeue	rob.c	/^int x86_rob_can_dequeue(int core, int thread)$/;"	f
x86_rob_can_enqueue	rob.c	/^int x86_rob_can_enqueue(struct x86_uop_t *uop)$/;"	f
x86_rob_done	rob.c	/^void x86_rob_done()$/;"	f
x86_rob_dump	rob.c	/^void x86_rob_dump(int core, FILE *f)$/;"	f
x86_rob_enqueue	rob.c	/^void x86_rob_enqueue(struct x86_uop_t *uop)$/;"	f
x86_rob_get	rob.c	/^struct x86_uop_t *x86_rob_get(int core, int thread, int index)$/;"	f
x86_rob_head	rob.c	/^struct x86_uop_t *x86_rob_head(int core, int thread)$/;"	f
x86_rob_init	rob.c	/^void x86_rob_init()$/;"	f
x86_rob_kind	rob.c	/^enum x86_rob_kind_t x86_rob_kind;$/;"	v	typeref:enum:x86_rob_kind_t
x86_rob_kind_map	rob.c	/^char *x86_rob_kind_map[] = { "Private", "Shared" };$/;"	v
x86_rob_kind_private	x86-timing.h	/^	x86_rob_kind_private = 0,$/;"	e	enum:x86_rob_kind_t
x86_rob_kind_shared	x86-timing.h	/^	x86_rob_kind_shared$/;"	e	enum:x86_rob_kind_t
x86_rob_kind_t	x86-timing.h	/^extern enum x86_rob_kind_t$/;"	g
x86_rob_remove_head	rob.c	/^void x86_rob_remove_head(int core, int thread)$/;"	f
x86_rob_remove_tail	rob.c	/^void x86_rob_remove_tail(int core, int thread)$/;"	f
x86_rob_size	rob.c	/^int x86_rob_size;$/;"	v
x86_rob_tail	rob.c	/^struct x86_uop_t *x86_rob_tail(int core, int thread)$/;"	f
x86_rob_total_size	rob.c	/^static int x86_rob_total_size = 0;$/;"	v	file:
x86_rob_trim	rob.c	/^static void x86_rob_trim(int core)$/;"	f	file:
x86_sq_remove	queues.c	/^void x86_sq_remove(int core, int thread)$/;"	f
x86_thread_t	x86-timing.h	/^struct x86_thread_t$/;"	s
x86_trace	x86-timing.h	554;"	d
x86_trace_cache_assoc	trace-cache.c	/^int x86_trace_cache_assoc;  \/* Number of ways *\/$/;"	v
x86_trace_cache_branch_max	trace-cache.c	/^int x86_trace_cache_branch_max;  \/* Maximum number of branches in a trace *\/$/;"	v
x86_trace_cache_create	trace-cache.c	/^struct x86_trace_cache_t *x86_trace_cache_create()$/;"	f
x86_trace_cache_done	trace-cache.c	/^void x86_trace_cache_done()$/;"	f
x86_trace_cache_dump_report	trace-cache.c	/^void x86_trace_cache_dump_report(struct x86_trace_cache_t *trace_cache, FILE *f)$/;"	f
x86_trace_cache_entry_t	x86-timing.h	/^struct x86_trace_cache_entry_t$/;"	s
x86_trace_cache_flush_trace	trace-cache.c	/^static void x86_trace_cache_flush_trace(struct x86_trace_cache_t *trace_cache)$/;"	f	file:
x86_trace_cache_free	trace-cache.c	/^void x86_trace_cache_free(struct x86_trace_cache_t *trace_cache)$/;"	f
x86_trace_cache_init	trace-cache.c	/^void x86_trace_cache_init()$/;"	f
x86_trace_cache_lookup	trace-cache.c	/^int x86_trace_cache_lookup(struct x86_trace_cache_t *trace_cache, uint32_t eip, int pred,$/;"	f
x86_trace_cache_new_uop	trace-cache.c	/^void x86_trace_cache_new_uop(struct x86_trace_cache_t *trace_cache, struct x86_uop_t *uop)$/;"	f
x86_trace_cache_num_sets	trace-cache.c	/^int x86_trace_cache_num_sets;  \/* Number of sets *\/$/;"	v
x86_trace_cache_present	trace-cache.c	/^int x86_trace_cache_present;  \/* Use trace cache *\/$/;"	v
x86_trace_cache_queue_size	trace-cache.c	/^int x86_trace_cache_queue_size;  \/* Fetch queue for pre-decoded uops *\/$/;"	v
x86_trace_cache_t	x86-timing.h	/^struct x86_trace_cache_t$/;"	s
x86_trace_cache_trace_size	trace-cache.c	/^int x86_trace_cache_trace_size;  \/* Maximum number of uops in a trace *\/$/;"	v
x86_trace_category	cpu.c	/^int x86_trace_category;$/;"	v
x86_trace_header	x86-timing.h	555;"	d
x86_tracing	x86-timing.h	553;"	d
x86_uop_create	uop.c	/^struct x86_uop_t *x86_uop_create(void)$/;"	f
x86_uop_exists	uop.c	/^int x86_uop_exists(struct x86_uop_t *uop)$/;"	f
x86_uop_free_if_not_queued	uop.c	/^void x86_uop_free_if_not_queued(struct x86_uop_t *uop)$/;"	f
x86_uop_linked_list_check_if_ready	uop.c	/^void x86_uop_linked_list_check_if_ready(struct linked_list_t *uop_list)$/;"	f
x86_uop_linked_list_dump	uop.c	/^void x86_uop_linked_list_dump(struct linked_list_t *uop_list, FILE *f)$/;"	f
x86_uop_list_dump	uop.c	/^void x86_uop_list_dump(struct list_t *uop_list, FILE *f)$/;"	f
x86_uop_queue_done	queues.c	/^void x86_uop_queue_done()$/;"	f
x86_uop_queue_init	queues.c	/^void x86_uop_queue_init()$/;"	f
x86_uop_queue_recover	queues.c	/^void x86_uop_queue_recover(int core, int thread)$/;"	f
x86_uop_queue_size	queues.c	/^int x86_uop_queue_size;$/;"	v
x86_uop_t	x86-timing.h	/^struct x86_uop_t$/;"	s
