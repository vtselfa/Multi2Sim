!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEFINST	asm.c	86;"	d	file:
DEFINST	asm.c	89;"	d	file:
DEFINST	x86-asm.h	33;"	d
DEFINST	x86-asm.h	35;"	d
IB	asm.c	34;"	d	file:
ID	asm.c	36;"	d	file:
INDEX	asm.c	33;"	d	file:
IW	asm.c	35;"	d	file:
MEM	asm.c	32;"	d	file:
REG	asm.c	31;"	d	file:
SKIP	asm.c	30;"	d	file:
X86_ASM_H	x86-asm.h	21;"	d
addr_size	x86-asm.h	/^	int addr_size;  \/* Address size: 2 or 4, default 4 *\/$/;"	m	struct:x86_inst_t
as_char	x86-asm.h	/^	signed char as_char[16];$/;"	m	union:x86_xmm_reg_t
as_double	x86-asm.h	/^	double as_double[2];$/;"	m	union:x86_xmm_reg_t
as_float	x86-asm.h	/^	float as_float[4];$/;"	m	union:x86_xmm_reg_t
as_int	x86-asm.h	/^	signed int as_int[4];$/;"	m	union:x86_xmm_reg_t
as_int64	x86-asm.h	/^	signed long long as_int64[2];$/;"	m	union:x86_xmm_reg_t
as_uchar	x86-asm.h	/^	unsigned char as_uchar[16];$/;"	m	union:x86_xmm_reg_t
as_uint	x86-asm.h	/^	unsigned int as_uint[4];$/;"	m	union:x86_xmm_reg_t
as_uint64	x86-asm.h	/^	unsigned long long as_uint64[2];$/;"	m	union:x86_xmm_reg_t
b	x86-asm.h	/^		uint8_t b;$/;"	m	union:x86_inst_t::__anon1
d	x86-asm.h	/^		uint32_t d;$/;"	m	union:x86_inst_t::__anon1
disp	x86-asm.h	/^	int32_t disp;$/;"	m	struct:x86_inst_t
disp_size	asm.c	/^	int disp_size;$/;"	m	struct:x86_modrm_table_entry_t	file:
disp_size	x86-asm.h	/^	int disp_size;$/;"	m	struct:x86_inst_t
ea_base	asm.c	/^	enum x86_reg_t ea_base;$/;"	m	struct:x86_modrm_table_entry_t	typeref:enum:x86_modrm_table_entry_t::x86_reg_t	file:
ea_base	x86-asm.h	/^	enum x86_reg_t ea_base;$/;"	m	struct:x86_inst_t	typeref:enum:x86_inst_t::x86_reg_t
ea_index	x86-asm.h	/^	enum x86_reg_t ea_index;$/;"	m	struct:x86_inst_t	typeref:enum:x86_inst_t::x86_reg_t
ea_scale	x86-asm.h	/^	uint32_t ea_scale;$/;"	m	struct:x86_inst_t
ea_scale_table	asm.c	/^uint32_t ea_scale_table[4] = { 1, 2, 4, 8};$/;"	v
eip	x86-asm.h	/^	uint32_t eip;  \/* position inside the code *\/$/;"	m	struct:x86_inst_t
fmt	asm.c	/^	char *fmt;$/;"	m	struct:x86_opcode_info_t	file:
format	x86-asm.h	/^	char *format;  \/* format of the instruction *\/$/;"	m	struct:x86_inst_t
imm	asm.c	/^	uint32_t op1, op2, op3, modrm, imm;$/;"	m	struct:x86_opcode_info_t	file:
imm	x86-asm.h	/^	} imm;$/;"	m	struct:x86_inst_t	typeref:union:x86_inst_t::__anon1
imm_size	asm.c	/^	int imm_size;  \/* Immediate size (0, 1, 2, or 4) *\/$/;"	m	struct:x86_opcode_info_t	file:
imm_size	x86-asm.h	/^	int imm_size;$/;"	m	struct:x86_inst_t
impl_reg	asm.c	/^	int impl_reg;  \/* implied register in op1 (0-7) *\/$/;"	m	struct:x86_opcode_info_t	file:
info	asm.c	/^	struct x86_opcode_info_t *info;$/;"	m	struct:x86_opcode_info_elem_t	typeref:struct:x86_opcode_info_elem_t::x86_opcode_info_t	file:
is_fmt_char	asm.c	/^static int is_fmt_char(char c)$/;"	f	file:
is_next_word	asm.c	/^static int is_next_word(char *src, char *word)$/;"	f	file:
match_mask	asm.c	/^	uint32_t match_mask, match_result;$/;"	m	struct:x86_opcode_info_t	file:
match_result	asm.c	/^	uint32_t match_mask, match_result;$/;"	m	struct:x86_opcode_info_t	file:
modrm	asm.c	/^	uint32_t op1, op2, op3, modrm, imm;$/;"	m	struct:x86_opcode_info_t	file:
modrm	x86-asm.h	/^	unsigned char modrm;  \/* ModR\/M field *\/$/;"	m	struct:x86_inst_t
modrm_mod	x86-asm.h	/^	unsigned char modrm_mod;  \/* mod field of ModR\/M *\/$/;"	m	struct:x86_inst_t
modrm_reg	x86-asm.h	/^	unsigned char modrm_reg;  \/* reg field of ModR\/M *\/$/;"	m	struct:x86_inst_t
modrm_rm	x86-asm.h	/^	unsigned char modrm_rm;  \/* rm field of ModR\/M *\/$/;"	m	struct:x86_inst_t
modrm_size	asm.c	/^	int modrm_size;  \/* size of modrm field (0 or 1) *\/$/;"	m	struct:x86_opcode_info_t	file:
modrm_size	x86-asm.h	/^	int modrm_size;$/;"	m	struct:x86_inst_t
modrm_table	asm.c	/^static struct x86_modrm_table_entry_t modrm_table[32] =$/;"	v	typeref:struct:x86_modrm_table_entry_t	file:
next	asm.c	/^	struct x86_opcode_info_elem_t *next;$/;"	m	struct:x86_opcode_info_elem_t	typeref:struct:x86_opcode_info_elem_t::x86_opcode_info_elem_t	file:
nomatch_mask	asm.c	/^	uint32_t nomatch_mask, nomatch_result;$/;"	m	struct:x86_opcode_info_t	file:
nomatch_result	asm.c	/^	uint32_t nomatch_mask, nomatch_result;$/;"	m	struct:x86_opcode_info_t	file:
op1	asm.c	/^	uint32_t op1, op2, op3, modrm, imm;$/;"	m	struct:x86_opcode_info_t	file:
op2	asm.c	/^	uint32_t op1, op2, op3, modrm, imm;$/;"	m	struct:x86_opcode_info_t	file:
op3	asm.c	/^	uint32_t op1, op2, op3, modrm, imm;$/;"	m	struct:x86_opcode_info_t	file:
op_size	x86-asm.h	/^	int op_size;  \/* Operand size: 2 or 4, default 4 *\/$/;"	m	struct:x86_inst_t
opcode	asm.c	/^	enum x86_opcode_t opcode;$/;"	m	struct:x86_opcode_info_t	typeref:enum:x86_opcode_info_t::x86_opcode_t	file:
opcode	x86-asm.h	/^	enum x86_opcode_t opcode;$/;"	m	struct:x86_inst_t	typeref:enum:x86_inst_t::x86_opcode_t
opcode_size	asm.c	/^	int opcode_size;  \/* size of opcode (1 or 2), not counting the modrm part. *\/$/;"	m	struct:x86_opcode_info_t	file:
opcode_size	x86-asm.h	/^	int opcode_size;$/;"	m	struct:x86_inst_t
opindex	x86-asm.h	/^	int opindex;$/;"	m	struct:x86_inst_t
opindex_shift	asm.c	/^	int opindex_shift;  \/* pos to shift inst to obtain index of op1\/op2 if any *\/$/;"	m	struct:x86_opcode_info_t	file:
prefix_size	x86-asm.h	/^	int prefix_size;$/;"	m	struct:x86_inst_t
prefixes	asm.c	/^	int prefixes;  \/* Mask of prefixes of type 'enum x86_prefix_enum' *\/$/;"	m	struct:x86_opcode_info_t	file:
prefixes	x86-asm.h	/^	int prefixes;  \/* Mask of prefixes of type 'enum x86_prefix_t' *\/$/;"	m	struct:x86_inst_t
reg	x86-asm.h	/^	int reg;  \/* same as modrm_reg *\/$/;"	m	struct:x86_inst_t
segment	x86-asm.h	/^	enum x86_reg_t segment;  \/* Reg. used to override segment *\/$/;"	m	struct:x86_inst_t	typeref:enum:x86_inst_t::x86_reg_t
sib	x86-asm.h	/^	unsigned char sib;  \/* SIB field *\/$/;"	m	struct:x86_inst_t
sib_base	x86-asm.h	/^	unsigned char sib_base;  \/* Base field of SIB *\/$/;"	m	struct:x86_inst_t
sib_index	x86-asm.h	/^	unsigned char sib_index;  \/* Index field of SIB *\/$/;"	m	struct:x86_inst_t
sib_scale	x86-asm.h	/^	unsigned char sib_scale;  \/* Scale field of SIB *\/$/;"	m	struct:x86_inst_t
sib_size	asm.c	/^	int sib_size;$/;"	m	struct:x86_modrm_table_entry_t	file:
sib_size	x86-asm.h	/^	int sib_size;$/;"	m	struct:x86_inst_t
size	x86-asm.h	/^	int size;  \/* number of instruction bytes *\/$/;"	m	struct:x86_inst_t
w	x86-asm.h	/^		uint16_t w;$/;"	m	union:x86_inst_t::__anon1
x86_byte_is_prefix	asm.c	/^static unsigned char x86_byte_is_prefix[256];$/;"	v	file:
x86_disasm	asm.c	/^void x86_disasm(void *buf, uint32_t eip, volatile struct x86_inst_t *inst)$/;"	f
x86_disasm_done	asm.c	/^void x86_disasm_done()$/;"	f
x86_disasm_init	asm.c	/^void x86_disasm_init()$/;"	f
x86_flag_af	x86-asm.h	/^	x86_flag_af = 4,$/;"	e	enum:x86_flag_t
x86_flag_cf	x86-asm.h	/^	x86_flag_cf = 0,$/;"	e	enum:x86_flag_t
x86_flag_df	x86-asm.h	/^	x86_flag_df = 10,$/;"	e	enum:x86_flag_t
x86_flag_of	x86-asm.h	/^	x86_flag_of = 11$/;"	e	enum:x86_flag_t
x86_flag_pf	x86-asm.h	/^	x86_flag_pf = 2,$/;"	e	enum:x86_flag_t
x86_flag_sf	x86-asm.h	/^	x86_flag_sf = 7,$/;"	e	enum:x86_flag_t
x86_flag_t	x86-asm.h	/^enum x86_flag_t$/;"	g
x86_flag_zf	x86-asm.h	/^	x86_flag_zf = 6,$/;"	e	enum:x86_flag_t
x86_inst_dump	asm.c	/^void x86_inst_dump(struct x86_inst_t *inst, FILE *f)$/;"	f
x86_inst_dump_buf	asm.c	/^void x86_inst_dump_buf(struct x86_inst_t *inst, char *buf, int size)$/;"	f
x86_inst_name	asm.c	/^char *x86_inst_name(enum x86_opcode_t opcode)$/;"	f
x86_inst_t	x86-asm.h	/^struct x86_inst_t$/;"	s
x86_memory_address_dump_buf	asm.c	/^static void x86_memory_address_dump_buf(struct x86_inst_t *inst, char **pbuf, int *psize)$/;"	f	file:
x86_modrm_table_entry_t	asm.c	/^struct x86_modrm_table_entry_t {$/;"	s	file:
x86_moffs_address_dump_buf	asm.c	/^static void x86_moffs_address_dump_buf(struct x86_inst_t *inst, char **pbuf, int *psize)$/;"	f	file:
x86_op_none	x86-asm.h	/^	x86_op_none = 0,$/;"	e	enum:x86_opcode_t
x86_opcode_count	x86-asm.h	/^	x86_opcode_count$/;"	e	enum:x86_opcode_t
x86_opcode_info_elem_free_list	asm.c	/^static void x86_opcode_info_elem_free_list(struct x86_opcode_info_elem_t *elem)$/;"	f	file:
x86_opcode_info_elem_t	asm.c	/^struct x86_opcode_info_elem_t$/;"	s	file:
x86_opcode_info_insert	asm.c	/^static void x86_opcode_info_insert(struct x86_opcode_info_t *info)$/;"	f	file:
x86_opcode_info_insert_at	asm.c	/^static void x86_opcode_info_insert_at(struct x86_opcode_info_elem_t **table,$/;"	f	file:
x86_opcode_info_list	asm.c	/^static struct x86_opcode_info_t x86_opcode_info_list[x86_opcode_count] =$/;"	v	typeref:struct:x86_opcode_info_t	file:
x86_opcode_info_t	asm.c	/^struct x86_opcode_info_t$/;"	s	file:
x86_opcode_info_table	asm.c	/^static struct x86_opcode_info_elem_t *x86_opcode_info_table[0x100];$/;"	v	typeref:struct:x86_opcode_info_elem_t	file:
x86_opcode_info_table_0f	asm.c	/^static struct x86_opcode_info_elem_t *x86_opcode_info_table_0f[0x100];$/;"	v	typeref:struct:x86_opcode_info_elem_t	file:
x86_opcode_t	x86-asm.h	/^enum x86_opcode_t$/;"	g
x86_prefix_addr	x86-asm.h	/^	x86_prefix_addr = 0x08,  \/* address-size override *\/$/;"	e	enum:x86_prefix_t
x86_prefix_lock	x86-asm.h	/^	x86_prefix_lock = 0x04,$/;"	e	enum:x86_prefix_t
x86_prefix_none	x86-asm.h	/^	x86_prefix_none = 0x00,$/;"	e	enum:x86_prefix_t
x86_prefix_op	x86-asm.h	/^	x86_prefix_op = 0x10  \/* operand-size override *\/$/;"	e	enum:x86_prefix_t
x86_prefix_rep	x86-asm.h	/^	x86_prefix_rep = 0x01,$/;"	e	enum:x86_prefix_t
x86_prefix_repnz	x86-asm.h	/^	x86_prefix_repnz = 0x02,$/;"	e	enum:x86_prefix_t
x86_prefix_repz	x86-asm.h	/^	x86_prefix_repz = 0x01,  \/* same value as rep *\/$/;"	e	enum:x86_prefix_t
x86_prefix_t	x86-asm.h	/^enum x86_prefix_t$/;"	g
x86_prefixes	asm.c	/^static unsigned char x86_prefixes[] = { 0xf0, 0xf2, 0xf3, 0x66, 0x67, 0x2e, 0x36, 0x3e, 0x26, 0x64, 0x65 };$/;"	v	file:
x86_reg_ah	x86-asm.h	/^	x86_reg_ah,$/;"	e	enum:x86_reg_t
x86_reg_al	x86-asm.h	/^	x86_reg_al,$/;"	e	enum:x86_reg_t
x86_reg_ax	x86-asm.h	/^	x86_reg_ax,$/;"	e	enum:x86_reg_t
x86_reg_bh	x86-asm.h	/^	x86_reg_bh,$/;"	e	enum:x86_reg_t
x86_reg_bl	x86-asm.h	/^	x86_reg_bl,$/;"	e	enum:x86_reg_t
x86_reg_bp	x86-asm.h	/^	x86_reg_bp,$/;"	e	enum:x86_reg_t
x86_reg_bx	x86-asm.h	/^	x86_reg_bx,$/;"	e	enum:x86_reg_t
x86_reg_ch	x86-asm.h	/^	x86_reg_ch,$/;"	e	enum:x86_reg_t
x86_reg_cl	x86-asm.h	/^	x86_reg_cl,$/;"	e	enum:x86_reg_t
x86_reg_count	x86-asm.h	/^	x86_reg_count$/;"	e	enum:x86_reg_t
x86_reg_cs	x86-asm.h	/^	x86_reg_cs,$/;"	e	enum:x86_reg_t
x86_reg_cx	x86-asm.h	/^	x86_reg_cx,$/;"	e	enum:x86_reg_t
x86_reg_dh	x86-asm.h	/^	x86_reg_dh,$/;"	e	enum:x86_reg_t
x86_reg_di	x86-asm.h	/^	x86_reg_di,$/;"	e	enum:x86_reg_t
x86_reg_dl	x86-asm.h	/^	x86_reg_dl,$/;"	e	enum:x86_reg_t
x86_reg_ds	x86-asm.h	/^	x86_reg_ds,$/;"	e	enum:x86_reg_t
x86_reg_dx	x86-asm.h	/^	x86_reg_dx,$/;"	e	enum:x86_reg_t
x86_reg_eax	x86-asm.h	/^	x86_reg_eax,$/;"	e	enum:x86_reg_t
x86_reg_ebp	x86-asm.h	/^	x86_reg_ebp,$/;"	e	enum:x86_reg_t
x86_reg_ebx	x86-asm.h	/^	x86_reg_ebx,$/;"	e	enum:x86_reg_t
x86_reg_ecx	x86-asm.h	/^	x86_reg_ecx,$/;"	e	enum:x86_reg_t
x86_reg_edi	x86-asm.h	/^	x86_reg_edi,$/;"	e	enum:x86_reg_t
x86_reg_edx	x86-asm.h	/^	x86_reg_edx,$/;"	e	enum:x86_reg_t
x86_reg_es	x86-asm.h	/^	x86_reg_es,$/;"	e	enum:x86_reg_t
x86_reg_esi	x86-asm.h	/^	x86_reg_esi,$/;"	e	enum:x86_reg_t
x86_reg_esp	x86-asm.h	/^	x86_reg_esp,$/;"	e	enum:x86_reg_t
x86_reg_fs	x86-asm.h	/^	x86_reg_fs,$/;"	e	enum:x86_reg_t
x86_reg_gs	x86-asm.h	/^	x86_reg_gs,$/;"	e	enum:x86_reg_t
x86_reg_name	asm.c	/^char *x86_reg_name[x86_reg_count] =$/;"	v
x86_reg_name_get	asm.c	/^static char *x86_reg_name_get(enum x86_reg_t reg)$/;"	f	file:
x86_reg_none	x86-asm.h	/^	x86_reg_none = 0,$/;"	e	enum:x86_reg_t
x86_reg_si	x86-asm.h	/^	x86_reg_si,$/;"	e	enum:x86_reg_t
x86_reg_sp	x86-asm.h	/^	x86_reg_sp,$/;"	e	enum:x86_reg_t
x86_reg_ss	x86-asm.h	/^	x86_reg_ss,$/;"	e	enum:x86_reg_t
x86_reg_t	x86-asm.h	/^enum x86_reg_t$/;"	g
x86_xmm_reg_t	x86-asm.h	/^union x86_xmm_reg_t$/;"	u
