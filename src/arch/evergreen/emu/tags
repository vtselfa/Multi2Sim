!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEFINST	isa.c	63;"	d	file:
DEFINST	isa.c	67;"	d	file:
DEF_OPENCL_FUNC	evergreen-emu.h	178;"	d
DEF_OPENCL_FUNC	evergreen-emu.h	180;"	d
DEF_OPENCL_FUNC	opencl.c	59;"	d	file:
DEF_OPENCL_FUNC	opencl.c	61;"	d	file:
DEF_OPENCL_FUNC	opencl.c	68;"	d	file:
DEF_OPENCL_FUNC	opencl.c	70;"	d	file:
EVERGREEN_EMU_H	evergreen-emu.h	21;"	d
EVG_ALU_WORD0	evergreen-emu.h	1061;"	d
EVG_ALU_WORD0_LDS_IDX_OP	evergreen-emu.h	1065;"	d
EVG_ALU_WORD1_LDS_IDX_OP	evergreen-emu.h	1066;"	d
EVG_ALU_WORD1_OP2	evergreen-emu.h	1062;"	d
EVG_ALU_WORD1_OP3	evergreen-emu.h	1063;"	d
EVG_BIN_FILE_NOT_SUPPORTED	bin-file.c	24;"	d	file:
EVG_BIN_FILE_NOT_SUPPORTED_NEQ	bin-file.c	26;"	d	file:
EVG_CF_ALLOC_EXPORT_WORD0	evergreen-emu.h	1056;"	d
EVG_CF_ALLOC_EXPORT_WORD0_RAT	evergreen-emu.h	1057;"	d
EVG_CF_ALLOC_EXPORT_WORD1_BUF	evergreen-emu.h	1058;"	d
EVG_CF_ALLOC_EXPORT_WORD1_SWIZ	evergreen-emu.h	1059;"	d
EVG_CF_ALU_WORD0	evergreen-emu.h	1051;"	d
EVG_CF_ALU_WORD0_EXT	evergreen-emu.h	1053;"	d
EVG_CF_ALU_WORD1	evergreen-emu.h	1052;"	d
EVG_CF_ALU_WORD1_EXT	evergreen-emu.h	1054;"	d
EVG_CF_GWS_WORD0	evergreen-emu.h	1048;"	d
EVG_CF_WORD0	evergreen-emu.h	1047;"	d
EVG_CF_WORD1	evergreen-emu.h	1049;"	d
EVG_CLAUSE_ALU	evergreen-emu.h	/^	EVG_CLAUSE_ALU,  \/* ALU clause *\/$/;"	e	enum:evg_clause_kind_t
EVG_CLAUSE_CF	evergreen-emu.h	/^	EVG_CLAUSE_CF,  \/* Control-flow *\/$/;"	e	enum:evg_clause_kind_t
EVG_CLAUSE_NONE	evergreen-emu.h	/^	EVG_CLAUSE_NONE = 0,$/;"	e	enum:evg_clause_kind_t
EVG_CLAUSE_TEX	evergreen-emu.h	/^	EVG_CLAUSE_TEX,  \/* Fetch trough a Texture Cache Clause *\/$/;"	e	enum:evg_clause_kind_t
EVG_CLAUSE_VC	evergreen-emu.h	/^	EVG_CLAUSE_VC  \/* Fetch through a Vertex Cache Clause *\/$/;"	e	enum:evg_clause_kind_t
EVG_FOREACH_WAVEFRONT_IN_NDRANGE	evergreen-emu.h	879;"	d
EVG_FOREACH_WAVEFRONT_IN_WORK_GROUP	evergreen-emu.h	884;"	d
EVG_FOREACH_WORK_ITEM_IN_NDRANGE	evergreen-emu.h	966;"	d
EVG_FOREACH_WORK_ITEM_IN_WAVEFRONT	evergreen-emu.h	976;"	d
EVG_FOREACH_WORK_ITEM_IN_WORK_GROUP	evergreen-emu.h	971;"	d
EVG_FOR_EACH_WORK_GROUP_IN_NDRANGE	evergreen-emu.h	734;"	d
EVG_GPR_ELEM	evergreen-emu.h	1011;"	d
EVG_GPR_FLOAT_ELEM	evergreen-emu.h	1018;"	d
EVG_GPR_FLOAT_T	evergreen-emu.h	1023;"	d
EVG_GPR_FLOAT_W	evergreen-emu.h	1022;"	d
EVG_GPR_FLOAT_X	evergreen-emu.h	1019;"	d
EVG_GPR_FLOAT_Y	evergreen-emu.h	1020;"	d
EVG_GPR_FLOAT_Z	evergreen-emu.h	1021;"	d
EVG_GPR_T	evergreen-emu.h	1016;"	d
EVG_GPR_W	evergreen-emu.h	1015;"	d
EVG_GPR_X	evergreen-emu.h	1012;"	d
EVG_GPR_Y	evergreen-emu.h	1013;"	d
EVG_GPR_Z	evergreen-emu.h	1014;"	d
EVG_ISA_ARG_NOT_SUPPORTED	evergreen-emu.h	1035;"	d
EVG_ISA_ARG_NOT_SUPPORTED_NEQ	evergreen-emu.h	1038;"	d
EVG_ISA_ARG_NOT_SUPPORTED_RANGE	evergreen-emu.h	1041;"	d
EVG_ISA_WRITE_TASK_NONE	evergreen-emu.h	/^	EVG_ISA_WRITE_TASK_NONE = 0,$/;"	e	enum:evg_isa_write_task_kind_t
EVG_ISA_WRITE_TASK_PUSH_BEFORE	evergreen-emu.h	/^	EVG_ISA_WRITE_TASK_PUSH_BEFORE,$/;"	e	enum:evg_isa_write_task_kind_t
EVG_ISA_WRITE_TASK_SET_PRED	evergreen-emu.h	/^	EVG_ISA_WRITE_TASK_SET_PRED$/;"	e	enum:evg_isa_write_task_kind_t
EVG_ISA_WRITE_TASK_WRITE_DEST	evergreen-emu.h	/^	EVG_ISA_WRITE_TASK_WRITE_DEST,$/;"	e	enum:evg_isa_write_task_kind_t
EVG_ISA_WRITE_TASK_WRITE_LDS	evergreen-emu.h	/^	EVG_ISA_WRITE_TASK_WRITE_LDS,$/;"	e	enum:evg_isa_write_task_kind_t
EVG_MAX_GPR_ELEM	evergreen-emu.h	904;"	d
EVG_MAX_LOCAL_MEM_ACCESSES_PER_INST	evergreen-emu.h	905;"	d
EVG_MAX_STACK_SIZE	evergreen-emu.h	765;"	d
EVG_MEM_GDS_WORD0	evergreen-emu.h	1081;"	d
EVG_MEM_GDS_WORD1	evergreen-emu.h	1082;"	d
EVG_MEM_GDS_WORD2	evergreen-emu.h	1083;"	d
EVG_MEM_RD_WORD0	evergreen-emu.h	1077;"	d
EVG_MEM_RD_WORD1	evergreen-emu.h	1078;"	d
EVG_MEM_RD_WORD2	evergreen-emu.h	1079;"	d
EVG_OPENCL_ARG_NOT_SUPPORTED	opencl.c	119;"	d	file:
EVG_OPENCL_ARG_NOT_SUPPORTED_EQ	opencl.c	121;"	d	file:
EVG_OPENCL_ARG_NOT_SUPPORTED_FLAG	opencl.c	130;"	d	file:
EVG_OPENCL_ARG_NOT_SUPPORTED_LT	opencl.c	125;"	d	file:
EVG_OPENCL_ARG_NOT_SUPPORTED_NEQ	opencl.c	123;"	d	file:
EVG_OPENCL_ARG_NOT_SUPPORTED_RANGE	opencl.c	127;"	d	file:
EVG_OPENCL_EVENT_COPY_BUFFER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COPY_BUFFER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_COPY_BUFFER_RECT	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COPY_BUFFER_RECT,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_COPY_BUFFER_TO_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COPY_BUFFER_TO_IMAGE,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_COPY_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COPY_IMAGE,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_COPY_IMAGE_TO_BUFFER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COPY_IMAGE_TO_BUFFER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_COUNT	evergreen-emu.h	/^	EVG_OPENCL_EVENT_COUNT$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_MAP_BUFFER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_MAP_BUFFER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_MAP_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_MAP_IMAGE,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_MARKER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_MARKER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_NATIVE_KERNEL	evergreen-emu.h	/^	EVG_OPENCL_EVENT_NATIVE_KERNEL,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_NDRANGE_KERNEL	evergreen-emu.h	/^	EVG_OPENCL_EVENT_NDRANGE_KERNEL,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_NONE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_NONE = 0,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_READ_BUFFER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_READ_BUFFER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_READ_BUFFER_RECT	evergreen-emu.h	/^	EVG_OPENCL_EVENT_READ_BUFFER_RECT,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_READ_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_READ_IMAGE,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_STATUS_COMPLETE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_STATUS_COMPLETE$/;"	e	enum:evg_opencl_event_status_t
EVG_OPENCL_EVENT_STATUS_NONE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_STATUS_NONE = 0,$/;"	e	enum:evg_opencl_event_status_t
EVG_OPENCL_EVENT_STATUS_QUEUED	evergreen-emu.h	/^	EVG_OPENCL_EVENT_STATUS_QUEUED,$/;"	e	enum:evg_opencl_event_status_t
EVG_OPENCL_EVENT_STATUS_RUNNING	evergreen-emu.h	/^	EVG_OPENCL_EVENT_STATUS_RUNNING,$/;"	e	enum:evg_opencl_event_status_t
EVG_OPENCL_EVENT_STATUS_SUBMITTED	evergreen-emu.h	/^	EVG_OPENCL_EVENT_STATUS_SUBMITTED,$/;"	e	enum:evg_opencl_event_status_t
EVG_OPENCL_EVENT_TASK	evergreen-emu.h	/^	EVG_OPENCL_EVENT_TASK,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_UNMAP_MEM_OBJECT	evergreen-emu.h	/^	EVG_OPENCL_EVENT_UNMAP_MEM_OBJECT,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_WRITE_BUFFER	evergreen-emu.h	/^	EVG_OPENCL_EVENT_WRITE_BUFFER,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_WRITE_BUFFER_RECT	evergreen-emu.h	/^	EVG_OPENCL_EVENT_WRITE_BUFFER_RECT,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_EVENT_WRITE_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_EVENT_WRITE_IMAGE,$/;"	e	enum:evg_opencl_event_kind_t
EVG_OPENCL_FUNC_COUNT	evergreen-emu.h	/^	EVG_OPENCL_FUNC_COUNT$/;"	e	enum:evg_opencl_func_t
EVG_OPENCL_FUNC_FIRST	evergreen-emu.h	171;"	d
EVG_OPENCL_FUNC_LAST	evergreen-emu.h	172;"	d
EVG_OPENCL_KERNEL_ARG_KIND_IMAGE	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_KIND_IMAGE,$/;"	e	enum:evg_opencl_kernel_arg_kind_t
EVG_OPENCL_KERNEL_ARG_KIND_POINTER	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_KIND_POINTER,$/;"	e	enum:evg_opencl_kernel_arg_kind_t
EVG_OPENCL_KERNEL_ARG_KIND_SAMPLER	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_KIND_SAMPLER$/;"	e	enum:evg_opencl_kernel_arg_kind_t
EVG_OPENCL_KERNEL_ARG_KIND_VALUE	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_KIND_VALUE = 1,$/;"	e	enum:evg_opencl_kernel_arg_kind_t
EVG_OPENCL_KERNEL_ARG_READ_ONLY	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_READ_ONLY = 1,$/;"	e	enum:evg_opencl_kernel_arg_access_type_t
EVG_OPENCL_KERNEL_ARG_READ_WRITE	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_READ_WRITE$/;"	e	enum:evg_opencl_kernel_arg_access_type_t
EVG_OPENCL_KERNEL_ARG_WRITE_ONLY	evergreen-emu.h	/^	EVG_OPENCL_KERNEL_ARG_WRITE_ONLY,$/;"	e	enum:evg_opencl_kernel_arg_access_type_t
EVG_OPENCL_KERNEL_METADATA_NOT_SUPPORTED	opencl-obj.c	812;"	d	file:
EVG_OPENCL_KERNEL_METADATA_NOT_SUPPORTED_NEQ	opencl-obj.c	816;"	d	file:
EVG_OPENCL_KERNEL_METADATA_TOKEN_COUNT	opencl-obj.c	808;"	d	file:
EVG_OPENCL_MAX_ARGS	evergreen-emu.h	173;"	d
EVG_OPENCL_MEM_SCOPE_CONSTANT	evergreen-emu.h	/^	EVG_OPENCL_MEM_SCOPE_CONSTANT$/;"	e	enum:evg_opencl_mem_scope_t
EVG_OPENCL_MEM_SCOPE_GLOBAL	evergreen-emu.h	/^	EVG_OPENCL_MEM_SCOPE_GLOBAL,$/;"	e	enum:evg_opencl_mem_scope_t
EVG_OPENCL_MEM_SCOPE_LOCAL	evergreen-emu.h	/^	EVG_OPENCL_MEM_SCOPE_LOCAL,$/;"	e	enum:evg_opencl_mem_scope_t
EVG_OPENCL_MEM_SCOPE_NONE	evergreen-emu.h	/^	EVG_OPENCL_MEM_SCOPE_NONE = 0,$/;"	e	enum:evg_opencl_mem_scope_t
EVG_OPENCL_MEM_SCOPE_PRIVATE	evergreen-emu.h	/^	EVG_OPENCL_MEM_SCOPE_PRIVATE,$/;"	e	enum:evg_opencl_mem_scope_t
EVG_OPENCL_OBJ_COMMAND_QUEUE	evergreen-emu.h	/^	EVG_OPENCL_OBJ_COMMAND_QUEUE,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_CONTEXT	evergreen-emu.h	/^	EVG_OPENCL_OBJ_CONTEXT,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_DEVICE	evergreen-emu.h	/^	EVG_OPENCL_OBJ_DEVICE,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_EVENT	evergreen-emu.h	/^	EVG_OPENCL_OBJ_EVENT,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_KERNEL	evergreen-emu.h	/^	EVG_OPENCL_OBJ_KERNEL,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_MEM	evergreen-emu.h	/^	EVG_OPENCL_OBJ_MEM,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_PLATFORM	evergreen-emu.h	/^	EVG_OPENCL_OBJ_PLATFORM = 1,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_PROGRAM	evergreen-emu.h	/^	EVG_OPENCL_OBJ_PROGRAM,$/;"	e	enum:evg_opencl_obj_t
EVG_OPENCL_OBJ_SAMPLER	evergreen-emu.h	/^	EVG_OPENCL_OBJ_SAMPLER$/;"	e	enum:evg_opencl_obj_t
EVG_OPENGL_SHADER_CONTROL	evergreen-emu.h	/^	EVG_OPENGL_SHADER_CONTROL$/;"	e	enum:evg_opengl_shader_kind_t
EVG_OPENGL_SHADER_EVALUATION	evergreen-emu.h	/^	EVG_OPENGL_SHADER_EVALUATION,$/;"	e	enum:evg_opengl_shader_kind_t
EVG_OPENGL_SHADER_FRAGMENT	evergreen-emu.h	/^	EVG_OPENGL_SHADER_FRAGMENT,$/;"	e	enum:evg_opengl_shader_kind_t
EVG_OPENGL_SHADER_GEOMETRY	evergreen-emu.h	/^	EVG_OPENGL_SHADER_GEOMETRY,$/;"	e	enum:evg_opengl_shader_kind_t
EVG_OPENGL_SHADER_VERTEX	evergreen-emu.h	/^	EVG_OPENGL_SHADER_VERTEX,$/;"	e	enum:evg_opengl_shader_kind_t
EVG_SYS_OPENCL_IMPL_VERSION	opencl-syscall.c	32;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION	opencl.c	34;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_BUILD	opencl-syscall.c	31;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_BUILD	opencl.c	33;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_MAJOR	opencl-syscall.c	29;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_MAJOR	opencl.c	31;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_MINOR	opencl-syscall.c	30;"	d	file:
EVG_SYS_OPENCL_IMPL_VERSION_MINOR	opencl.c	32;"	d	file:
EVG_TEX_WORD0	evergreen-emu.h	1073;"	d
EVG_TEX_WORD1	evergreen-emu.h	1074;"	d
EVG_TEX_WORD2	evergreen-emu.h	1075;"	d
EVG_VTX_WORD0	evergreen-emu.h	1068;"	d
EVG_VTX_WORD1_GPR	evergreen-emu.h	1069;"	d
EVG_VTX_WORD1_SEM	evergreen-emu.h	1070;"	d
EVG_VTX_WORD2	evergreen-emu.h	1071;"	d
NOT_IMPL	machine.c	32;"	d	file:
W0	machine.c	1009;"	d	file:
W0	machine.c	1013;"	d	file:
W0	machine.c	1030;"	d	file:
W0	machine.c	1034;"	d	file:
W0	machine.c	1051;"	d	file:
W0	machine.c	1055;"	d	file:
W0	machine.c	105;"	d	file:
W0	machine.c	1072;"	d	file:
W0	machine.c	1076;"	d	file:
W0	machine.c	1093;"	d	file:
W0	machine.c	1097;"	d	file:
W0	machine.c	1114;"	d	file:
W0	machine.c	1244;"	d	file:
W0	machine.c	1267;"	d	file:
W0	machine.c	1271;"	d	file:
W0	machine.c	1294;"	d	file:
W0	machine.c	1298;"	d	file:
W0	machine.c	1321;"	d	file:
W0	machine.c	1325;"	d	file:
W0	machine.c	1348;"	d	file:
W0	machine.c	1529;"	d	file:
W0	machine.c	1546;"	d	file:
W0	machine.c	1550;"	d	file:
W0	machine.c	1567;"	d	file:
W0	machine.c	1571;"	d	file:
W0	machine.c	157;"	d	file:
W0	machine.c	1588;"	d	file:
W0	machine.c	1592;"	d	file:
W0	machine.c	1609;"	d	file:
W0	machine.c	1615;"	d	file:
W0	machine.c	1632;"	d	file:
W0	machine.c	1636;"	d	file:
W0	machine.c	1653;"	d	file:
W0	machine.c	1669;"	d	file:
W0	machine.c	1692;"	d	file:
W0	machine.c	1696;"	d	file:
W0	machine.c	1719;"	d	file:
W0	machine.c	1723;"	d	file:
W0	machine.c	1746;"	d	file:
W0	machine.c	1750;"	d	file:
W0	machine.c	1773;"	d	file:
W0	machine.c	220;"	d	file:
W0	machine.c	242;"	d	file:
W0	machine.c	245;"	d	file:
W0	machine.c	252;"	d	file:
W0	machine.c	255;"	d	file:
W0	machine.c	262;"	d	file:
W0	machine.c	2651;"	d	file:
W0	machine.c	265;"	d	file:
W0	machine.c	2915;"	d	file:
W0	machine.c	3027;"	d	file:
W0	machine.c	309;"	d	file:
W0	machine.c	313;"	d	file:
W0	machine.c	3293;"	d	file:
W0	machine.c	3376;"	d	file:
W0	machine.c	3483;"	d	file:
W0	machine.c	351;"	d	file:
W0	machine.c	355;"	d	file:
W0	machine.c	382;"	d	file:
W0	machine.c	386;"	d	file:
W0	machine.c	392;"	d	file:
W0	machine.c	396;"	d	file:
W0	machine.c	40;"	d	file:
W0	machine.c	447;"	d	file:
W0	machine.c	462;"	d	file:
W0	machine.c	568;"	d	file:
W0	machine.c	571;"	d	file:
W0	machine.c	57;"	d	file:
W0	machine.c	661;"	d	file:
W0	machine.c	774;"	d	file:
W0	machine.c	779;"	d	file:
W0	machine.c	783;"	d	file:
W0	machine.c	799;"	d	file:
W0	machine.c	802;"	d	file:
W0	machine.c	809;"	d	file:
W0	machine.c	812;"	d	file:
W0	machine.c	819;"	d	file:
W0	machine.c	822;"	d	file:
W0	machine.c	852;"	d	file:
W0	machine.c	950;"	d	file:
W0	machine.c	967;"	d	file:
W0	machine.c	971;"	d	file:
W0	machine.c	988;"	d	file:
W0	machine.c	992;"	d	file:
W1	machine.c	1010;"	d	file:
W1	machine.c	1014;"	d	file:
W1	machine.c	1031;"	d	file:
W1	machine.c	1035;"	d	file:
W1	machine.c	1052;"	d	file:
W1	machine.c	1056;"	d	file:
W1	machine.c	106;"	d	file:
W1	machine.c	1073;"	d	file:
W1	machine.c	1077;"	d	file:
W1	machine.c	1094;"	d	file:
W1	machine.c	1098;"	d	file:
W1	machine.c	1115;"	d	file:
W1	machine.c	1245;"	d	file:
W1	machine.c	1268;"	d	file:
W1	machine.c	1272;"	d	file:
W1	machine.c	1295;"	d	file:
W1	machine.c	1299;"	d	file:
W1	machine.c	1322;"	d	file:
W1	machine.c	1326;"	d	file:
W1	machine.c	1349;"	d	file:
W1	machine.c	1530;"	d	file:
W1	machine.c	1547;"	d	file:
W1	machine.c	1551;"	d	file:
W1	machine.c	1568;"	d	file:
W1	machine.c	1572;"	d	file:
W1	machine.c	1589;"	d	file:
W1	machine.c	158;"	d	file:
W1	machine.c	1593;"	d	file:
W1	machine.c	1610;"	d	file:
W1	machine.c	1616;"	d	file:
W1	machine.c	1633;"	d	file:
W1	machine.c	1637;"	d	file:
W1	machine.c	1654;"	d	file:
W1	machine.c	1670;"	d	file:
W1	machine.c	1693;"	d	file:
W1	machine.c	1697;"	d	file:
W1	machine.c	1720;"	d	file:
W1	machine.c	1724;"	d	file:
W1	machine.c	1747;"	d	file:
W1	machine.c	1751;"	d	file:
W1	machine.c	1774;"	d	file:
W1	machine.c	221;"	d	file:
W1	machine.c	243;"	d	file:
W1	machine.c	246;"	d	file:
W1	machine.c	253;"	d	file:
W1	machine.c	256;"	d	file:
W1	machine.c	263;"	d	file:
W1	machine.c	2652;"	d	file:
W1	machine.c	266;"	d	file:
W1	machine.c	2916;"	d	file:
W1	machine.c	3028;"	d	file:
W1	machine.c	310;"	d	file:
W1	machine.c	314;"	d	file:
W1	machine.c	3294;"	d	file:
W1	machine.c	3377;"	d	file:
W1	machine.c	3484;"	d	file:
W1	machine.c	352;"	d	file:
W1	machine.c	356;"	d	file:
W1	machine.c	383;"	d	file:
W1	machine.c	387;"	d	file:
W1	machine.c	393;"	d	file:
W1	machine.c	397;"	d	file:
W1	machine.c	41;"	d	file:
W1	machine.c	448;"	d	file:
W1	machine.c	463;"	d	file:
W1	machine.c	569;"	d	file:
W1	machine.c	572;"	d	file:
W1	machine.c	58;"	d	file:
W1	machine.c	662;"	d	file:
W1	machine.c	775;"	d	file:
W1	machine.c	780;"	d	file:
W1	machine.c	784;"	d	file:
W1	machine.c	800;"	d	file:
W1	machine.c	803;"	d	file:
W1	machine.c	810;"	d	file:
W1	machine.c	813;"	d	file:
W1	machine.c	820;"	d	file:
W1	machine.c	823;"	d	file:
W1	machine.c	853;"	d	file:
W1	machine.c	951;"	d	file:
W1	machine.c	968;"	d	file:
W1	machine.c	972;"	d	file:
W1	machine.c	989;"	d	file:
W1	machine.c	993;"	d	file:
W2	machine.c	3029;"	d	file:
W2	machine.c	3295;"	d	file:
W2	machine.c	3378;"	d	file:
W2	machine.c	3485;"	d	file:
access_type	evergreen-emu.h	/^	enum evg_opencl_kernel_arg_access_type_t access_type;$/;"	m	struct:evg_opencl_kernel_arg_t	typeref:enum:evg_opencl_kernel_arg_t::evg_opencl_kernel_arg_access_type_t
active_mask_pop	evergreen-emu.h	/^	int active_mask_pop;  \/* Number of entries the stack was popped *\/$/;"	m	struct:evg_wavefront_t
active_mask_push	evergreen-emu.h	/^	int active_mask_push;  \/* Number of entries the stack was pushed *\/$/;"	m	struct:evg_wavefront_t
active_mask_update	evergreen-emu.h	/^	unsigned int active_mask_update : 1;$/;"	m	struct:evg_wavefront_t
active_stack	evergreen-emu.h	/^	struct bit_map_t *active_stack;  \/* EVG_MAX_STACK_SIZE * work_item_count elements *\/$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::bit_map_t
addr	evergreen-emu.h	/^	uint32_t addr;$/;"	m	struct:evg_mem_access_t
address	bin-file.c	/^	Elf32_Word address;  \/* Device address *\/$/;"	m	struct:pt_note_prog_info_entry_t	file:
addressing_mode	evergreen-emu.h	/^	uint32_t addressing_mode;$/;"	m	struct:evg_opencl_sampler_t
alu_clause_count	evergreen-emu.h	/^	long long alu_clause_count;  \/* Number of ALU clauses started *\/$/;"	m	struct:evg_wavefront_t
alu_engine_in_flight	evergreen-emu.h	/^	int alu_engine_in_flight;  \/* Number of in-flight uops in ALU engine *\/$/;"	m	struct:evg_wavefront_t
alu_group	evergreen-emu.h	/^	struct evg_alu_group_t alu_group;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_alu_group_t
alu_group_count	evergreen-emu.h	/^	long long alu_group_count;  \/* Number of ALU instruction groups (VLIW) *\/$/;"	m	struct:evg_wavefront_t
alu_group_size	evergreen-emu.h	/^	long long alu_group_size[5];  \/* Distribution of group sizes (alu_group_size[0] is the number of groups with 1 inst) *\/$/;"	m	struct:evg_wavefront_t
alu_inst_count	evergreen-emu.h	/^	long long alu_inst_count;  \/* Number of ALU instructions *\/$/;"	m	struct:evg_wavefront_t
alu_inst_local_mem_count	evergreen-emu.h	/^	long long alu_inst_local_mem_count;  \/* Instructions accessing local memory (ALU) *\/$/;"	m	struct:evg_wavefront_t
amd_opengl_shader_create_from_buffer	opengl-bin-file.c	/^static struct evg_opengl_shader_t *amd_opengl_shader_create_from_buffer(void *ptr, int size, struct list_t *elf_offset_list, int elf_file_index, char *name)$/;"	f	file:
amd_opengl_shader_free	opengl-bin-file.c	/^static void amd_opengl_shader_free(struct evg_opengl_shader_t *opengl_shader)$/;"	f	file:
amd_opengl_shader_set_isa_buffer	opengl-bin-file.c	/^static int amd_opengl_shader_set_isa_buffer(struct evg_opengl_shader_t *opengl_shader)$/;"	f	file:
amd_opengl_shader_set_shader_kind	opengl-bin-file.c	/^static int amd_opengl_shader_set_shader_kind(struct evg_opengl_shader_t *opengl_shader)$/;"	f	file:
arg_list	evergreen-emu.h	/^	struct list_t *arg_list;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::list_t
barrier_list_count	evergreen-emu.h	/^	int barrier_list_count;$/;"	m	struct:evg_work_group_t
barrier_list_head	evergreen-emu.h	/^	struct evg_wavefront_t *barrier_list_head;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
barrier_list_max	evergreen-emu.h	/^	int barrier_list_max;$/;"	m	struct:evg_work_group_t
barrier_list_next	evergreen-emu.h	/^	struct evg_wavefront_t *barrier_list_next;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
barrier_list_prev	evergreen-emu.h	/^	struct evg_wavefront_t *barrier_list_prev;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
barrier_list_tail	evergreen-emu.h	/^	struct evg_wavefront_t *barrier_list_tail;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
bin_file	evergreen-emu.h	/^	struct evg_bin_file_t *bin_file;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::evg_bin_file_t
bool_consts	evergreen-emu.h	/^	unsigned int bool_consts[32];$/;"	m	struct:evg_bin_enc_dict_entry_consts_t
branch_digest	evergreen-emu.h	/^	uint32_t branch_digest;$/;"	m	struct:evg_work_item_t
cf_buf	evergreen-emu.h	/^	void *cf_buf;$/;"	m	struct:evg_wavefront_t
cf_buf_start	evergreen-emu.h	/^	void *cf_buf_start;$/;"	m	struct:evg_wavefront_t
cf_inst	evergreen-emu.h	/^	struct evg_inst_t cf_inst;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_inst_t
cf_inst_count	evergreen-emu.h	/^	long long cf_inst_count;  \/* Number of CF inst executed *\/$/;"	m	struct:evg_wavefront_t
cf_inst_global_mem_write_count	evergreen-emu.h	/^	long long cf_inst_global_mem_write_count;  \/* Number of instructions writing to global mem (they are CF inst) *\/$/;"	m	struct:evg_wavefront_t
chan	evergreen-emu.h	/^	int gpr, rel, chan, index_mode, write_mask;$/;"	m	struct:evg_isa_write_task_t
clause_buf	evergreen-emu.h	/^	void *clause_buf;$/;"	m	struct:evg_wavefront_t
clause_buf_end	evergreen-emu.h	/^	void *clause_buf_end;$/;"	m	struct:evg_wavefront_t
clause_buf_start	evergreen-emu.h	/^	void *clause_buf_start;$/;"	m	struct:evg_wavefront_t
clause_kind	evergreen-emu.h	/^	enum evg_clause_kind_t clause_kind;$/;"	m	struct:evg_wavefront_t	typeref:enum:evg_wavefront_t::evg_clause_kind_t
compute_unit_finished_count	evergreen-emu.h	/^	int compute_unit_finished_count;  \/* like 'finished_list_count', but when WF reaches Complete stage *\/$/;"	m	struct:evg_work_group_t
cond	evergreen-emu.h	/^	int cond;$/;"	m	struct:evg_isa_write_task_t
const_mem	evergreen-emu.h	/^	struct mem_t *const_mem;$/;"	m	struct:evg_emu_t	typeref:struct:evg_emu_t::mem_t
const_mem_cb0_init	evergreen-emu.h	/^	int const_mem_cb0_init[9 * 4];$/;"	m	struct:evg_emu_t
constant_buffer_list	evergreen-emu.h	/^	struct list_t *constant_buffer_list;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::list_t
constant_buffer_list	evergreen-emu.h	/^	struct list_t *constant_buffer_list;$/;"	m	struct:evg_opencl_program_t	typeref:struct:evg_opencl_program_t::list_t
consts	evergreen-emu.h	/^	struct evg_bin_enc_dict_entry_consts_t *consts;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::evg_bin_enc_dict_entry_consts_t
context_id	evergreen-emu.h	/^	uint32_t context_id;$/;"	m	struct:evg_opencl_command_queue_t
context_id	evergreen-emu.h	/^	uint32_t context_id;$/;"	m	struct:evg_opencl_program_t
d_flags	evergreen-emu.h	/^	Elf32_Word d_flags;$/;"	m	struct:evg_bin_enc_dict_entry_header_t
d_machine	evergreen-emu.h	/^	Elf32_Word d_machine;$/;"	m	struct:evg_bin_enc_dict_entry_header_t
d_offset	evergreen-emu.h	/^	Elf32_Off d_offset;  \/* Offset for encoding data (PT_NOTE + PT_LOAD segments) *\/$/;"	m	struct:evg_bin_enc_dict_entry_header_t
d_size	evergreen-emu.h	/^	Elf32_Word d_size;  \/* Size of encoding data (PT_NOTE + PT_LOAD segments) *\/$/;"	m	struct:evg_bin_enc_dict_entry_header_t
d_type	evergreen-emu.h	/^	Elf32_Word d_type;$/;"	m	struct:evg_bin_enc_dict_entry_header_t
depth	evergreen-emu.h	/^	uint32_t depth;$/;"	m	struct:evg_opencl_mem_t
descsz	bin-file.c	/^	Elf32_Word descsz;  \/* Size of the data payload *\/$/;"	m	struct:pt_note_header_t	file:
device_id	evergreen-emu.h	/^	uint32_t device_id;  \/* Only one device allowed *\/$/;"	m	struct:evg_opencl_program_t
device_id	evergreen-emu.h	/^	uint32_t device_id;$/;"	m	struct:evg_opencl_command_queue_t
device_id	evergreen-emu.h	/^	uint32_t device_id;$/;"	m	struct:evg_opencl_context_t
device_ptr	evergreen-emu.h	/^	uint32_t device_ptr;  \/* Position assigned in device global memory *\/$/;"	m	struct:evg_opencl_mem_t
elem	evergreen-emu.h	/^	uint32_t elem[EVG_MAX_GPR_ELEM];  \/* x, y, z, w, t *\/$/;"	m	struct:evg_gpr_t
elf_file	evergreen-emu.h	/^	struct elf_file_t *elf_file;$/;"	m	struct:evg_bin_file_t	typeref:struct:evg_bin_file_t::elf_file_t
elf_file	evergreen-emu.h	/^	struct elf_file_t *elf_file;$/;"	m	struct:evg_opencl_program_t	typeref:struct:evg_opencl_program_t::elf_file_t
elf_file_list_create	opengl-bin-file.c	/^static struct list_t *elf_file_list_create(void *ptr_buffer, size_t buf_size)$/;"	f	file:
elf_file_list_free	opengl-bin-file.c	/^static void elf_file_list_free(struct list_t * elf_file_list)$/;"	f	file:
emu_inst_count	evergreen-emu.h	/^	long long emu_inst_count;  \/* Total emulated instructions *\/$/;"	m	struct:evg_wavefront_t
emu_time_end	evergreen-emu.h	/^	long long emu_time_end;$/;"	m	struct:evg_wavefront_t
emu_time_start	evergreen-emu.h	/^	long long emu_time_start;$/;"	m	struct:evg_wavefront_t
enc_dict	evergreen-emu.h	/^	struct list_t *enc_dict;$/;"	m	struct:evg_bin_file_t	typeref:struct:evg_bin_file_t::list_t
enc_dict_entry_evergreen	evergreen-emu.h	/^	struct evg_bin_enc_dict_entry_t *enc_dict_entry_evergreen;$/;"	m	struct:evg_bin_file_t	typeref:struct:evg_bin_file_t::evg_bin_enc_dict_entry_t
enc_dict_machine_map	bin-file.c	/^static struct string_map_t enc_dict_machine_map =$/;"	v	typeref:struct:string_map_t	file:
err_evg_isa_note	machine.c	/^char *err_evg_isa_note =$/;"	v
err_evg_opencl_binary_note	opencl.c	/^char *err_evg_opencl_binary_note =$/;"	v
err_evg_opencl_compiler	opencl.c	/^char *err_evg_opencl_compiler =$/;"	v
err_evg_opencl_elf_symbol	opencl-obj.c	/^static char *err_evg_opencl_elf_symbol =$/;"	v	file:
err_evg_opencl_evergreen_format	opencl-obj.c	/^static char *err_evg_opencl_evergreen_format =$/;"	v	file:
err_evg_opencl_kernel_metadata_note	opencl-obj.c	/^static char *err_evg_opencl_kernel_metadata_note =$/;"	v	file:
err_evg_opencl_note	opencl.c	/^char *err_evg_opencl_note =$/;"	v
err_evg_opencl_param_note	opencl.c	/^char *err_evg_opencl_param_note =$/;"	v
err_evg_opencl_version_note	opencl.c	/^char *err_evg_opencl_version_note =$/;"	v
evg_bin_enc_dict_entry_consts_t	evergreen-emu.h	/^struct evg_bin_enc_dict_entry_consts_t$/;"	s
evg_bin_enc_dict_entry_header_t	evergreen-emu.h	/^struct evg_bin_enc_dict_entry_header_t$/;"	s
evg_bin_enc_dict_entry_t	evergreen-emu.h	/^struct evg_bin_enc_dict_entry_t$/;"	s
evg_bin_file_create	bin-file.c	/^struct evg_bin_file_t *evg_bin_file_create(void *ptr, int size, char *name)$/;"	f
evg_bin_file_free	bin-file.c	/^void evg_bin_file_free(struct evg_bin_file_t *bin_file)$/;"	f
evg_bin_file_read_enc_dict	bin-file.c	/^static void evg_bin_file_read_enc_dict(struct evg_bin_file_t *bin_file)$/;"	f	file:
evg_bin_file_read_note_header	bin-file.c	/^static void evg_bin_file_read_note_header(struct evg_bin_file_t *bin_file, struct evg_bin_enc_dict_entry_t *enc_dict_entry)$/;"	f	file:
evg_bin_file_read_notes	bin-file.c	/^static void evg_bin_file_read_notes(struct evg_bin_file_t *bin_file, struct evg_bin_enc_dict_entry_t *enc_dict_entry)$/;"	f	file:
evg_bin_file_read_sections	bin-file.c	/^static void evg_bin_file_read_sections(struct evg_bin_file_t *bin_file)$/;"	f	file:
evg_bin_file_read_segments	bin-file.c	/^static void evg_bin_file_read_segments(struct evg_bin_file_t *bin_file)$/;"	f	file:
evg_bin_file_t	evergreen-emu.h	/^struct evg_bin_file_t$/;"	s
evg_clause_kind_t	evergreen-emu.h	/^enum evg_clause_kind_t$/;"	g
evg_emu	emu.c	/^struct evg_emu_t *evg_emu;$/;"	v	typeref:struct:evg_emu_t
evg_emu_detailed	evergreen-emu.h	/^	evg_emu_detailed$/;"	e	enum:evg_emu_kind_t
evg_emu_disasm	emu.c	/^void evg_emu_disasm(char *path)$/;"	f
evg_emu_done	emu.c	/^void evg_emu_done()$/;"	f
evg_emu_functional	evergreen-emu.h	/^	evg_emu_functional,$/;"	e	enum:evg_emu_kind_t
evg_emu_init	emu.c	/^void evg_emu_init()$/;"	f
evg_emu_kind	emu.c	/^enum evg_emu_kind_t evg_emu_kind = evg_emu_functional;$/;"	v	typeref:enum:evg_emu_kind_t
evg_emu_kind_t	evergreen-emu.h	/^extern enum evg_emu_kind_t$/;"	g
evg_emu_libopencl_failed	emu.c	/^void evg_emu_libopencl_failed(int pid)$/;"	f
evg_emu_libopencl_redirect	emu.c	/^void evg_emu_libopencl_redirect(char *fullpath, int size)$/;"	f
evg_emu_max_cycles	emu.c	/^long long evg_emu_max_cycles = 0;$/;"	v
evg_emu_max_inst	emu.c	/^long long evg_emu_max_inst = 0;$/;"	v
evg_emu_max_kernels	emu.c	/^int evg_emu_max_kernels = 0;$/;"	v
evg_emu_opencl_binary_name	emu.c	/^char *evg_emu_opencl_binary_name = "";$/;"	v
evg_emu_opengl_disasm	emu.c	/^void evg_emu_opengl_disasm(char *path, int opengl_shader_index)$/;"	f
evg_emu_report_file	emu.c	/^FILE *evg_emu_report_file = NULL;$/;"	v
evg_emu_report_file_name	emu.c	/^char *evg_emu_report_file_name = "";$/;"	v
evg_emu_t	evergreen-emu.h	/^struct evg_emu_t$/;"	s
evg_emu_timer	emu.c	/^long long evg_emu_timer(void)$/;"	f
evg_emu_timer_start	emu.c	/^void evg_emu_timer_start(void)$/;"	f
evg_emu_timer_stop	emu.c	/^void evg_emu_timer_stop(void)$/;"	f
evg_emu_wavefront_size	emu.c	/^int evg_emu_wavefront_size = 64;$/;"	v
evg_gpr_t	evergreen-emu.h	/^struct evg_gpr_t$/;"	s
evg_isa_ADDC_UINT_impl	machine.c	/^void evg_isa_ADDC_UINT_impl()$/;"	f
evg_isa_ADD_64_impl	machine.c	/^void evg_isa_ADD_64_impl()$/;"	f
evg_isa_ADD_INT_impl	machine.c	/^void evg_isa_ADD_INT_impl()$/;"	f
evg_isa_ADD_PREV_impl	machine.c	/^void evg_isa_ADD_PREV_impl()$/;"	f
evg_isa_ADD_impl	machine.c	/^void evg_isa_ADD_impl()$/;"	f
evg_isa_ALU_BREAK_impl	machine.c	/^void evg_isa_ALU_BREAK_impl()$/;"	f
evg_isa_ALU_POP2_AFTER_impl	machine.c	/^void evg_isa_ALU_POP2_AFTER_impl()$/;"	f
evg_isa_ALU_POP_AFTER_impl	machine.c	/^void evg_isa_ALU_POP_AFTER_impl()$/;"	f
evg_isa_ALU_PUSH_BEFORE_impl	machine.c	/^void evg_isa_ALU_PUSH_BEFORE_impl()$/;"	f
evg_isa_ALU_impl	machine.c	/^void evg_isa_ALU_impl()$/;"	f
evg_isa_AND_INT_impl	machine.c	/^void evg_isa_AND_INT_impl()$/;"	f
evg_isa_ASHR_INT_impl	machine.c	/^void evg_isa_ASHR_INT_impl()$/;"	f
evg_isa_BCNT_ACCUM_PREV_INT_impl	machine.c	/^void evg_isa_BCNT_ACCUM_PREV_INT_impl()$/;"	f
evg_isa_BCNT_INT_impl	machine.c	/^void evg_isa_BCNT_INT_impl()$/;"	f
evg_isa_BFE_INT_impl	machine.c	/^void evg_isa_BFE_INT_impl()$/;"	f
evg_isa_BFE_UINT_impl	machine.c	/^void evg_isa_BFE_UINT_impl() $/;"	f
evg_isa_BFI_INT_impl	machine.c	/^void evg_isa_BFI_INT_impl()$/;"	f
evg_isa_BFM_INT_impl	machine.c	/^void evg_isa_BFM_INT_impl()$/;"	f
evg_isa_BFREV_INT_impl	machine.c	/^void evg_isa_BFREV_INT_impl()$/;"	f
evg_isa_BIT_ALIGN_INT_impl	machine.c	/^void evg_isa_BIT_ALIGN_INT_impl()$/;"	f
evg_isa_BYTE_ALIGN_INT_impl	machine.c	/^void evg_isa_BYTE_ALIGN_INT_impl()$/;"	f
evg_isa_CALL_FS_impl	machine.c	/^void evg_isa_CALL_FS_impl()$/;"	f
evg_isa_CALL_impl	machine.c	/^void evg_isa_CALL_impl()$/;"	f
evg_isa_CEIL_impl	machine.c	/^void evg_isa_CEIL_impl()$/;"	f
evg_isa_CMNDGE_INT_impl	machine.c	/^void evg_isa_CMNDGE_INT_impl()$/;"	f
evg_isa_CMNDGT_INT_impl	machine.c	/^void evg_isa_CMNDGT_INT_impl()$/;"	f
evg_isa_CNDE_INT_impl	machine.c	/^void evg_isa_CNDE_INT_impl()$/;"	f
evg_isa_CNDE_impl	machine.c	/^void evg_isa_CNDE_impl()$/;"	f
evg_isa_CNDGE_impl	machine.c	/^void evg_isa_CNDGE_impl()$/;"	f
evg_isa_CNDGT_impl	machine.c	/^void evg_isa_CNDGT_impl()$/;"	f
evg_isa_CNDNE_64_impl	machine.c	/^void evg_isa_CNDNE_64_impl()$/;"	f
evg_isa_COS_impl	machine.c	/^void evg_isa_COS_impl()$/;"	f
evg_isa_CUBE_impl	machine.c	/^void evg_isa_CUBE_impl()$/;"	f
evg_isa_CUT_VERTEX_impl	machine.c	/^void evg_isa_CUT_VERTEX_impl()$/;"	f
evg_isa_DOT4_IEEE_impl	machine.c	/^void evg_isa_DOT4_IEEE_impl()$/;"	f
evg_isa_DOT4_impl	machine.c	/^void evg_isa_DOT4_impl()$/;"	f
evg_isa_DOT_IEEE_impl	machine.c	/^void evg_isa_DOT_IEEE_impl()$/;"	f
evg_isa_DOT_impl	machine.c	/^void evg_isa_DOT_impl()$/;"	f
evg_isa_ELSE_impl	machine.c	/^void evg_isa_ELSE_impl()$/;"	f
evg_isa_EMIT_CUT_VERTEX_impl	machine.c	/^void evg_isa_EMIT_CUT_VERTEX_impl()$/;"	f
evg_isa_EMIT_VERTEX_impl	machine.c	/^void evg_isa_EMIT_VERTEX_impl()$/;"	f
evg_isa_EXPORT_DONE_impl	machine.c	/^void evg_isa_EXPORT_DONE_impl()$/;"	f
evg_isa_EXPORT_impl	machine.c	/^void evg_isa_EXPORT_impl()$/;"	f
evg_isa_EXP_IEEE_impl	machine.c	/^void evg_isa_EXP_IEEE_impl()$/;"	f
evg_isa_FETCH_impl	machine.c	/^void evg_isa_FETCH_impl()$/;"	f
evg_isa_FFBH_INT_impl	machine.c	/^void evg_isa_FFBH_INT_impl()$/;"	f
evg_isa_FFBH_UINT_impl	machine.c	/^void evg_isa_FFBH_UINT_impl()$/;"	f
evg_isa_FFBL_INT_impl	machine.c	/^void evg_isa_FFBL_INT_impl()$/;"	f
evg_isa_FLOOR_impl	machine.c	/^void evg_isa_FLOOR_impl() $/;"	f
evg_isa_FLT16_TO_FLT32_impl	machine.c	/^void evg_isa_FLT16_TO_FLT32_impl()$/;"	f
evg_isa_FLT32_TO_FLT16_impl	machine.c	/^void evg_isa_FLT32_TO_FLT16_impl()$/;"	f
evg_isa_FLT32_TO_FLT64_VEC_impl	machine.c	/^void evg_isa_FLT32_TO_FLT64_VEC_impl()$/;"	f
evg_isa_FLT32_TO_FLT64_impl	machine.c	/^void evg_isa_FLT32_TO_FLT64_impl()$/;"	f
evg_isa_FLT64_TO_FLT32_VEC_impl	machine.c	/^void evg_isa_FLT64_TO_FLT32_VEC_impl()$/;"	f
evg_isa_FLT64_TO_FLT32_impl	machine.c	/^void evg_isa_FLT64_TO_FLT32_impl()$/;"	f
evg_isa_FLT_TO_INT_FLOOR_impl	machine.c	/^void evg_isa_FLT_TO_INT_FLOOR_impl()$/;"	f
evg_isa_FLT_TO_INT_RPI_impl	machine.c	/^void evg_isa_FLT_TO_INT_RPI_impl()$/;"	f
evg_isa_FLT_TO_INT_impl	machine.c	/^void evg_isa_FLT_TO_INT_impl()$/;"	f
evg_isa_FLT_TO_UINT4_impl	machine.c	/^void evg_isa_FLT_TO_UINT4_impl()$/;"	f
evg_isa_FLT_TO_UINT_impl	machine.c	/^void evg_isa_FLT_TO_UINT_impl()$/;"	f
evg_isa_FMA_64_impl	machine.c	/^void evg_isa_FMA_64_impl()$/;"	f
evg_isa_FMA_impl	machine.c	/^void evg_isa_FMA_impl()$/;"	f
evg_isa_FRACT_64_impl	machine.c	/^void evg_isa_FRACT_64_impl()$/;"	f
evg_isa_FRACT_impl	machine.c	/^void evg_isa_FRACT_impl()$/;"	f
evg_isa_FREXP_64_impl	machine.c	/^void evg_isa_FREXP_64_impl()$/;"	f
evg_isa_GATHER4_C_O_impl	machine.c	/^void evg_isa_GATHER4_C_O_impl()$/;"	f
evg_isa_GATHER4_C_impl	machine.c	/^void evg_isa_GATHER4_C_impl()$/;"	f
evg_isa_GATHER4_O_impl	machine.c	/^void evg_isa_GATHER4_O_impl()$/;"	f
evg_isa_GATHER4_impl	machine.c	/^void evg_isa_GATHER4_impl()$/;"	f
evg_isa_GDS_impl	machine.c	/^void evg_isa_GDS_impl()$/;"	f
evg_isa_GET_BUFFER_RESINFO_impl	machine.c	/^void evg_isa_GET_BUFFER_RESINFO_impl()$/;"	f
evg_isa_GET_GRADIENTS_H_impl	machine.c	/^void evg_isa_GET_GRADIENTS_H_impl()$/;"	f
evg_isa_GET_GRADIENTS_V_impl	machine.c	/^void evg_isa_GET_GRADIENTS_V_impl()$/;"	f
evg_isa_GET_LOD_impl	machine.c	/^void evg_isa_GET_LOD_impl()$/;"	f
evg_isa_GET_NUMBER_OF_SAMPLES_impl	machine.c	/^void evg_isa_GET_NUMBER_OF_SAMPLES_impl()$/;"	f
evg_isa_GET_TEXTURE_RESINFO_impl	machine.c	/^void evg_isa_GET_TEXTURE_RESINFO_impl()$/;"	f
evg_isa_GROUP_BARRIER_impl	machine.c	/^void evg_isa_GROUP_BARRIER_impl()$/;"	f
evg_isa_GROUP_SEQ_BEGIN_impl	machine.c	/^void evg_isa_GROUP_SEQ_BEGIN_impl()$/;"	f
evg_isa_GROUP_SEQ_END_impl	machine.c	/^void evg_isa_GROUP_SEQ_END_impl()$/;"	f
evg_isa_GWS_BARRIER_impl	machine.c	/^void evg_isa_GWS_BARRIER_impl()$/;"	f
evg_isa_GWS_INIT_impl	machine.c	/^void evg_isa_GWS_INIT_impl()$/;"	f
evg_isa_GWS_SEMA_P_impl	machine.c	/^void evg_isa_GWS_SEMA_P_impl()$/;"	f
evg_isa_GWS_SEMA_V_impl	machine.c	/^void evg_isa_GWS_SEMA_V_impl()$/;"	f
evg_isa_HALT_impl	machine.c	/^void evg_isa_HALT_impl()$/;"	f
evg_isa_INTERP_LOAD_P0_impl	machine.c	/^void evg_isa_INTERP_LOAD_P0_impl()$/;"	f
evg_isa_INTERP_LOAD_P10_impl	machine.c	/^void evg_isa_INTERP_LOAD_P10_impl()$/;"	f
evg_isa_INTERP_LOAD_P20_impl	machine.c	/^void evg_isa_INTERP_LOAD_P20_impl()$/;"	f
evg_isa_INTERP_XY_impl	machine.c	/^void evg_isa_INTERP_XY_impl()$/;"	f
evg_isa_INTERP_X_impl	machine.c	/^void evg_isa_INTERP_X_impl()$/;"	f
evg_isa_INTERP_ZW_impl	machine.c	/^void evg_isa_INTERP_ZW_impl()$/;"	f
evg_isa_INTERP_Z_impl	machine.c	/^void evg_isa_INTERP_Z_impl()$/;"	f
evg_isa_INT_TO_FLT_impl	machine.c	/^void evg_isa_INT_TO_FLT_impl()$/;"	f
evg_isa_JUMPTABLE_impl	machine.c	/^void evg_isa_JUMPTABLE_impl()$/;"	f
evg_isa_JUMP_impl	machine.c	/^void evg_isa_JUMP_impl()$/;"	f
evg_isa_KEEP_GRADIENTS_impl	machine.c	/^void evg_isa_KEEP_GRADIENTS_impl()$/;"	f
evg_isa_KILLE_INT_impl	machine.c	/^void evg_isa_KILLE_INT_impl()$/;"	f
evg_isa_KILLE_impl	machine.c	/^void evg_isa_KILLE_impl()$/;"	f
evg_isa_KILLGE_INT_impl	machine.c	/^void evg_isa_KILLGE_INT_impl()$/;"	f
evg_isa_KILLGE_UINT_impl	machine.c	/^void evg_isa_KILLGE_UINT_impl()$/;"	f
evg_isa_KILLGE_impl	machine.c	/^void evg_isa_KILLGE_impl()$/;"	f
evg_isa_KILLGT_INT_impl	machine.c	/^void evg_isa_KILLGT_INT_impl()$/;"	f
evg_isa_KILLGT_UINT_impl	machine.c	/^void evg_isa_KILLGT_UINT_impl()$/;"	f
evg_isa_KILLGT_impl	machine.c	/^void evg_isa_KILLGT_impl()$/;"	f
evg_isa_KILLNE_INT_impl	machine.c	/^void evg_isa_KILLNE_INT_impl()$/;"	f
evg_isa_KILLNE_impl	machine.c	/^void evg_isa_KILLNE_impl()$/;"	f
evg_isa_KILL_impl	machine.c	/^void evg_isa_KILL_impl()$/;"	f
evg_isa_LDEXP_64_impl	machine.c	/^void evg_isa_LDEXP_64_impl()$/;"	f
evg_isa_LDS_1A1D_impl	machine.c	/^void evg_isa_LDS_1A1D_impl()$/;"	f
evg_isa_LDS_1A_impl	machine.c	/^void evg_isa_LDS_1A_impl()$/;"	f
evg_isa_LDS_2A_impl	machine.c	/^void evg_isa_LDS_2A_impl()$/;"	f
evg_isa_LDS_IDX_OP_impl	machine.c	/^void evg_isa_LDS_IDX_OP_impl()$/;"	f
evg_isa_LD_impl	machine.c	/^void evg_isa_LD_impl()$/;"	f
evg_isa_LERP_UINT_impl	machine.c	/^void evg_isa_LERP_UINT_impl()$/;"	f
evg_isa_LOAD_STORE_FLAGS_impl	machine.c	/^void evg_isa_LOAD_STORE_FLAGS_impl()$/;"	f
evg_isa_LOG_CLAMPED_impl	machine.c	/^void evg_isa_LOG_CLAMPED_impl()$/;"	f
evg_isa_LOG_IEEE_impl	machine.c	/^void evg_isa_LOG_IEEE_impl()$/;"	f
evg_isa_LOOP_BREAK_impl	machine.c	/^void evg_isa_LOOP_BREAK_impl()$/;"	f
evg_isa_LOOP_CONTINUE_impl	machine.c	/^void evg_isa_LOOP_CONTINUE_impl()$/;"	f
evg_isa_LOOP_END_impl	machine.c	/^void evg_isa_LOOP_END_impl()$/;"	f
evg_isa_LOOP_START_DX10_impl	machine.c	/^void evg_isa_LOOP_START_DX10_impl()$/;"	f
evg_isa_LOOP_START_NO_AL_impl	machine.c	/^void evg_isa_LOOP_START_NO_AL_impl()$/;"	f
evg_isa_LSHL_INT_impl	machine.c	/^void evg_isa_LSHL_INT_impl()$/;"	f
evg_isa_LSHR_INT_impl	machine.c	/^void evg_isa_LSHR_INT_impl()$/;"	f
evg_isa_MAX4_impl	machine.c	/^void evg_isa_MAX4_impl()$/;"	f
evg_isa_MAX_64_impl	machine.c	/^void evg_isa_MAX_64_impl()$/;"	f
evg_isa_MAX_DX10_impl	machine.c	/^void evg_isa_MAX_DX10_impl()$/;"	f
evg_isa_MAX_INT_impl	machine.c	/^void evg_isa_MAX_INT_impl()$/;"	f
evg_isa_MAX_UINT_impl	machine.c	/^void evg_isa_MAX_UINT_impl()$/;"	f
evg_isa_MAX_impl	machine.c	/^void evg_isa_MAX_impl()$/;"	f
evg_isa_MBCNT_32HI_INT_impl	machine.c	/^void evg_isa_MBCNT_32HI_INT_impl()$/;"	f
evg_isa_MBCNT_32LO_ACCUM_PREV_INT_impl	machine.c	/^void evg_isa_MBCNT_32LO_ACCUM_PREV_INT_impl()$/;"	f
evg_isa_MEM_EXPORT_COMBINED_impl	machine.c	/^void evg_isa_MEM_EXPORT_COMBINED_impl()$/;"	f
evg_isa_MEM_EXPORT_impl	machine.c	/^void evg_isa_MEM_EXPORT_impl()$/;"	f
evg_isa_MEM_RAT_CACHELESS_impl	machine.c	/^void evg_isa_MEM_RAT_CACHELESS_impl()$/;"	f
evg_isa_MEM_RAT_COMBINED_CACHELESS_impl	machine.c	/^void evg_isa_MEM_RAT_COMBINED_CACHELESS_impl()$/;"	f
evg_isa_MEM_RAT_impl	machine.c	/^void evg_isa_MEM_RAT_impl()$/;"	f
evg_isa_MEM_RING1_impl	machine.c	/^void evg_isa_MEM_RING1_impl()$/;"	f
evg_isa_MEM_RING2_impl	machine.c	/^void evg_isa_MEM_RING2_impl()$/;"	f
evg_isa_MEM_RING3_impl	machine.c	/^void evg_isa_MEM_RING3_impl()$/;"	f
evg_isa_MEM_RING_impl	machine.c	/^void evg_isa_MEM_RING_impl()$/;"	f
evg_isa_MEM_STREAM0_BUF0_impl	machine.c	/^void evg_isa_MEM_STREAM0_BUF0_impl()$/;"	f
evg_isa_MEM_STREAM0_BUF1_impl	machine.c	/^void evg_isa_MEM_STREAM0_BUF1_impl()$/;"	f
evg_isa_MEM_STREAM0_BUF2_impl	machine.c	/^void evg_isa_MEM_STREAM0_BUF2_impl()$/;"	f
evg_isa_MEM_STREAM0_BUF3_impl	machine.c	/^void evg_isa_MEM_STREAM0_BUF3_impl()$/;"	f
evg_isa_MEM_STREAM1_BUF0_impl	machine.c	/^void evg_isa_MEM_STREAM1_BUF0_impl()$/;"	f
evg_isa_MEM_STREAM1_BUF1_impl	machine.c	/^void evg_isa_MEM_STREAM1_BUF1_impl()$/;"	f
evg_isa_MEM_STREAM1_BUF2_impl	machine.c	/^void evg_isa_MEM_STREAM1_BUF2_impl()$/;"	f
evg_isa_MEM_STREAM1_BUF3_impl	machine.c	/^void evg_isa_MEM_STREAM1_BUF3_impl()$/;"	f
evg_isa_MEM_STREAM2_BUF0_impl	machine.c	/^void evg_isa_MEM_STREAM2_BUF0_impl()$/;"	f
evg_isa_MEM_STREAM2_BUF1_impl	machine.c	/^void evg_isa_MEM_STREAM2_BUF1_impl()$/;"	f
evg_isa_MEM_STREAM2_BUF2_impl	machine.c	/^void evg_isa_MEM_STREAM2_BUF2_impl()$/;"	f
evg_isa_MEM_STREAM2_BUF3_impl	machine.c	/^void evg_isa_MEM_STREAM2_BUF3_impl()$/;"	f
evg_isa_MEM_STREAM3_BUF0_impl	machine.c	/^void evg_isa_MEM_STREAM3_BUF0_impl()$/;"	f
evg_isa_MEM_STREAM3_BUF1_impl	machine.c	/^void evg_isa_MEM_STREAM3_BUF1_impl()$/;"	f
evg_isa_MEM_STREAM3_BUF2_impl	machine.c	/^void evg_isa_MEM_STREAM3_BUF2_impl()$/;"	f
evg_isa_MEM_STREAM3_BUF3_impl	machine.c	/^void evg_isa_MEM_STREAM3_BUF3_impl()$/;"	f
evg_isa_MEM_WR_SCRATCH_impl	machine.c	/^void evg_isa_MEM_WR_SCRATCH_impl()$/;"	f
evg_isa_MEM_impl	machine.c	/^void evg_isa_MEM_impl()$/;"	f
evg_isa_MIN_64_impl	machine.c	/^void evg_isa_MIN_64_impl()$/;"	f
evg_isa_MIN_DX10_impl	machine.c	/^void evg_isa_MIN_DX10_impl()$/;"	f
evg_isa_MIN_INT_impl	machine.c	/^void evg_isa_MIN_INT_impl()$/;"	f
evg_isa_MIN_UINT_impl	machine.c	/^void evg_isa_MIN_UINT_impl()$/;"	f
evg_isa_MIN_impl	machine.c	/^void evg_isa_MIN_impl()$/;"	f
evg_isa_MOVA_INT_impl	machine.c	/^void evg_isa_MOVA_INT_impl()$/;"	f
evg_isa_MOV_impl	machine.c	/^void evg_isa_MOV_impl()$/;"	f
evg_isa_MULADD_D2_impl	machine.c	/^void evg_isa_MULADD_D2_impl()$/;"	f
evg_isa_MULADD_IEEE_PREV_impl	machine.c	/^void evg_isa_MULADD_IEEE_PREV_impl()$/;"	f
evg_isa_MULADD_IEEE_impl	machine.c	/^void evg_isa_MULADD_IEEE_impl()$/;"	f
evg_isa_MULADD_M2_impl	machine.c	/^void evg_isa_MULADD_M2_impl()$/;"	f
evg_isa_MULADD_M4_impl	machine.c	/^void evg_isa_MULADD_M4_impl()$/;"	f
evg_isa_MULADD_PREV_impl	machine.c	/^void evg_isa_MULADD_PREV_impl()$/;"	f
evg_isa_MULADD_UINT24_impl	machine.c	/^void evg_isa_MULADD_UINT24_impl()$/;"	f
evg_isa_MULADD_impl	machine.c	/^void evg_isa_MULADD_impl()$/;"	f
evg_isa_MULHI_INT_impl	machine.c	/^void evg_isa_MULHI_INT_impl()$/;"	f
evg_isa_MULHI_UINT24_impl	machine.c	/^void evg_isa_MULHI_UINT24_impl()$/;"	f
evg_isa_MULHI_UINT_impl	machine.c	/^void evg_isa_MULHI_UINT_impl()$/;"	f
evg_isa_MULLO_INT_impl	machine.c	/^void evg_isa_MULLO_INT_impl()$/;"	f
evg_isa_MULLO_UINT_impl	machine.c	/^void evg_isa_MULLO_UINT_impl()$/;"	f
evg_isa_MUL_64_VEC_impl	machine.c	/^void evg_isa_MUL_64_VEC_impl()$/;"	f
evg_isa_MUL_64_impl	machine.c	/^void evg_isa_MUL_64_impl()$/;"	f
evg_isa_MUL_IEEE_PREV_impl	machine.c	/^void evg_isa_MUL_IEEE_PREV_impl()$/;"	f
evg_isa_MUL_IEEE_impl	machine.c	/^void evg_isa_MUL_IEEE_impl()$/;"	f
evg_isa_MUL_LIT_impl	machine.c	/^void evg_isa_MUL_LIT_impl()$/;"	f
evg_isa_MUL_PREV_impl	machine.c	/^void evg_isa_MUL_PREV_impl()$/;"	f
evg_isa_MUL_UINT24_impl	machine.c	/^void evg_isa_MUL_UINT24_impl()$/;"	f
evg_isa_MUL_impl	machine.c	/^void evg_isa_MUL_impl()$/;"	f
evg_isa_NOP_ALU_impl	machine.c	/^void evg_isa_NOP_ALU_impl()$/;"	f
evg_isa_NOP_CF_impl	machine.c	/^void evg_isa_NOP_CF_impl()$/;"	f
evg_isa_NOT_INT_impl	machine.c	/^void evg_isa_NOT_INT_impl()$/;"	f
evg_isa_OFFSET_TO_FLT_impl	machine.c	/^void evg_isa_OFFSET_TO_FLT_impl()$/;"	f
evg_isa_OR_INT_impl	machine.c	/^void evg_isa_OR_INT_impl()$/;"	f
evg_isa_POP_impl	machine.c	/^void evg_isa_POP_impl()$/;"	f
evg_isa_PREDE_INT_impl	machine.c	/^void evg_isa_PREDE_INT_impl()$/;"	f
evg_isa_PRED_SETE_64_impl	machine.c	/^void evg_isa_PRED_SETE_64_impl()$/;"	f
evg_isa_PRED_SETE_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETE_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETE_PUSH_impl	machine.c	/^void evg_isa_PRED_SETE_PUSH_impl()$/;"	f
evg_isa_PRED_SETE_impl	machine.c	/^void evg_isa_PRED_SETE_impl()$/;"	f
evg_isa_PRED_SETGE_64_impl	machine.c	/^void evg_isa_PRED_SETGE_64_impl()$/;"	f
evg_isa_PRED_SETGE_INT_impl	machine.c	/^void evg_isa_PRED_SETGE_INT_impl()$/;"	f
evg_isa_PRED_SETGE_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETGE_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETGE_PUSH_impl	machine.c	/^void evg_isa_PRED_SETGE_PUSH_impl()$/;"	f
evg_isa_PRED_SETGE_UINT_impl	machine.c	/^void evg_isa_PRED_SETGE_UINT_impl()$/;"	f
evg_isa_PRED_SETGE_impl	machine.c	/^void evg_isa_PRED_SETGE_impl()$/;"	f
evg_isa_PRED_SETGT_64_impl	machine.c	/^void evg_isa_PRED_SETGT_64_impl()$/;"	f
evg_isa_PRED_SETGT_INT_impl	machine.c	/^void evg_isa_PRED_SETGT_INT_impl()$/;"	f
evg_isa_PRED_SETGT_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETGT_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETGT_PUSH_impl	machine.c	/^void evg_isa_PRED_SETGT_PUSH_impl()$/;"	f
evg_isa_PRED_SETGT_UINT_impl	machine.c	/^void evg_isa_PRED_SETGT_UINT_impl()$/;"	f
evg_isa_PRED_SETGT_impl	machine.c	/^void evg_isa_PRED_SETGT_impl()$/;"	f
evg_isa_PRED_SETLE_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETLE_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETLT_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETLT_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETNE_INT_impl	machine.c	/^void evg_isa_PRED_SETNE_INT_impl()$/;"	f
evg_isa_PRED_SETNE_PUSH_INT_impl	machine.c	/^void evg_isa_PRED_SETNE_PUSH_INT_impl()$/;"	f
evg_isa_PRED_SETNE_PUSH_impl	machine.c	/^void evg_isa_PRED_SETNE_PUSH_impl()$/;"	f
evg_isa_PRED_SETNE_impl	machine.c	/^void evg_isa_PRED_SETNE_impl()$/;"	f
evg_isa_PRED_SET_CLR_impl	machine.c	/^void evg_isa_PRED_SET_CLR_impl()$/;"	f
evg_isa_PRED_SET_INV_impl	machine.c	/^void evg_isa_PRED_SET_INV_impl()$/;"	f
evg_isa_PRED_SET_POP_impl	machine.c	/^void evg_isa_PRED_SET_POP_impl()$/;"	f
evg_isa_PRED_SET_RESTORE_impl	machine.c	/^void evg_isa_PRED_SET_RESTORE_impl()$/;"	f
evg_isa_PUSH_impl	machine.c	/^void evg_isa_PUSH_impl()$/;"	f
evg_isa_RECIPSQRT_64_impl	machine.c	/^void evg_isa_RECIPSQRT_64_impl()$/;"	f
evg_isa_RECIPSQRT_CLAMPED_64_impl	machine.c	/^void evg_isa_RECIPSQRT_CLAMPED_64_impl()$/;"	f
evg_isa_RECIPSQRT_CLAMPED_impl	machine.c	/^void evg_isa_RECIPSQRT_CLAMPED_impl()$/;"	f
evg_isa_RECIPSQRT_FF_impl	machine.c	/^void evg_isa_RECIPSQRT_FF_impl()$/;"	f
evg_isa_RECIPSQRT_IEEE_impl	machine.c	/^void evg_isa_RECIPSQRT_IEEE_impl()$/;"	f
evg_isa_RECIP_64_impl	machine.c	/^void evg_isa_RECIP_64_impl()$/;"	f
evg_isa_RECIP_CLAMPED_64_impl	machine.c	/^void evg_isa_RECIP_CLAMPED_64_impl()$/;"	f
evg_isa_RECIP_CLAMPED_impl	machine.c	/^void evg_isa_RECIP_CLAMPED_impl()$/;"	f
evg_isa_RECIP_FF_impl	machine.c	/^void evg_isa_RECIP_FF_impl()$/;"	f
evg_isa_RECIP_IEEE_impl	machine.c	/^void evg_isa_RECIP_IEEE_impl()$/;"	f
evg_isa_RECIP_INT_impl	machine.c	/^void evg_isa_RECIP_INT_impl()$/;"	f
evg_isa_RECIP_UINT_impl	machine.c	/^void evg_isa_RECIP_UINT_impl()$/;"	f
evg_isa_RETURN_impl	machine.c	/^void evg_isa_RETURN_impl()$/;"	f
evg_isa_RNDNE_impl	machine.c	/^void evg_isa_RNDNE_impl()$/;"	f
evg_isa_SAD_ACCUM_HI_UINT_impl	machine.c	/^void evg_isa_SAD_ACCUM_HI_UINT_impl()$/;"	f
evg_isa_SAD_ACCUM_PREV_UINT_impl	machine.c	/^void evg_isa_SAD_ACCUM_PREV_UINT_impl()$/;"	f
evg_isa_SAD_ACCUM_UINT_impl	machine.c	/^void evg_isa_SAD_ACCUM_UINT_impl()$/;"	f
evg_isa_SAMPLE_C_G_LB_impl	machine.c	/^void evg_isa_SAMPLE_C_G_LB_impl()$/;"	f
evg_isa_SAMPLE_C_G_impl	machine.c	/^void evg_isa_SAMPLE_C_G_impl()$/;"	f
evg_isa_SAMPLE_C_LB_impl	machine.c	/^void evg_isa_SAMPLE_C_LB_impl()$/;"	f
evg_isa_SAMPLE_C_LZ_impl	machine.c	/^void evg_isa_SAMPLE_C_LZ_impl()$/;"	f
evg_isa_SAMPLE_C_L_impl	machine.c	/^void evg_isa_SAMPLE_C_L_impl()$/;"	f
evg_isa_SAMPLE_C_impl	machine.c	/^void evg_isa_SAMPLE_C_impl()$/;"	f
evg_isa_SAMPLE_G_LB_impl	machine.c	/^void evg_isa_SAMPLE_G_LB_impl()$/;"	f
evg_isa_SAMPLE_G_impl	machine.c	/^void evg_isa_SAMPLE_G_impl()$/;"	f
evg_isa_SAMPLE_LB_impl	machine.c	/^void evg_isa_SAMPLE_LB_impl()$/;"	f
evg_isa_SAMPLE_LZ_impl	machine.c	/^void evg_isa_SAMPLE_LZ_impl()$/;"	f
evg_isa_SAMPLE_L_impl	machine.c	/^void evg_isa_SAMPLE_L_impl()$/;"	f
evg_isa_SAMPLE_impl	machine.c	/^void evg_isa_SAMPLE_impl()$/;"	f
evg_isa_SEMANTIC_impl	machine.c	/^void evg_isa_SEMANTIC_impl()$/;"	f
evg_isa_SETE_64_impl	machine.c	/^void evg_isa_SETE_64_impl()$/;"	f
evg_isa_SETE_DX10_impl	machine.c	/^void evg_isa_SETE_DX10_impl()$/;"	f
evg_isa_SETE_INT_impl	machine.c	/^void evg_isa_SETE_INT_impl()$/;"	f
evg_isa_SETE_impl	machine.c	/^void evg_isa_SETE_impl()$/;"	f
evg_isa_SETGE_64_impl	machine.c	/^void evg_isa_SETGE_64_impl()$/;"	f
evg_isa_SETGE_DX10_impl	machine.c	/^void evg_isa_SETGE_DX10_impl()$/;"	f
evg_isa_SETGE_INT_impl	machine.c	/^void evg_isa_SETGE_INT_impl()$/;"	f
evg_isa_SETGE_UINT_impl	machine.c	/^void evg_isa_SETGE_UINT_impl()$/;"	f
evg_isa_SETGE_impl	machine.c	/^void evg_isa_SETGE_impl()$/;"	f
evg_isa_SETGT_64_impl	machine.c	/^void evg_isa_SETGT_64_impl()$/;"	f
evg_isa_SETGT_DX10_impl	machine.c	/^void evg_isa_SETGT_DX10_impl()$/;"	f
evg_isa_SETGT_INT_impl	machine.c	/^void evg_isa_SETGT_INT_impl()$/;"	f
evg_isa_SETGT_UINT_impl	machine.c	/^void evg_isa_SETGT_UINT_impl()$/;"	f
evg_isa_SETGT_impl	machine.c	/^void evg_isa_SETGT_impl()$/;"	f
evg_isa_SETNE_64_impl	machine.c	/^void evg_isa_SETNE_64_impl()$/;"	f
evg_isa_SETNE_DX10_impl	machine.c	/^void evg_isa_SETNE_DX10_impl()$/;"	f
evg_isa_SETNE_INT_impl	machine.c	/^void evg_isa_SETNE_INT_impl()$/;"	f
evg_isa_SETNE_impl	machine.c	/^void evg_isa_SETNE_impl()$/;"	f
evg_isa_SET_CF_IDX0_impl	machine.c	/^void evg_isa_SET_CF_IDX0_impl()$/;"	f
evg_isa_SET_CF_IDX1_impl	machine.c	/^void evg_isa_SET_CF_IDX1_impl()$/;"	f
evg_isa_SET_GRADIENTS_H_impl	machine.c	/^void evg_isa_SET_GRADIENTS_H_impl()$/;"	f
evg_isa_SET_GRADIENTS_V_impl	machine.c	/^void evg_isa_SET_GRADIENTS_V_impl()$/;"	f
evg_isa_SET_LDS_SIZE_impl	machine.c	/^void evg_isa_SET_LDS_SIZE_impl()$/;"	f
evg_isa_SET_MODE_impl	machine.c	/^void evg_isa_SET_MODE_impl()$/;"	f
evg_isa_SET_TEXTURE_OFFSETS_impl	machine.c	/^void evg_isa_SET_TEXTURE_OFFSETS_impl()$/;"	f
evg_isa_SIN_impl	machine.c	/^void evg_isa_SIN_impl()$/;"	f
evg_isa_SQRT_64_impl	machine.c	/^void evg_isa_SQRT_64_impl()$/;"	f
evg_isa_SQRT_IEEE_impl	machine.c	/^void evg_isa_SQRT_IEEE_impl()$/;"	f
evg_isa_STORE_FLAGS_impl	machine.c	/^void evg_isa_STORE_FLAGS_impl()$/;"	f
evg_isa_SUBB_UINT_impl	machine.c	/^void evg_isa_SUBB_UINT_impl()$/;"	f
evg_isa_SUB_INT_impl	machine.c	/^void evg_isa_SUB_INT_impl()$/;"	f
evg_isa_TC_ACK_impl	machine.c	/^void evg_isa_TC_ACK_impl()$/;"	f
evg_isa_TC_impl	machine.c	/^void evg_isa_TC_impl()$/;"	f
evg_isa_TRUNC_impl	machine.c	/^void evg_isa_TRUNC_impl()$/;"	f
evg_isa_UBYTE0_FLT_impl	machine.c	/^void evg_isa_UBYTE0_FLT_impl()$/;"	f
evg_isa_UBYTE1_FLT_impl	machine.c	/^void evg_isa_UBYTE1_FLT_impl()$/;"	f
evg_isa_UBYTE2_FLT_impl	machine.c	/^void evg_isa_UBYTE2_FLT_impl()$/;"	f
evg_isa_UBYTE3_FLT_impl	machine.c	/^void evg_isa_UBYTE3_FLT_impl()$/;"	f
evg_isa_UINT_TO_FLT_impl	machine.c	/^void evg_isa_UINT_TO_FLT_impl()$/;"	f
evg_isa_VC_ACK_impl	machine.c	/^void evg_isa_VC_ACK_impl()$/;"	f
evg_isa_VC_impl	machine.c	/^void evg_isa_VC_impl()$/;"	f
evg_isa_WAIT_ACK_impl	machine.c	/^void evg_isa_WAIT_ACK_impl()$/;"	f
evg_isa_XOR_INT_impl	machine.c	/^void evg_isa_XOR_INT_impl()$/;"	f
evg_isa_alu_clause_end	isa.c	/^void evg_isa_alu_clause_end()$/;"	f
evg_isa_alu_clause_start	isa.c	/^void evg_isa_alu_clause_start()$/;"	f
evg_isa_alu_group	isa.c	/^struct evg_alu_group_t *evg_isa_alu_group;  \/* Current ALU group *\/$/;"	v	typeref:struct:evg_alu_group_t
evg_isa_cf_inst	isa.c	/^struct evg_inst_t *evg_isa_cf_inst;  \/* Current CF instruction *\/$/;"	v	typeref:struct:evg_inst_t
evg_isa_const_mem_read	isa.c	/^void evg_isa_const_mem_read(int bank, int vector, int elem, void *pvalue)$/;"	f
evg_isa_const_mem_write	isa.c	/^void evg_isa_const_mem_write(int bank, int vector, int elem, void *pvalue)$/;"	f
evg_isa_debug	evergreen-emu.h	1028;"	d
evg_isa_debug_category	isa.c	/^int evg_isa_debug_category;$/;"	v
evg_isa_debugging	evergreen-emu.h	1027;"	d
evg_isa_done	isa.c	/^void evg_isa_done()$/;"	f
evg_isa_enqueue_pred_set	isa.c	/^void evg_isa_enqueue_pred_set(int cond)$/;"	f
evg_isa_enqueue_push_before	isa.c	/^void evg_isa_enqueue_push_before(void)$/;"	f
evg_isa_enqueue_write_dest	isa.c	/^void evg_isa_enqueue_write_dest(uint32_t value)$/;"	f
evg_isa_enqueue_write_dest_float	isa.c	/^void evg_isa_enqueue_write_dest_float(float value)$/;"	f
evg_isa_enqueue_write_lds	isa.c	/^void evg_isa_enqueue_write_lds(uint32_t addr, uint32_t value, size_t value_size)$/;"	f
evg_isa_init	isa.c	/^void evg_isa_init()$/;"	f
evg_isa_inst	isa.c	/^struct evg_inst_t *evg_isa_inst;  \/* Current instruction *\/$/;"	v	typeref:struct:evg_inst_t
evg_isa_inst_func	isa.c	/^evg_isa_inst_func_t *evg_isa_inst_func;$/;"	v
evg_isa_inst_func_t	evergreen-emu.h	/^typedef void (*evg_isa_inst_func_t)(void);$/;"	t
evg_isa_ndrange	isa.c	/^struct evg_ndrange_t *evg_isa_ndrange;  \/* Current ND-Range *\/$/;"	v	typeref:struct:evg_ndrange_t
evg_isa_read_gpr	isa.c	/^unsigned int evg_isa_read_gpr(int gpr, int rel, int chan, int im)$/;"	f
evg_isa_read_gpr_float	isa.c	/^float evg_isa_read_gpr_float(int gpr, int rel, int chan, int im)$/;"	f
evg_isa_read_op_src_float	isa.c	/^float evg_isa_read_op_src_float(int src_idx)$/;"	f
evg_isa_read_op_src_int	isa.c	/^unsigned int evg_isa_read_op_src_int(int src_idx)$/;"	f
evg_isa_tc_clause_end	isa.c	/^void evg_isa_tc_clause_end()$/;"	f
evg_isa_tc_clause_start	isa.c	/^void evg_isa_tc_clause_start()$/;"	f
evg_isa_wavefront	isa.c	/^struct evg_wavefront_t *evg_isa_wavefront;  \/* Current wavefront *\/$/;"	v	typeref:struct:evg_wavefront_t
evg_isa_work_group	isa.c	/^struct evg_work_group_t *evg_isa_work_group;  \/* Current work-group *\/$/;"	v	typeref:struct:evg_work_group_t
evg_isa_work_item	isa.c	/^struct evg_work_item_t *evg_isa_work_item;  \/* Current work-item *\/$/;"	v	typeref:struct:evg_work_item_t
evg_isa_write_gpr	isa.c	/^void evg_isa_write_gpr(int gpr, int rel, int chan, uint32_t value)$/;"	f
evg_isa_write_gpr_float	isa.c	/^void evg_isa_write_gpr_float(int gpr, int rel, int chan, float value)$/;"	f
evg_isa_write_task_commit	isa.c	/^void evg_isa_write_task_commit(void)$/;"	f
evg_isa_write_task_kind_t	evergreen-emu.h	/^enum evg_isa_write_task_kind_t$/;"	g
evg_isa_write_task_repos	isa.c	/^struct repos_t *evg_isa_write_task_repos;$/;"	v	typeref:struct:repos_t
evg_isa_write_task_t	evergreen-emu.h	/^struct evg_isa_write_task_t$/;"	s
evg_mem_access_t	evergreen-emu.h	/^struct evg_mem_access_t$/;"	s
evg_ndrange_create	ndrange.c	/^struct evg_ndrange_t *evg_ndrange_create(struct evg_opencl_kernel_t *kernel)$/;"	f
evg_ndrange_dump	ndrange.c	/^void evg_ndrange_dump(struct evg_ndrange_t *ndrange, FILE *f)$/;"	f
evg_ndrange_free	ndrange.c	/^void evg_ndrange_free(struct evg_ndrange_t *ndrange)$/;"	f
evg_ndrange_run	ndrange.c	/^void evg_ndrange_run(struct evg_ndrange_t *ndrange)$/;"	f
evg_ndrange_setup_args	ndrange.c	/^void evg_ndrange_setup_args(struct evg_ndrange_t *ndrange)$/;"	f
evg_ndrange_setup_const_mem	ndrange.c	/^void evg_ndrange_setup_const_mem(struct evg_ndrange_t *ndrange)$/;"	f
evg_ndrange_setup_work_items	ndrange.c	/^void evg_ndrange_setup_work_items(struct evg_ndrange_t *ndrange)$/;"	f
evg_ndrange_t	evergreen-emu.h	/^struct evg_ndrange_t$/;"	s
evg_opencl_command_queue_create	opencl-obj.c	/^struct evg_opencl_command_queue_t *evg_opencl_command_queue_create()$/;"	f
evg_opencl_command_queue_free	opencl-obj.c	/^void evg_opencl_command_queue_free(struct evg_opencl_command_queue_t *command_queue)$/;"	f
evg_opencl_command_queue_t	evergreen-emu.h	/^struct evg_opencl_command_queue_t$/;"	s
evg_opencl_context_create	opencl-obj.c	/^struct evg_opencl_context_t *evg_opencl_context_create()$/;"	f
evg_opencl_context_free	opencl-obj.c	/^void evg_opencl_context_free(struct evg_opencl_context_t *context)$/;"	f
evg_opencl_context_get_info	opencl-obj.c	/^uint32_t evg_opencl_context_get_info(struct evg_opencl_context_t *context, uint32_t name, struct mem_t *mem, uint32_t addr, uint32_t size)$/;"	f
evg_opencl_context_set_properties	opencl-obj.c	/^void evg_opencl_context_set_properties(struct evg_opencl_context_t *context, struct mem_t *mem, uint32_t addr)$/;"	f
evg_opencl_context_t	evergreen-emu.h	/^struct evg_opencl_context_t$/;"	s
evg_opencl_debug	evergreen-emu.h	167;"	d
evg_opencl_debug_array	opencl.c	/^static void evg_opencl_debug_array(int nelem, int *array)$/;"	f	file:
evg_opencl_debug_category	opencl.c	/^int evg_opencl_debug_category;$/;"	v
evg_opencl_device_create	opencl-obj.c	/^struct evg_opencl_device_t *evg_opencl_device_create()$/;"	f
evg_opencl_device_free	opencl-obj.c	/^void evg_opencl_device_free(struct evg_opencl_device_t *device)$/;"	f
evg_opencl_device_get_info	opencl-obj.c	/^uint32_t evg_opencl_device_get_info(struct evg_opencl_device_t *device, uint32_t name, struct mem_t *mem, uint32_t addr, uint32_t size)$/;"	f
evg_opencl_device_t	evergreen-emu.h	/^struct evg_opencl_device_t$/;"	s
evg_opencl_event_create	opencl-obj.c	/^struct evg_opencl_event_t *evg_opencl_event_create(enum evg_opencl_event_kind_t kind)$/;"	f
evg_opencl_event_free	opencl-obj.c	/^void evg_opencl_event_free(struct evg_opencl_event_t *event)$/;"	f
evg_opencl_event_get_profiling_info	opencl-obj.c	/^uint32_t evg_opencl_event_get_profiling_info(struct evg_opencl_event_t *event, uint32_t name,$/;"	f
evg_opencl_event_kind_t	evergreen-emu.h	/^enum evg_opencl_event_kind_t$/;"	g
evg_opencl_event_status_t	evergreen-emu.h	/^enum evg_opencl_event_status_t$/;"	g
evg_opencl_event_t	evergreen-emu.h	/^struct evg_opencl_event_t$/;"	s
evg_opencl_event_timer	opencl-obj.c	/^long long evg_opencl_event_timer(void)$/;"	f
evg_opencl_func_argc	opencl.c	/^int evg_opencl_func_argc[] = {$/;"	v
evg_opencl_func_names	opencl.c	/^char *evg_opencl_func_names[] = {$/;"	v
evg_opencl_func_run	opencl.c	/^int evg_opencl_func_run(int code, unsigned int *args)$/;"	f
evg_opencl_func_t	evergreen-emu.h	/^enum evg_opencl_func_t$/;"	g
evg_opencl_image_format_t	evergreen-emu.h	/^struct evg_opencl_image_format_t$/;"	s
evg_opencl_kernel_arg_access_type_t	evergreen-emu.h	/^enum evg_opencl_kernel_arg_access_type_t$/;"	g
evg_opencl_kernel_arg_create	opencl-obj.c	/^struct evg_opencl_kernel_arg_t *evg_opencl_kernel_arg_create(char *name)$/;"	f
evg_opencl_kernel_arg_free	opencl-obj.c	/^void evg_opencl_kernel_arg_free(struct evg_opencl_kernel_arg_t *arg)$/;"	f
evg_opencl_kernel_arg_kind_t	evergreen-emu.h	/^enum evg_opencl_kernel_arg_kind_t$/;"	g
evg_opencl_kernel_arg_t	evergreen-emu.h	/^struct evg_opencl_kernel_arg_t$/;"	s
evg_opencl_kernel_create	opencl-obj.c	/^struct evg_opencl_kernel_t *evg_opencl_kernel_create()$/;"	f
evg_opencl_kernel_free	opencl-obj.c	/^void evg_opencl_kernel_free(struct evg_opencl_kernel_t *kernel)$/;"	f
evg_opencl_kernel_get_work_group_info	opencl-obj.c	/^uint32_t evg_opencl_kernel_get_work_group_info(struct evg_opencl_kernel_t *kernel, uint32_t name,$/;"	f
evg_opencl_kernel_load	opencl-obj.c	/^void evg_opencl_kernel_load(struct evg_opencl_kernel_t *kernel, char *kernel_name)$/;"	f
evg_opencl_kernel_load_metadata	opencl-obj.c	/^static void evg_opencl_kernel_load_metadata(struct evg_opencl_kernel_t *kernel)$/;"	f	file:
evg_opencl_kernel_t	evergreen-emu.h	/^struct evg_opencl_kernel_t$/;"	s
evg_opencl_mem_create	opencl-obj.c	/^struct evg_opencl_mem_t *evg_opencl_mem_create()$/;"	f
evg_opencl_mem_free	opencl-obj.c	/^void evg_opencl_mem_free(struct evg_opencl_mem_t *mem)$/;"	f
evg_opencl_mem_scope_t	evergreen-emu.h	/^enum evg_opencl_mem_scope_t$/;"	g
evg_opencl_mem_t	evergreen-emu.h	/^struct evg_opencl_mem_t$/;"	s
evg_opencl_obj_t	evergreen-emu.h	/^enum evg_opencl_obj_t$/;"	g
evg_opencl_object_add	opencl-obj.c	/^void evg_opencl_object_add(void *object)$/;"	f
evg_opencl_object_free_all	opencl-obj.c	/^void evg_opencl_object_free_all()$/;"	f
evg_opencl_object_get	opencl-obj.c	/^void *evg_opencl_object_get(enum evg_opencl_obj_t type, uint32_t id)$/;"	f
evg_opencl_object_get_type	opencl-obj.c	/^void *evg_opencl_object_get_type(enum evg_opencl_obj_t type)$/;"	f
evg_opencl_object_list	opencl-obj.c	/^struct linked_list_t *evg_opencl_object_list;$/;"	v	typeref:struct:linked_list_t
evg_opencl_object_new_id	opencl-obj.c	/^uint32_t evg_opencl_object_new_id(enum evg_opencl_obj_t type)$/;"	f
evg_opencl_object_remove	opencl-obj.c	/^void evg_opencl_object_remove(void *object)$/;"	f
evg_opencl_platform	opencl-obj.c	/^struct evg_opencl_platform_t *evg_opencl_platform;$/;"	v	typeref:struct:evg_opencl_platform_t
evg_opencl_platform_create	opencl-obj.c	/^struct evg_opencl_platform_t *evg_opencl_platform_create()$/;"	f
evg_opencl_platform_free	opencl-obj.c	/^void evg_opencl_platform_free(struct evg_opencl_platform_t *platform)$/;"	f
evg_opencl_platform_get_info	opencl-obj.c	/^uint32_t evg_opencl_platform_get_info(struct evg_opencl_platform_t *platform, uint32_t name, struct mem_t *mem, uint32_t addr, uint32_t size)$/;"	f
evg_opencl_platform_t	evergreen-emu.h	/^struct evg_opencl_platform_t$/;"	s
evg_opencl_program_build	opencl-obj.c	/^void evg_opencl_program_build(struct evg_opencl_program_t *program)$/;"	f
evg_opencl_program_create	opencl-obj.c	/^struct evg_opencl_program_t *evg_opencl_program_create()$/;"	f
evg_opencl_program_free	opencl-obj.c	/^void evg_opencl_program_free(struct evg_opencl_program_t *program)$/;"	f
evg_opencl_program_initialize_constant_buffers	opencl-obj.c	/^void evg_opencl_program_initialize_constant_buffers(struct evg_opencl_program_t *program)$/;"	f
evg_opencl_program_t	evergreen-emu.h	/^struct evg_opencl_program_t$/;"	s
evg_opencl_sampler_create	opencl-obj.c	/^struct evg_opencl_sampler_t *evg_opencl_sampler_create()$/;"	f
evg_opencl_sampler_free	opencl-obj.c	/^void evg_opencl_sampler_free(struct evg_opencl_sampler_t *sampler)$/;"	f
evg_opencl_sampler_t	evergreen-emu.h	/^struct evg_opencl_sampler_t$/;"	s
evg_opencl_syscall	opencl-syscall.c	/^int evg_opencl_syscall(int code, unsigned int *args)$/;"	f
evg_opengl_bin_file_create	opengl-bin-file.c	/^struct evg_opengl_bin_file_t *evg_opengl_bin_file_create(void *ptr, int size, char *name)$/;"	f
evg_opengl_bin_file_free	opengl-bin-file.c	/^void evg_opengl_bin_file_free(struct evg_opengl_bin_file_t *bin_file)$/;"	f
evg_opengl_bin_file_t	evergreen-emu.h	/^struct evg_opengl_bin_file_t$/;"	s
evg_opengl_shader_kind_t	evergreen-emu.h	/^enum evg_opengl_shader_kind_t$/;"	g
evg_opengl_shader_t	evergreen-emu.h	/^struct evg_opengl_shader_t$/;"	s
evg_wavefront_create	wavefront.c	/^struct evg_wavefront_t *evg_wavefront_create()$/;"	f
evg_wavefront_divergence_compare	wavefront.c	/^static int evg_wavefront_divergence_compare(const void *elem1, const void *elem2)$/;"	f	file:
evg_wavefront_divergence_dump	wavefront.c	/^static void evg_wavefront_divergence_dump(struct evg_wavefront_t *wavefront, FILE *f)$/;"	f	file:
evg_wavefront_dump	wavefront.c	/^void evg_wavefront_dump(struct evg_wavefront_t *wavefront, FILE *f)$/;"	f
evg_wavefront_execute	wavefront.c	/^void evg_wavefront_execute(struct evg_wavefront_t *wavefront)$/;"	f
evg_wavefront_free	wavefront.c	/^void evg_wavefront_free(struct evg_wavefront_t *wavefront)$/;"	f
evg_wavefront_stack_pop	wavefront.c	/^void evg_wavefront_stack_pop(struct evg_wavefront_t *wavefront, int count)$/;"	f
evg_wavefront_stack_push	wavefront.c	/^void evg_wavefront_stack_push(struct evg_wavefront_t *wavefront)$/;"	f
evg_wavefront_t	evergreen-emu.h	/^struct evg_wavefront_t$/;"	s
evg_work_group_clear_status	work-group.c	/^void evg_work_group_clear_status(struct evg_work_group_t *work_group, enum evg_work_group_status_t status)$/;"	f
evg_work_group_create	work-group.c	/^struct evg_work_group_t *evg_work_group_create(char *name)$/;"	f
evg_work_group_dump	work-group.c	/^void evg_work_group_dump(struct evg_work_group_t *work_group, FILE *f)$/;"	f
evg_work_group_finished	evergreen-emu.h	/^	evg_work_group_finished		= 0x0004$/;"	e	enum:evg_work_group_status_t
evg_work_group_free	work-group.c	/^void evg_work_group_free(struct evg_work_group_t *work_group)$/;"	f
evg_work_group_get_status	work-group.c	/^int evg_work_group_get_status(struct evg_work_group_t *work_group, enum evg_work_group_status_t status)$/;"	f
evg_work_group_pending	evergreen-emu.h	/^	evg_work_group_pending		= 0x0001,$/;"	e	enum:evg_work_group_status_t
evg_work_group_running	evergreen-emu.h	/^	evg_work_group_running		= 0x0002,$/;"	e	enum:evg_work_group_status_t
evg_work_group_set_status	work-group.c	/^void evg_work_group_set_status(struct evg_work_group_t *work_group, enum evg_work_group_status_t status)$/;"	f
evg_work_group_status_t	evergreen-emu.h	/^enum evg_work_group_status_t$/;"	g
evg_work_group_t	evergreen-emu.h	/^struct evg_work_group_t$/;"	s
evg_work_item_create	work-item.c	/^struct evg_work_item_t *evg_work_item_create()$/;"	f
evg_work_item_free	work-item.c	/^void evg_work_item_free(struct evg_work_item_t *work_item)$/;"	f
evg_work_item_get_active	work-item.c	/^int evg_work_item_get_active(struct evg_work_item_t *work_item)$/;"	f
evg_work_item_get_pred	work-item.c	/^int evg_work_item_get_pred(struct evg_work_item_t *work_item)$/;"	f
evg_work_item_set_active	work-item.c	/^void evg_work_item_set_active(struct evg_work_item_t *work_item, int active)$/;"	f
evg_work_item_set_pred	work-item.c	/^void evg_work_item_set_pred(struct evg_work_item_t *work_item, int pred)$/;"	f
evg_work_item_t	evergreen-emu.h	/^struct evg_work_item_t$/;"	s
evg_work_item_update_branch_digest	work-item.c	/^void evg_work_item_update_branch_digest(struct evg_work_item_t *work_item,$/;"	f
external_elf_file	evergreen-emu.h	/^	struct elf_file_t *external_elf_file;$/;"	m	struct:evg_opengl_shader_t	typeref:struct:evg_opengl_shader_t::elf_file_t
external_elf_file_create	opengl-bin-file.c	/^static struct elf_file_t *external_elf_file_create(void *ptr_buffer, int buf_size, struct list_t *elf_offset_list, int elf_file_index, char *name)$/;"	f	file:
external_elf_file_free	opengl-bin-file.c	/^static void external_elf_file_free(struct elf_file_t *external_elf_file)$/;"	f	file:
external_elf_file_list_create	opengl-bin-file.c	/^static struct list_t *external_elf_file_list_create(void *ptr_buffer, size_t buf_size)$/;"	f	file:
external_elf_file_list_free	opengl-bin-file.c	/^static void external_elf_file_list_free(struct list_t *elf_external_file_list)$/;"	f	file:
filter_mode	evergreen-emu.h	/^	uint32_t filter_mode;$/;"	m	struct:evg_opencl_sampler_t
finished_list_count	evergreen-emu.h	/^	int finished_list_count;$/;"	m	struct:evg_ndrange_t
finished_list_count	evergreen-emu.h	/^	int finished_list_count;$/;"	m	struct:evg_work_group_t
finished_list_head	evergreen-emu.h	/^	struct evg_wavefront_t *finished_list_head;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
finished_list_head	evergreen-emu.h	/^	struct evg_work_group_t *finished_list_head;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
finished_list_max	evergreen-emu.h	/^	int finished_list_max;$/;"	m	struct:evg_ndrange_t
finished_list_max	evergreen-emu.h	/^	int finished_list_max;$/;"	m	struct:evg_work_group_t
finished_list_next	evergreen-emu.h	/^	struct evg_wavefront_t *finished_list_next;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
finished_list_next	evergreen-emu.h	/^	struct evg_work_group_t *finished_list_next;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
finished_list_prev	evergreen-emu.h	/^	struct evg_wavefront_t *finished_list_prev;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
finished_list_prev	evergreen-emu.h	/^	struct evg_work_group_t *finished_list_prev;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
finished_list_tail	evergreen-emu.h	/^	struct evg_wavefront_t *finished_list_tail;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
finished_list_tail	evergreen-emu.h	/^	struct evg_work_group_t *finished_list_tail;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
flags	evergreen-emu.h	/^	uint32_t flags;$/;"	m	struct:evg_opencl_mem_t
float_consts	evergreen-emu.h	/^	float float_consts[256][4];$/;"	m	struct:evg_bin_enc_dict_entry_consts_t
func_file	evergreen-emu.h	/^	FILE *func_file;$/;"	m	struct:evg_opencl_kernel_t
func_file_name	evergreen-emu.h	/^	char func_file_name[MAX_PATH_SIZE];$/;"	m	struct:evg_opencl_kernel_t
func_mem_local	evergreen-emu.h	/^	int func_mem_local;  \/* Local memory usage *\/$/;"	m	struct:evg_opencl_kernel_t
func_uniqueid	evergreen-emu.h	/^	int func_uniqueid;  \/* Id of kernel function *\/$/;"	m	struct:evg_opencl_kernel_t
get_isa_offset	opengl-bin-file.c	/^static int get_isa_offset(struct evg_opengl_shader_t *opengl_shader)$/;"	f	file:
global_mem	evergreen-emu.h	/^	struct mem_t *global_mem;$/;"	m	struct:evg_emu_t	typeref:struct:evg_emu_t::mem_t
global_mem_access_addr	evergreen-emu.h	/^	uint32_t global_mem_access_addr;$/;"	m	struct:evg_work_item_t
global_mem_access_size	evergreen-emu.h	/^	uint32_t global_mem_access_size;$/;"	m	struct:evg_work_item_t
global_mem_inst_count	evergreen-emu.h	/^	long long global_mem_inst_count;  \/* Instructions (CF or TC) accessing global memory *\/$/;"	m	struct:evg_wavefront_t
global_mem_read	evergreen-emu.h	/^	unsigned int global_mem_read : 1;$/;"	m	struct:evg_wavefront_t
global_mem_top	evergreen-emu.h	/^	unsigned int global_mem_top;$/;"	m	struct:evg_emu_t
global_mem_write	evergreen-emu.h	/^	unsigned int global_mem_write : 1;$/;"	m	struct:evg_wavefront_t
global_size	evergreen-emu.h	/^	int global_size;$/;"	m	struct:evg_opencl_kernel_t
global_size3	evergreen-emu.h	/^	int global_size3[3];  \/* Total number of work_items *\/$/;"	m	struct:evg_opencl_kernel_t
gpr	evergreen-emu.h	/^	int gpr, rel, chan, index_mode, write_mask;$/;"	m	struct:evg_isa_write_task_t
gpr	evergreen-emu.h	/^	struct evg_gpr_t gpr[128];  \/* General purpose registers *\/$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::evg_gpr_t
gpu_isa_dest_value_dump	isa.c	/^void gpu_isa_dest_value_dump(void *value_ptr, FILE *f)$/;"	f
gpu_isa_read_op_src_common	isa.c	/^static uint32_t gpu_isa_read_op_src_common(int src_idx, int *neg_ptr, int *abs_ptr)$/;"	f	file:
group_count	evergreen-emu.h	/^	int group_count;$/;"	m	struct:evg_opencl_kernel_t
group_count3	evergreen-emu.h	/^	int group_count3[3];  \/* Number of work_item groups *\/$/;"	m	struct:evg_opencl_kernel_t
header	evergreen-emu.h	/^	struct evg_bin_enc_dict_entry_header_t *header;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::evg_bin_enc_dict_entry_header_t
header_buffer	evergreen-emu.h	/^	struct elf_buffer_t header_buffer;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::elf_buffer_t
height	evergreen-emu.h	/^	uint32_t height;$/;"	m	struct:evg_opencl_mem_t
host_ptr	evergreen-emu.h	/^	uint32_t host_ptr;$/;"	m	struct:evg_opencl_mem_t
id	evergreen-emu.h	/^	int id;  \/* Group ID *\/$/;"	m	struct:evg_work_group_t
id	evergreen-emu.h	/^	int id;  \/* Sequential ndrange ID (given by evg_emu->ndrange_count counter) *\/$/;"	m	struct:evg_ndrange_t
id	evergreen-emu.h	/^	int id;  \/* global ID *\/$/;"	m	struct:evg_work_item_t
id	evergreen-emu.h	/^	int id;$/;"	m	struct:evg_wavefront_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_command_queue_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_context_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_device_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_event_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_kernel_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_mem_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_platform_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_program_t
id	evergreen-emu.h	/^	uint32_t id;$/;"	m	struct:evg_opencl_sampler_t
id_3d	evergreen-emu.h	/^	int id_3d[3];  \/* 3-dimensional Group ID *\/$/;"	m	struct:evg_work_group_t
id_3d	evergreen-emu.h	/^	int id_3d[3];  \/* global 3D IDs *\/$/;"	m	struct:evg_work_item_t
id_in_compute_unit	evergreen-emu.h	/^	int id_in_compute_unit;$/;"	m	struct:evg_wavefront_t
id_in_compute_unit	evergreen-emu.h	/^	int id_in_compute_unit;$/;"	m	struct:evg_work_group_t
id_in_wavefront	evergreen-emu.h	/^	int id_in_wavefront;$/;"	m	struct:evg_work_item_t
id_in_work_group	evergreen-emu.h	/^	int id_in_work_group;  \/* local ID *\/$/;"	m	struct:evg_work_item_t
id_in_work_group	evergreen-emu.h	/^	int id_in_work_group;$/;"	m	struct:evg_wavefront_t
id_in_work_group_3d	evergreen-emu.h	/^	int id_in_work_group_3d[3];  \/* local 3D IDs *\/$/;"	m	struct:evg_work_item_t
image_channel_data_type	evergreen-emu.h	/^	uint32_t image_channel_data_type;$/;"	m	struct:evg_opencl_image_format_t
image_channel_order	evergreen-emu.h	/^	uint32_t image_channel_order;$/;"	m	struct:evg_opencl_image_format_t
index	bin-file.c	/^	Elf32_Word index;  \/* Constant buffer identifier *\/$/;"	m	struct:pt_note_constant_buffer_mask_t	file:
index_mode	evergreen-emu.h	/^	int gpr, rel, chan, index_mode, write_mask;$/;"	m	struct:evg_isa_write_task_t
inst	evergreen-emu.h	/^	struct evg_inst_t *inst;$/;"	m	struct:evg_isa_write_task_t	typeref:struct:evg_isa_write_task_t::evg_inst_t
inst_count	evergreen-emu.h	/^	long long inst_count;  \/* Number of instructions executed by wavefronts *\/$/;"	m	struct:evg_emu_t
inst_count	evergreen-emu.h	/^	long long inst_count;  \/* Total number of instructions *\/$/;"	m	struct:evg_wavefront_t
int_consts	evergreen-emu.h	/^	unsigned int int_consts[32][4];$/;"	m	struct:evg_bin_enc_dict_entry_consts_t
internal_elf_file	evergreen-emu.h	/^	struct elf_file_t *internal_elf_file;$/;"	m	struct:evg_opengl_shader_t	typeref:struct:evg_opengl_shader_t::elf_file_t
internal_elf_file_create	opengl-bin-file.c	/^static struct elf_file_t *internal_elf_file_create(struct elf_file_t *external_elf_file)$/;"	f	file:
internal_elf_file_free	opengl-bin-file.c	/^static void internal_elf_file_free(struct elf_file_t *internal_elf_file)$/;"	f	file:
is_external_elf	opengl-bin-file.c	/^static int is_external_elf(void *ptr_buffer, int buf_size)$/;"	f	file:
isa_buffer	evergreen-emu.h	/^	struct elf_buffer_t isa_buffer;$/;"	m	struct:evg_opengl_shader_t	typeref:struct:evg_opengl_shader_t::elf_buffer_t
kernel	evergreen-emu.h	/^	struct evg_opencl_kernel_t *kernel;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_opencl_kernel_t
kernel_buffer	evergreen-emu.h	/^	struct elf_buffer_t kernel_buffer;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::elf_buffer_t
kind	evergreen-emu.h	/^	enum evg_isa_write_task_kind_t kind;$/;"	m	struct:evg_isa_write_task_t	typeref:enum:evg_isa_write_task_t::evg_isa_write_task_kind_t
kind	evergreen-emu.h	/^	enum evg_opencl_event_kind_t kind;$/;"	m	struct:evg_opencl_event_t	typeref:enum:evg_opencl_event_t::evg_opencl_event_kind_t
kind	evergreen-emu.h	/^	enum evg_opencl_kernel_arg_kind_t kind;$/;"	m	struct:evg_opencl_kernel_arg_t	typeref:enum:evg_opencl_kernel_arg_t::evg_opencl_kernel_arg_kind_t
lds_addr	evergreen-emu.h	/^	uint32_t lds_addr;$/;"	m	struct:evg_isa_write_task_t
lds_oqa	evergreen-emu.h	/^	struct list_t *lds_oqa;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::list_t
lds_oqb	evergreen-emu.h	/^	struct list_t *lds_oqb;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::list_t
lds_size_used	evergreen-emu.h	/^	int lds_size_used;$/;"	m	struct:evg_bin_enc_dict_entry_t
lds_value	evergreen-emu.h	/^	uint32_t lds_value;$/;"	m	struct:evg_isa_write_task_t
lds_value_size	evergreen-emu.h	/^        size_t   lds_value_size;$/;"	m	struct:evg_isa_write_task_t
local_mem	evergreen-emu.h	/^	struct mem_t *local_mem;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::mem_t
local_mem_access_addr	evergreen-emu.h	/^	uint32_t local_mem_access_addr[EVG_MAX_LOCAL_MEM_ACCESSES_PER_INST];$/;"	m	struct:evg_work_item_t
local_mem_access_count	evergreen-emu.h	/^	int local_mem_access_count;  \/* Number of local memory access performed by last instruction *\/$/;"	m	struct:evg_work_item_t
local_mem_access_size	evergreen-emu.h	/^	uint32_t local_mem_access_size[EVG_MAX_LOCAL_MEM_ACCESSES_PER_INST];$/;"	m	struct:evg_work_item_t
local_mem_access_type	evergreen-emu.h	/^	int local_mem_access_type[EVG_MAX_LOCAL_MEM_ACCESSES_PER_INST];  \/* 0-none, 1-read, 2-write *\/$/;"	m	struct:evg_work_item_t
local_mem_inst_count	evergreen-emu.h	/^	long long local_mem_inst_count;  \/* Instructions (ALU) accessing local memory *\/$/;"	m	struct:evg_wavefront_t
local_mem_read	evergreen-emu.h	/^	unsigned int local_mem_read : 1;$/;"	m	struct:evg_wavefront_t
local_mem_top	evergreen-emu.h	/^	uint32_t local_mem_top;$/;"	m	struct:evg_ndrange_t
local_mem_write	evergreen-emu.h	/^	unsigned int local_mem_write : 1;$/;"	m	struct:evg_wavefront_t
local_size	evergreen-emu.h	/^	int local_size;$/;"	m	struct:evg_opencl_kernel_t
local_size3	evergreen-emu.h	/^	int local_size3[3];  \/* Number of work_items in a group *\/$/;"	m	struct:evg_opencl_kernel_t
loop_depth	evergreen-emu.h	/^	int loop_depth;$/;"	m	struct:evg_wavefront_t
loop_index	evergreen-emu.h	/^	int loop_index;$/;"	m	struct:evg_wavefront_t
loop_max_trip_count	evergreen-emu.h	/^	int loop_max_trip_count;$/;"	m	struct:evg_wavefront_t
loop_start	evergreen-emu.h	/^	int loop_start;$/;"	m	struct:evg_wavefront_t
loop_step	evergreen-emu.h	/^	int loop_step;$/;"	m	struct:evg_wavefront_t
loop_trip_count	evergreen-emu.h	/^	int loop_trip_count;$/;"	m	struct:evg_wavefront_t
mem_scope	evergreen-emu.h	/^	enum evg_opencl_mem_scope_t mem_scope;  \/* For pointers *\/$/;"	m	struct:evg_opencl_kernel_arg_t	typeref:enum:evg_opencl_kernel_arg_t::evg_opencl_mem_scope_t
metadata_buffer	evergreen-emu.h	/^	struct elf_buffer_t metadata_buffer;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::elf_buffer_t
name	bin-file.c	/^	char name[8];  \/* Note header string. Must be "ATI CAL" *\/$/;"	m	struct:pt_note_header_t	file:
name	evergreen-emu.h	/^	char *name;$/;"	m	struct:evg_ndrange_t
name	evergreen-emu.h	/^	char *name;$/;"	m	struct:evg_opengl_bin_file_t
name	evergreen-emu.h	/^	char name[0];$/;"	m	struct:evg_opencl_kernel_arg_t
name	evergreen-emu.h	/^	char name[30];$/;"	m	struct:evg_wavefront_t
name	evergreen-emu.h	/^	char name[30];$/;"	m	struct:evg_work_group_t
name	evergreen-emu.h	/^	char name[MAX_STRING_SIZE];$/;"	m	struct:evg_opencl_kernel_t
namesz	bin-file.c	/^	Elf32_Word namesz;  \/* Size of the name field. Must be 8 *\/$/;"	m	struct:pt_note_header_t	file:
ndrange	evergreen-emu.h	/^	struct evg_ndrange_t *ndrange;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::evg_ndrange_t
ndrange	evergreen-emu.h	/^	struct evg_ndrange_t *ndrange;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_ndrange_t
ndrange	evergreen-emu.h	/^	struct evg_ndrange_t *ndrange;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_ndrange_t
ndrange	evergreen-emu.h	/^	struct evg_ndrange_t *ndrange;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::evg_ndrange_t
ndrange_count	evergreen-emu.h	/^	int ndrange_count;  \/* Number of OpenCL kernels executed *\/$/;"	m	struct:evg_emu_t
normalized_coords	evergreen-emu.h	/^	uint32_t normalized_coords;$/;"	m	struct:evg_opencl_sampler_t
num_channels_per_pixel	evergreen-emu.h	/^	uint32_t num_channels_per_pixel;$/;"	m	struct:evg_opencl_mem_t
num_gpr_used	evergreen-emu.h	/^	int num_gpr_used;$/;"	m	struct:evg_bin_enc_dict_entry_t
num_pixels	evergreen-emu.h	/^	uint32_t num_pixels;$/;"	m	struct:evg_opencl_mem_t
offset	bin-file.c	/^	Elf32_Word offset;  \/* Offsets in bytes to start of data *\/$/;"	m	struct:pt_note_data_segment_desc_t	file:
opencl_program_read_symbol	opencl-obj.c	/^void opencl_program_read_symbol(struct evg_opencl_program_t *program, char *symbol_name,$/;"	f
pending_list_count	evergreen-emu.h	/^	int pending_list_count;$/;"	m	struct:evg_ndrange_t
pending_list_head	evergreen-emu.h	/^	struct evg_work_group_t *pending_list_head;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
pending_list_max	evergreen-emu.h	/^	int pending_list_max;$/;"	m	struct:evg_ndrange_t
pending_list_next	evergreen-emu.h	/^	struct evg_work_group_t *pending_list_next;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
pending_list_prev	evergreen-emu.h	/^	struct evg_work_group_t *pending_list_prev;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
pending_list_tail	evergreen-emu.h	/^	struct evg_work_group_t *pending_list_tail;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
periodic_report_cycle	evergreen-emu.h	/^	long long periodic_report_cycle;  \/* Last cycle when periodic report was updated *\/$/;"	m	struct:evg_wavefront_t
periodic_report_file	evergreen-emu.h	/^	FILE *periodic_report_file;  \/* File where report is dumped *\/$/;"	m	struct:evg_wavefront_t
periodic_report_inst_count	evergreen-emu.h	/^	int periodic_report_inst_count;  \/* Number of instructions (VLIW slots) in this interval *\/$/;"	m	struct:evg_wavefront_t
periodic_report_local_mem_accesses	evergreen-emu.h	/^	int periodic_report_local_mem_accesses;  \/* Number of local memory accesses in this interval *\/$/;"	m	struct:evg_wavefront_t
periodic_report_vliw_bundle_count	evergreen-emu.h	/^	long long periodic_report_vliw_bundle_count;  \/* Number of VLIW bundles (or non-ALU instructions) reported *\/$/;"	m	struct:evg_wavefront_t
pixel_size	evergreen-emu.h	/^	uint32_t pixel_size;$/;"	m	struct:evg_opencl_mem_t
platform_id	evergreen-emu.h	/^	uint32_t platform_id;$/;"	m	struct:evg_opencl_context_t
pred	evergreen-emu.h	/^	struct bit_map_t *pred;  \/* work_item_count elements *\/$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::bit_map_t
pred_mask_update	evergreen-emu.h	/^	unsigned int pred_mask_update : 1;$/;"	m	struct:evg_wavefront_t
prog_info_entry_map	bin-file.c	/^static struct string_map_t prog_info_entry_map = {$/;"	v	typeref:struct:string_map_t	file:
program_id	evergreen-emu.h	/^	uint32_t program_id;$/;"	m	struct:evg_opencl_kernel_t
properties	evergreen-emu.h	/^	uint32_t properties;$/;"	m	struct:evg_opencl_command_queue_t
pt_load_buffer	evergreen-emu.h	/^	struct elf_buffer_t pt_load_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
pt_note_buffer	evergreen-emu.h	/^	struct elf_buffer_t pt_note_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
pt_note_constant_buffer_mask_t	bin-file.c	/^struct pt_note_constant_buffer_mask_t$/;"	s	file:
pt_note_data_segment_desc_t	bin-file.c	/^struct pt_note_data_segment_desc_t$/;"	s	file:
pt_note_header_t	bin-file.c	/^struct pt_note_header_t$/;"	s	file:
pt_note_prog_info_entry_t	bin-file.c	/^struct pt_note_prog_info_entry_t$/;"	s	file:
pt_note_type_map	bin-file.c	/^static struct string_map_t pt_note_type_map = {$/;"	v	typeref:struct:string_map_t	file:
push_before_done	evergreen-emu.h	/^	unsigned int push_before_done : 1;  \/* Indicates whether the stack has been pushed after PRED_SET* instr. *\/$/;"	m	struct:evg_wavefront_t
pv	evergreen-emu.h	/^	struct evg_gpr_t pv;  \/* Result of last computations *\/$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::evg_gpr_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_command_queue_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_context_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_event_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_kernel_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_mem_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_program_t
ref_count	evergreen-emu.h	/^	int ref_count;$/;"	m	struct:evg_opencl_sampler_t
rel	evergreen-emu.h	/^	int gpr, rel, chan, index_mode, write_mask;$/;"	m	struct:evg_isa_write_task_t
running_list_count	evergreen-emu.h	/^	int running_list_count;$/;"	m	struct:evg_ndrange_t
running_list_count	evergreen-emu.h	/^	int running_list_count;$/;"	m	struct:evg_work_group_t
running_list_head	evergreen-emu.h	/^	struct evg_wavefront_t *running_list_head;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
running_list_head	evergreen-emu.h	/^	struct evg_work_group_t *running_list_head;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
running_list_max	evergreen-emu.h	/^	int running_list_max;$/;"	m	struct:evg_ndrange_t
running_list_max	evergreen-emu.h	/^	int running_list_max;$/;"	m	struct:evg_work_group_t
running_list_next	evergreen-emu.h	/^	struct evg_wavefront_t *running_list_next;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
running_list_next	evergreen-emu.h	/^	struct evg_work_group_t *running_list_next;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
running_list_prev	evergreen-emu.h	/^	struct evg_wavefront_t *running_list_prev;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_wavefront_t
running_list_prev	evergreen-emu.h	/^	struct evg_work_group_t *running_list_prev;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_group_t
running_list_tail	evergreen-emu.h	/^	struct evg_wavefront_t *running_list_tail;$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
running_list_tail	evergreen-emu.h	/^	struct evg_work_group_t *running_list_tail;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
sched_when	evergreen-emu.h	/^	long long sched_when;  \/* GPU cycle when wavefront was last scheduled *\/$/;"	m	struct:evg_wavefront_t
search_elf_magic	opengl-bin-file.c	/^static void *search_elf_magic(void *ptr_buffer)$/;"	f	file:
sec_data_buffer	evergreen-emu.h	/^	struct elf_buffer_t sec_data_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
sec_strtab_buffer	evergreen-emu.h	/^	struct elf_buffer_t sec_strtab_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
sec_symtab_buffer	evergreen-emu.h	/^	struct elf_buffer_t sec_symtab_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
sec_text_buffer	evergreen-emu.h	/^	struct elf_buffer_t sec_text_buffer;$/;"	m	struct:evg_bin_enc_dict_entry_t	typeref:struct:evg_bin_enc_dict_entry_t::elf_buffer_t
set	evergreen-emu.h	/^	int set;  \/* Set to true when it is assigned *\/$/;"	m	struct:evg_opencl_kernel_arg_t
shader_kind	evergreen-emu.h	/^	enum evg_opengl_shader_kind_t shader_kind;$/;"	m	struct:evg_opengl_shader_t	typeref:enum:evg_opengl_shader_t::evg_opengl_shader_kind_t
shader_list	evergreen-emu.h	/^	struct list_t *shader_list;$/;"	m	struct:evg_opengl_bin_file_t	typeref:struct:evg_opengl_bin_file_t::list_t
size	bin-file.c	/^	Elf32_Word size;  \/* Size in bytes of data *\/$/;"	m	struct:pt_note_data_segment_desc_t	file:
size	bin-file.c	/^	Elf32_Word size;  \/* Size in vec4f constants of the buffer *\/$/;"	m	struct:pt_note_constant_buffer_mask_t	file:
size	evergreen-emu.h	/^	int size;$/;"	m	struct:evg_mem_access_t
size	evergreen-emu.h	/^	uint32_t size;$/;"	m	struct:evg_opencl_kernel_arg_t
size	evergreen-emu.h	/^	uint32_t size;$/;"	m	struct:evg_opencl_mem_t
stack_size_used	evergreen-emu.h	/^	int stack_size_used;$/;"	m	struct:evg_bin_enc_dict_entry_t
stack_top	evergreen-emu.h	/^	int stack_top;$/;"	m	struct:evg_wavefront_t
status	evergreen-emu.h	/^	enum evg_opencl_event_status_t status;$/;"	m	struct:evg_opencl_event_t	typeref:enum:evg_opencl_event_t::evg_opencl_event_status_t
status	evergreen-emu.h	/^	enum evg_work_group_status_t status;$/;"	m	struct:evg_work_group_t	typeref:enum:evg_work_group_t::evg_work_group_status_t
tc_clause_count	evergreen-emu.h	/^	long long tc_clause_count;$/;"	m	struct:evg_wavefront_t
tc_inst_count	evergreen-emu.h	/^	long long tc_inst_count;$/;"	m	struct:evg_wavefront_t
tc_inst_global_mem_read_count	evergreen-emu.h	/^	long long tc_inst_global_mem_read_count;  \/* Number of instructions reading from global mem (they are TC inst) *\/$/;"	m	struct:evg_wavefront_t
tex_inst	evergreen-emu.h	/^	struct evg_inst_t tex_inst;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_inst_t
time_end	evergreen-emu.h	/^	long long time_end;$/;"	m	struct:evg_opencl_event_t
time_queued	evergreen-emu.h	/^	long long time_queued;$/;"	m	struct:evg_opencl_event_t
time_start	evergreen-emu.h	/^	long long time_start;$/;"	m	struct:evg_opencl_event_t
time_submit	evergreen-emu.h	/^	long long time_submit;$/;"	m	struct:evg_opencl_event_t
timer_acc	evergreen-emu.h	/^	long long timer_acc;  \/* Accumulated time in previous on-off cycles *\/$/;"	m	struct:evg_emu_t
timer_running	evergreen-emu.h	/^	int timer_running;  \/* Current timer state *\/$/;"	m	struct:evg_emu_t
timer_start_time	evergreen-emu.h	/^	long long timer_start_time;  \/* Last time (as per x86_emu_timer) when on *\/$/;"	m	struct:evg_emu_t
type	bin-file.c	/^	Elf32_Word type;  \/* Type of the payload *\/$/;"	m	struct:pt_note_header_t	file:
type	evergreen-emu.h	/^	int type;  \/* 0-none, 1-read, 2-write *\/$/;"	m	struct:evg_mem_access_t
type	evergreen-emu.h	/^	uint32_t type;  \/* 0 buffer, 1 2D image, 2 3D image *\/$/;"	m	struct:evg_opencl_mem_t
uav	evergreen-emu.h	/^	int uav;  \/* For memory objects *\/$/;"	m	struct:evg_opencl_kernel_arg_t
uav_read_list	evergreen-emu.h	/^	struct list_t *uav_read_list;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::list_t
uav_write_list	evergreen-emu.h	/^	struct list_t *uav_write_list;$/;"	m	struct:evg_opencl_kernel_t	typeref:struct:evg_opencl_kernel_t::list_t
value	bin-file.c	/^	Elf32_Word value;  \/* Value *\/$/;"	m	struct:pt_note_prog_info_entry_t	file:
value	evergreen-emu.h	/^	uint32_t value;  \/* 32-bit arguments supported *\/$/;"	m	struct:evg_opencl_kernel_arg_t
value	evergreen-emu.h	/^	uint32_t value;$/;"	m	struct:evg_isa_write_task_t
wavefront	evergreen-emu.h	/^	struct evg_wavefront_t *wavefront;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::evg_wavefront_t
wavefront_count	evergreen-emu.h	/^	int wavefront_count;$/;"	m	struct:evg_ndrange_t
wavefront_count	evergreen-emu.h	/^	int wavefront_count;$/;"	m	struct:evg_work_group_t
wavefront_id_first	evergreen-emu.h	/^	int wavefront_id_first;$/;"	m	struct:evg_ndrange_t
wavefront_id_first	evergreen-emu.h	/^	int wavefront_id_first;$/;"	m	struct:evg_work_group_t
wavefront_id_last	evergreen-emu.h	/^	int wavefront_id_last;$/;"	m	struct:evg_ndrange_t
wavefront_id_last	evergreen-emu.h	/^	int wavefront_id_last;$/;"	m	struct:evg_work_group_t
wavefronts	evergreen-emu.h	/^	struct evg_wavefront_t **wavefronts;  \/* Pointer to first wavefront in 'kernel->wavefronts' *\/$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_wavefront_t
wavefronts	evergreen-emu.h	/^	struct evg_wavefront_t **wavefronts;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_wavefront_t
wavefronts_per_work_group	evergreen-emu.h	/^	int wavefronts_per_work_group;  \/* = ceil(local_size \/ evg_emu_wavefront_size) *\/$/;"	m	struct:evg_ndrange_t
width	evergreen-emu.h	/^	uint32_t width;$/;"	m	struct:evg_opencl_mem_t
work_dim	evergreen-emu.h	/^	int work_dim;$/;"	m	struct:evg_opencl_kernel_t
work_group	evergreen-emu.h	/^	struct evg_work_group_t *work_group;$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_work_group_t
work_group	evergreen-emu.h	/^	struct evg_work_group_t *work_group;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::evg_work_group_t
work_group_count	evergreen-emu.h	/^	int work_group_count;$/;"	m	struct:evg_ndrange_t
work_group_id_first	evergreen-emu.h	/^	int work_group_id_first;$/;"	m	struct:evg_ndrange_t
work_group_id_last	evergreen-emu.h	/^	int work_group_id_last;$/;"	m	struct:evg_ndrange_t
work_groups	evergreen-emu.h	/^	struct evg_work_group_t **work_groups;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_group_t
work_item_count	evergreen-emu.h	/^	int work_item_count;$/;"	m	struct:evg_ndrange_t
work_item_count	evergreen-emu.h	/^	int work_item_count;$/;"	m	struct:evg_wavefront_t
work_item_count	evergreen-emu.h	/^	int work_item_count;$/;"	m	struct:evg_work_group_t
work_item_id_first	evergreen-emu.h	/^	int work_item_id_first;$/;"	m	struct:evg_ndrange_t
work_item_id_first	evergreen-emu.h	/^	int work_item_id_first;$/;"	m	struct:evg_wavefront_t
work_item_id_first	evergreen-emu.h	/^	int work_item_id_first;$/;"	m	struct:evg_work_group_t
work_item_id_last	evergreen-emu.h	/^	int work_item_id_last;$/;"	m	struct:evg_ndrange_t
work_item_id_last	evergreen-emu.h	/^	int work_item_id_last;$/;"	m	struct:evg_wavefront_t
work_item_id_last	evergreen-emu.h	/^	int work_item_id_last;$/;"	m	struct:evg_work_group_t
work_items	evergreen-emu.h	/^	struct evg_work_item_t **work_items;  \/* Pointer to first work-items in 'kernel->work_items' *\/$/;"	m	struct:evg_wavefront_t	typeref:struct:evg_wavefront_t::evg_work_item_t
work_items	evergreen-emu.h	/^	struct evg_work_item_t **work_items;  \/* Pointer to first work_item in 'kernel->work_items' *\/$/;"	m	struct:evg_work_group_t	typeref:struct:evg_work_group_t::evg_work_item_t
work_items	evergreen-emu.h	/^	struct evg_work_item_t **work_items;$/;"	m	struct:evg_ndrange_t	typeref:struct:evg_ndrange_t::evg_work_item_t
write_mask	evergreen-emu.h	/^	int gpr, rel, chan, index_mode, write_mask;$/;"	m	struct:evg_isa_write_task_t
write_task_list	evergreen-emu.h	/^	struct linked_list_t *write_task_list;$/;"	m	struct:evg_work_item_t	typeref:struct:evg_work_item_t::linked_list_t
