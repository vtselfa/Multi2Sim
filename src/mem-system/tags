!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DIR_ENTRY	directory.c	26;"	d	file:
DIR_ENTRY_OWNER_NONE	mem-system.h	269;"	d
DIR_ENTRY_SHARERS_SIZE	directory.c	24;"	d	file:
DIR_ENTRY_SIZE	directory.c	25;"	d	file:
DIR_ENTRY_VALID_OWNER	mem-system.h	270;"	d
EV_MEM_SYSTEM_COMMAND	command.c	/^int EV_MEM_SYSTEM_COMMAND;$/;"	v
EV_MEM_SYSTEM_END_COMMAND	command.c	/^int EV_MEM_SYSTEM_END_COMMAND;$/;"	v
EV_MOD_LOCAL_MEM_FIND_AND_LOCK	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_FIND_AND_LOCK;$/;"	v
EV_MOD_LOCAL_MEM_FIND_AND_LOCK_ACTION	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_FIND_AND_LOCK_ACTION;$/;"	v
EV_MOD_LOCAL_MEM_FIND_AND_LOCK_FINISH	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_FIND_AND_LOCK_FINISH;$/;"	v
EV_MOD_LOCAL_MEM_FIND_AND_LOCK_PORT	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_FIND_AND_LOCK_PORT;$/;"	v
EV_MOD_LOCAL_MEM_LOAD	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_LOAD;$/;"	v
EV_MOD_LOCAL_MEM_LOAD_FINISH	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_LOAD_FINISH;$/;"	v
EV_MOD_LOCAL_MEM_LOAD_LOCK	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_LOAD_LOCK;$/;"	v
EV_MOD_LOCAL_MEM_STORE	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_STORE;$/;"	v
EV_MOD_LOCAL_MEM_STORE_FINISH	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_STORE_FINISH;$/;"	v
EV_MOD_LOCAL_MEM_STORE_LOCK	local-mem-protocol.c	/^int EV_MOD_LOCAL_MEM_STORE_LOCK;$/;"	v
EV_MOD_NMOESI_EVICT	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT;$/;"	v
EV_MOD_NMOESI_EVICT_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_ACTION;$/;"	v
EV_MOD_NMOESI_EVICT_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_FINISH;$/;"	v
EV_MOD_NMOESI_EVICT_INVALID	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_INVALID;$/;"	v
EV_MOD_NMOESI_EVICT_PROCESS	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_PROCESS;$/;"	v
EV_MOD_NMOESI_EVICT_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_RECEIVE;$/;"	v
EV_MOD_NMOESI_EVICT_REPLY	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_REPLY;$/;"	v
EV_MOD_NMOESI_EVICT_REPLY_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_REPLY_RECEIVE;$/;"	v
EV_MOD_NMOESI_EVICT_WRITEBACK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_WRITEBACK;$/;"	v
EV_MOD_NMOESI_EVICT_WRITEBACK_EXCLUSIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_WRITEBACK_EXCLUSIVE;$/;"	v
EV_MOD_NMOESI_EVICT_WRITEBACK_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_EVICT_WRITEBACK_FINISH;$/;"	v
EV_MOD_NMOESI_FIND_AND_LOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_FIND_AND_LOCK;$/;"	v
EV_MOD_NMOESI_FIND_AND_LOCK_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_FIND_AND_LOCK_ACTION;$/;"	v
EV_MOD_NMOESI_FIND_AND_LOCK_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_FIND_AND_LOCK_FINISH;$/;"	v
EV_MOD_NMOESI_FIND_AND_LOCK_PORT	nmoesi-protocol.c	/^int EV_MOD_NMOESI_FIND_AND_LOCK_PORT;$/;"	v
EV_MOD_NMOESI_INVALIDATE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_INVALIDATE;$/;"	v
EV_MOD_NMOESI_INVALIDATE_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_INVALIDATE_FINISH;$/;"	v
EV_MOD_NMOESI_LOAD	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD;$/;"	v
EV_MOD_NMOESI_LOAD_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD_ACTION;$/;"	v
EV_MOD_NMOESI_LOAD_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD_FINISH;$/;"	v
EV_MOD_NMOESI_LOAD_LOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD_LOCK;$/;"	v
EV_MOD_NMOESI_LOAD_MISS	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD_MISS;$/;"	v
EV_MOD_NMOESI_LOAD_UNLOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_LOAD_UNLOCK;$/;"	v
EV_MOD_NMOESI_NC_STORE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_STORE;$/;"	v
EV_MOD_NMOESI_NC_STORE_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_STORE_ACTION;$/;"	v
EV_MOD_NMOESI_NC_STORE_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_STORE_FINISH;$/;"	v
EV_MOD_NMOESI_NC_STORE_LOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_STORE_LOCK;$/;"	v
EV_MOD_NMOESI_NC_STORE_UNLOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_STORE_UNLOCK;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_ACTION;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_DOWNUP	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_DOWNUP;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_DOWNUP_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_DOWNUP_FINISH;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_EXCLUSIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_EXCLUSIVE;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_FINISH;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_RECEIVE;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_REPLY	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_REPLY;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_UPDOWN	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_UPDOWN;$/;"	v
EV_MOD_NMOESI_NC_WRITE_REQUEST_UPDOWN_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_NC_WRITE_REQUEST_UPDOWN_FINISH;$/;"	v
EV_MOD_NMOESI_PEER_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_PEER_FINISH;$/;"	v
EV_MOD_NMOESI_PEER_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_PEER_RECEIVE;$/;"	v
EV_MOD_NMOESI_PEER_REPLY_ACK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_PEER_REPLY_ACK;$/;"	v
EV_MOD_NMOESI_PEER_SEND	nmoesi-protocol.c	/^int EV_MOD_NMOESI_PEER_SEND;$/;"	v
EV_MOD_NMOESI_READ_REQUEST	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_ACTION;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_DOWNUP	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_DOWNUP;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_DOWNUP_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_DOWNUP_FINISH;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_DOWNUP_WAIT_FOR_REQS	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_DOWNUP_WAIT_FOR_REQS;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_FINISH;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_RECEIVE;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_REPLY	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_REPLY;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_UPDOWN	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_UPDOWN;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_UPDOWN_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_UPDOWN_FINISH;$/;"	v
EV_MOD_NMOESI_READ_REQUEST_UPDOWN_MISS	nmoesi-protocol.c	/^int EV_MOD_NMOESI_READ_REQUEST_UPDOWN_MISS;$/;"	v
EV_MOD_NMOESI_STORE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_STORE;$/;"	v
EV_MOD_NMOESI_STORE_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_STORE_ACTION;$/;"	v
EV_MOD_NMOESI_STORE_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_STORE_FINISH;$/;"	v
EV_MOD_NMOESI_STORE_LOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_STORE_LOCK;$/;"	v
EV_MOD_NMOESI_STORE_UNLOCK	nmoesi-protocol.c	/^int EV_MOD_NMOESI_STORE_UNLOCK;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_ACTION	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_ACTION;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_DOWNUP	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_DOWNUP;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_DOWNUP_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_DOWNUP_FINISH;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_EXCLUSIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_EXCLUSIVE;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_FINISH;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_RECEIVE	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_RECEIVE;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_REPLY	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_REPLY;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_UPDOWN	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_UPDOWN;$/;"	v
EV_MOD_NMOESI_WRITE_REQUEST_UPDOWN_FINISH	nmoesi-protocol.c	/^int EV_MOD_NMOESI_WRITE_REQUEST_UPDOWN_FINISH;$/;"	v
EV_MOD_PREF	nmoesi-protocol.c	/^int EV_MOD_PREF;$/;"	v
EV_MOD_PREF_ACTION	nmoesi-protocol.c	/^int EV_MOD_PREF_ACTION;$/;"	v
EV_MOD_PREF_FINISH	nmoesi-protocol.c	/^int EV_MOD_PREF_FINISH;$/;"	v
EV_MOD_PREF_LOCK	nmoesi-protocol.c	/^int EV_MOD_PREF_LOCK;$/;"	v
EV_MOD_PREF_MISS	nmoesi-protocol.c	/^int EV_MOD_PREF_MISS;$/;"	v
EV_MOD_PREF_UNLOCK	nmoesi-protocol.c	/^int EV_MOD_PREF_UNLOCK;$/;"	v
MEM_LOG_PAGE_SIZE	mem-system.h	38;"	d
MEM_PAGE_COUNT	mem-system.h	42;"	d
MEM_PAGE_MASK	mem-system.h	41;"	d
MEM_PAGE_SHIFT	mem-system.h	39;"	d
MEM_PAGE_SIZE	mem-system.h	40;"	d
MEM_SYSTEM_H	mem-system.h	20;"	d
MEM_SYSTEM_MAX_LEVELS	config.c	207;"	d	file:
MEM_SYSTEM_TRACE_VERSION_MAJOR	config.c	1568;"	d	file:
MEM_SYSTEM_TRACE_VERSION_MINOR	config.c	1569;"	d	file:
MMU_PAGE_HASH_SIZE	mmu.c	42;"	d	file:
MMU_PAGE_LIST_SIZE	mmu.c	43;"	d	file:
MOD_ACCESS_HASH_TABLE_SIZE	mem-system.h	404;"	d
SPEC_MEM_LOG_PAGE_SIZE	mem-system.h	141;"	d
SPEC_MEM_MAX_PAGE_COUNT	mem-system.h	149;"	d
SPEC_MEM_PAGE_MASK	mem-system.h	143;"	d
SPEC_MEM_PAGE_SIZE	mem-system.h	142;"	d
SPEC_MEM_PAGE_TABLE_SIZE	mem-system.h	137;"	d
access_hash_table	mem-system.h	/^	} access_hash_table[MOD_ACCESS_HASH_TABLE_SIZE];$/;"	m	struct:mod_t	typeref:struct:mod_t::__anon4
access_kind	mem-system.h	/^	enum mod_access_kind_t access_kind;$/;"	m	struct:mod_stack_t	typeref:enum:mod_stack_t::mod_access_kind_t
access_list_coalesced_count	mem-system.h	/^	int access_list_coalesced_count;$/;"	m	struct:mod_t
access_list_count	mem-system.h	/^	int access_list_count;$/;"	m	struct:mod_t
access_list_head	mem-system.h	/^	struct mod_stack_t *access_list_head;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
access_list_max	mem-system.h	/^	int access_list_max;$/;"	m	struct:mod_t
access_list_next	mem-system.h	/^	struct mod_stack_t *access_list_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
access_list_prev	mem-system.h	/^	struct mod_stack_t *access_list_prev;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
access_list_tail	mem-system.h	/^	struct mod_stack_t *access_list_tail;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
accesses	mem-system.h	/^	long long accesses;$/;"	m	struct:mod_t
ack_types	mem-system.h	/^enum ack_types$/;"	g
addr	mem-system.h	/^	unsigned int addr;$/;"	m	struct:mod_stack_t
addr	mem-system.h	/^	unsigned int addr;$/;"	m	struct:spec_mem_page_t
address_space_index	mmu.c	/^	int address_space_index;  \/* Memory map ID *\/$/;"	m	struct:mmu_page_t	file:
assoc	mem-system.h	/^	unsigned int assoc;$/;"	m	struct:cache_t
block_mask	mem-system.h	/^	unsigned int block_mask;$/;"	m	struct:cache_t
block_size	mem-system.h	/^	int block_size;$/;"	m	struct:mod_t
block_size	mem-system.h	/^	unsigned int block_size;$/;"	m	struct:cache_t
blocking	mem-system.h	/^	int blocking : 1;$/;"	m	struct:mod_stack_t
blocking_reads	mem-system.h	/^	long long blocking_reads;$/;"	m	struct:mod_t
blocking_writes	mem-system.h	/^	long long blocking_writes;$/;"	m	struct:mod_t
blocks	mem-system.h	/^	struct cache_block_t *blocks;$/;"	m	struct:cache_set_t	typeref:struct:cache_set_t::cache_block_t
bounds	mem-system.h	/^		} bounds;$/;"	m	union:mod_t::__anon1	typeref:struct:mod_t::__anon1::__anon2
bucket_list_count	mem-system.h	/^		int bucket_list_count;$/;"	m	struct:mod_t::__anon4
bucket_list_head	mem-system.h	/^		struct mod_stack_t *bucket_list_head;$/;"	m	struct:mod_t::__anon4	typeref:struct:mod_t::__anon4::mod_stack_t
bucket_list_max	mem-system.h	/^		int bucket_list_max;$/;"	m	struct:mod_t::__anon4
bucket_list_next	mem-system.h	/^	struct mod_stack_t *bucket_list_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
bucket_list_prev	mem-system.h	/^	struct mod_stack_t *bucket_list_prev;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
bucket_list_tail	mem-system.h	/^		struct mod_stack_t *bucket_list_tail;$/;"	m	struct:mod_t::__anon4	typeref:struct:mod_t::__anon4::mod_stack_t
cache	mem-system.h	/^	struct cache_t *cache;$/;"	m	struct:mod_t	typeref:struct:mod_t::cache_t
cache_access_block	cache.c	/^void cache_access_block(struct cache_t *cache, unsigned int set, unsigned int way)$/;"	f
cache_block_exclusive	mem-system.h	/^	cache_block_exclusive,$/;"	e	enum:cache_block_state_t
cache_block_invalid	mem-system.h	/^	cache_block_invalid = 0,$/;"	e	enum:cache_block_state_t
cache_block_modified	mem-system.h	/^	cache_block_modified,$/;"	e	enum:cache_block_state_t
cache_block_noncoherent	mem-system.h	/^	cache_block_noncoherent,$/;"	e	enum:cache_block_state_t
cache_block_owned	mem-system.h	/^	cache_block_owned,$/;"	e	enum:cache_block_state_t
cache_block_shared	mem-system.h	/^	cache_block_shared$/;"	e	enum:cache_block_state_t
cache_block_state_map	cache.c	/^struct string_map_t cache_block_state_map =$/;"	v	typeref:struct:string_map_t
cache_block_state_t	mem-system.h	/^enum cache_block_state_t$/;"	g
cache_block_t	mem-system.h	/^struct cache_block_t$/;"	s
cache_create	cache.c	/^struct cache_t *cache_create(char *name, unsigned int num_sets, unsigned int block_size,$/;"	f
cache_decode_address	cache.c	/^void cache_decode_address(struct cache_t *cache, unsigned int addr,$/;"	f
cache_find_block	cache.c	/^int cache_find_block(struct cache_t *cache, unsigned int addr,$/;"	f
cache_free	cache.c	/^void cache_free(struct cache_t *cache)$/;"	f
cache_get_block	cache.c	/^void cache_get_block(struct cache_t *cache, unsigned int set, unsigned int way,$/;"	f
cache_policy_fifo	mem-system.h	/^	cache_policy_fifo,$/;"	e	enum:cache_policy_t
cache_policy_invalid	mem-system.h	/^	cache_policy_invalid = 0,$/;"	e	enum:cache_policy_t
cache_policy_lru	mem-system.h	/^	cache_policy_lru,$/;"	e	enum:cache_policy_t
cache_policy_map	cache.c	/^struct string_map_t cache_policy_map =$/;"	v	typeref:struct:string_map_t
cache_policy_random	mem-system.h	/^	cache_policy_random$/;"	e	enum:cache_policy_t
cache_policy_t	mem-system.h	/^enum cache_policy_t$/;"	g
cache_replace_block	cache.c	/^unsigned int cache_replace_block(struct cache_t *cache, unsigned int set)$/;"	f
cache_set_block	cache.c	/^void cache_set_block(struct cache_t *cache, unsigned int set, unsigned int way,$/;"	f
cache_set_t	mem-system.h	/^struct cache_set_t$/;"	s
cache_set_transient_tag	cache.c	/^void cache_set_transient_tag(struct cache_t *cache, unsigned int set,$/;"	f
cache_t	mem-system.h	/^struct cache_t$/;"	s
cache_update_waylist	cache.c	/^static void cache_update_waylist(struct cache_set_t *set,$/;"	f	file:
cache_waylist_enum	cache.c	/^enum cache_waylist_enum$/;"	g	file:
cache_waylist_head	cache.c	/^	cache_waylist_head,$/;"	e	enum:cache_waylist_enum	file:
cache_waylist_tail	cache.c	/^	cache_waylist_tail$/;"	e	enum:cache_waylist_enum	file:
coalesced	mem-system.h	/^	int coalesced : 1;$/;"	m	struct:mod_stack_t
color	mem-system.h	/^	int color;$/;"	m	struct:mod_t
completed_prefetches	mem-system.h	/^	long long completed_prefetches;$/;"	m	struct:mod_t
core	mem-system.h	/^	int core;$/;"	m	struct:mod_stack_t
data	mem-system.h	/^	unsigned char *data;$/;"	m	struct:mem_page_t
data	mem-system.h	/^	unsigned char data[0];$/;"	m	struct:dir_t
data	mem-system.h	/^	unsigned char data[SPEC_MEM_PAGE_SIZE];$/;"	m	struct:spec_mem_page_t
dir	mem-system.h	/^	struct dir_t *dir;$/;"	m	struct:mod_t	typeref:struct:mod_t::dir_t
dir_assoc	mem-system.h	/^	int dir_assoc;$/;"	m	struct:mod_t
dir_create	directory.c	/^struct dir_t *dir_create(char *name, int xsize, int ysize, int zsize, int num_nodes)$/;"	f
dir_entry_clear_all_sharers	directory.c	/^void dir_entry_clear_all_sharers(struct dir_t *dir, int x, int y, int z)$/;"	f
dir_entry_clear_sharer	directory.c	/^void dir_entry_clear_sharer(struct dir_t *dir, int x, int y, int z, int node)$/;"	f
dir_entry_dump_sharers	directory.c	/^void dir_entry_dump_sharers(struct dir_t *dir, int x, int y, int z)$/;"	f
dir_entry_get	directory.c	/^struct dir_entry_t *dir_entry_get(struct dir_t *dir, int x, int y, int z)$/;"	f
dir_entry_group_shared_or_owned	directory.c	/^int dir_entry_group_shared_or_owned(struct dir_t *dir, int x, int y)$/;"	f
dir_entry_is_sharer	directory.c	/^int dir_entry_is_sharer(struct dir_t *dir, int x, int y, int z, int node)$/;"	f
dir_entry_lock	directory.c	/^int dir_entry_lock(struct dir_t *dir, int x, int y, int event, struct mod_stack_t *stack)$/;"	f
dir_entry_set_owner	directory.c	/^void dir_entry_set_owner(struct dir_t *dir, int x, int y, int z, int node)$/;"	f
dir_entry_set_sharer	directory.c	/^void dir_entry_set_sharer(struct dir_t *dir, int x, int y, int z, int node)$/;"	f
dir_entry_t	mem-system.h	/^struct dir_entry_t$/;"	s
dir_entry_unlock	directory.c	/^void dir_entry_unlock(struct dir_t *dir, int x, int y)$/;"	f
dir_free	directory.c	/^void dir_free(struct dir_t *dir)$/;"	f
dir_lock	mem-system.h	/^	struct dir_lock_t *dir_lock;$/;"	m	struct:dir_t	typeref:struct:dir_t::dir_lock_t
dir_lock_event	mem-system.h	/^	int dir_lock_event;$/;"	m	struct:mod_stack_t
dir_lock_get	directory.c	/^struct dir_lock_t *dir_lock_get(struct dir_t *dir, int x, int y)$/;"	f
dir_lock_next	mem-system.h	/^	struct mod_stack_t *dir_lock_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
dir_lock_t	mem-system.h	/^struct dir_lock_t$/;"	s
dir_num_sets	mem-system.h	/^	int dir_num_sets;$/;"	m	struct:mod_t
dir_size	mem-system.h	/^	int dir_size;$/;"	m	struct:mod_t
dir_t	mem-system.h	/^struct dir_t$/;"	s
div	mem-system.h	/^			unsigned int div;$/;"	m	struct:mod_t::__anon1::__anon3
effective_read_hits	mem-system.h	/^	long long effective_read_hits;$/;"	m	struct:mod_t
effective_reads	mem-system.h	/^	long long effective_reads;$/;"	m	struct:mod_t
effective_write_hits	mem-system.h	/^	long long effective_write_hits;$/;"	m	struct:mod_t
effective_writes	mem-system.h	/^	long long effective_writes;$/;"	m	struct:mod_t
eq	mem-system.h	/^			unsigned int eq;$/;"	m	struct:mod_t::__anon1::__anon3
err	mem-system.h	/^	int err : 1;$/;"	m	struct:mod_stack_t
err_mem_block_size	config.c	/^static char *err_mem_block_size =$/;"	v	file:
err_mem_config_net	config.c	/^static char *err_mem_config_net =$/;"	v	file:
err_mem_config_note	config.c	/^static char *err_mem_config_note =$/;"	v	file:
err_mem_connect	config.c	/^static char *err_mem_connect =$/;"	v	file:
err_mem_ignored_entry	config.c	/^static char *err_mem_ignored_entry =$/;"	v	file:
err_mem_levels	config.c	/^static char *err_mem_levels =$/;"	v	file:
event_queue	mem-system.h	/^	struct linked_list_t *event_queue;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::linked_list_t
event_queue_item	mem-system.h	/^	void *event_queue_item;$/;"	m	struct:mod_stack_t
eviction	mem-system.h	/^	int eviction : 1;$/;"	m	struct:mod_stack_t
evictions	mem-system.h	/^	long long evictions;$/;"	m	struct:mod_t
except_mod	mem-system.h	/^	struct mod_t *except_mod;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_t
heap_break	mem-system.h	/^	unsigned int heap_break;$/;"	m	struct:mem_t
high	mem-system.h	/^			unsigned int high;$/;"	m	struct:mod_t::__anon1::__anon2
high_mod_list	mem-system.h	/^	struct linked_list_t *high_mod_list;$/;"	m	struct:mod_t	typeref:struct:mod_t::linked_list_t
high_net	mem-system.h	/^	struct net_t *high_net;$/;"	m	struct:mod_t	typeref:struct:mod_t::net_t
high_net_node	mem-system.h	/^	struct net_node_t *high_net_node;$/;"	m	struct:mod_t	typeref:struct:mod_t::net_node_t
hit	mem-system.h	/^	int hit : 1;$/;"	m	struct:mod_stack_t
hits	mem-system.h	/^	long long hits;$/;"	m	struct:mod_t
id	mem-system.h	/^	long long id;$/;"	m	struct:mod_stack_t
interleaved	mem-system.h	/^		} interleaved;$/;"	m	union:mod_t::__anon1	typeref:struct:mod_t::__anon1::__anon3
kind	mem-system.h	/^	enum mod_kind_t kind;$/;"	m	struct:mod_t	typeref:enum:mod_t::mod_kind_t
last_address	mem-system.h	/^	unsigned int last_address;$/;"	m	struct:mem_t
latency	mem-system.h	/^	int latency;$/;"	m	struct:mod_t
level	mem-system.h	/^	int level;$/;"	m	struct:mod_t
lock	mem-system.h	/^	int lock;$/;"	m	struct:dir_lock_t
lock_queue	mem-system.h	/^	struct mod_stack_t *lock_queue;$/;"	m	struct:dir_lock_t	typeref:struct:dir_lock_t::mod_stack_t
lock_when	mem-system.h	/^	long long lock_when;  \/* Cycle when it was locked *\/$/;"	m	struct:mod_port_t
locked	mem-system.h	/^	int locked;$/;"	m	struct:mod_port_t
log_block_size	mem-system.h	/^	int log_block_size;$/;"	m	struct:cache_t
log_block_size	mem-system.h	/^	int log_block_size;$/;"	m	struct:mod_t
low	mem-system.h	/^			unsigned int low;$/;"	m	struct:mod_t::__anon1::__anon2
low_mod_list	mem-system.h	/^	struct linked_list_t *low_mod_list;$/;"	m	struct:mod_t	typeref:struct:mod_t::linked_list_t
low_net	mem-system.h	/^	struct net_t *low_net;$/;"	m	struct:mod_t	typeref:struct:mod_t::net_t
low_net_node	mem-system.h	/^	struct net_node_t *low_net_node;$/;"	m	struct:mod_t	typeref:struct:mod_t::net_node_t
master_stack	mem-system.h	/^	struct mod_stack_t *master_stack;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
mem	mem-system.h	/^	struct mem_t *mem;  \/* Associated non-speculative memory *\/$/;"	m	struct:spec_mem_t	typeref:struct:spec_mem_t::mem_t
mem_access	memory.c	/^void mem_access(struct mem_t *mem, unsigned int addr, int size, void *buf,$/;"	f
mem_access_exec	mem-system.h	/^	mem_access_exec   = 0x04,$/;"	e	enum:mem_access_t
mem_access_init	mem-system.h	/^	mem_access_init   = 0x08,$/;"	e	enum:mem_access_t
mem_access_modif	mem-system.h	/^	mem_access_modif  = 0x10$/;"	e	enum:mem_access_t
mem_access_none	mem-system.h	/^	mem_access_none   = 0x00,$/;"	e	enum:mem_access_t
mem_access_page_boundary	memory.c	/^static void mem_access_page_boundary(struct mem_t *mem, unsigned int addr,$/;"	f	file:
mem_access_read	mem-system.h	/^	mem_access_read   = 0x01,$/;"	e	enum:mem_access_t
mem_access_t	mem-system.h	/^enum mem_access_t$/;"	g
mem_access_write	mem-system.h	/^	mem_access_write  = 0x02,$/;"	e	enum:mem_access_t
mem_clear	memory.c	/^void mem_clear(struct mem_t *mem)$/;"	f
mem_clone	memory.c	/^void mem_clone(struct mem_t *dst_mem, struct mem_t *src_mem)$/;"	f
mem_config_calculate_mod_levels	config.c	/^static void mem_config_calculate_mod_levels(void)$/;"	f	file:
mem_config_calculate_sub_block_sizes	config.c	/^static void mem_config_calculate_sub_block_sizes(void)$/;"	f	file:
mem_config_check_disjoint	config.c	/^static void mem_config_check_disjoint(void)$/;"	f	file:
mem_config_check_mod_color	config.c	/^static int mem_config_check_mod_color(struct mod_t *mod, int color)$/;"	f	file:
mem_config_check_route_to_main_memory	config.c	/^static void mem_config_check_route_to_main_memory(struct mod_t *mod, int block_size, int level)$/;"	f	file:
mem_config_check_routes	config.c	/^static void mem_config_check_routes(void)$/;"	f	file:
mem_config_cpu_default	config.c	/^static void mem_config_cpu_default(struct config_t *config)$/;"	f	file:
mem_config_create_switches	config.c	/^static void mem_config_create_switches(struct config_t *config)$/;"	f	file:
mem_config_file_name	config.c	/^char *mem_config_file_name = "";$/;"	v
mem_config_gpu_default	config.c	/^static void mem_config_gpu_default(struct config_t *config)$/;"	f	file:
mem_config_help	config.c	/^char *mem_config_help =$/;"	v
mem_config_insert_module_in_network	config.c	/^static void mem_config_insert_module_in_network(struct config_t *config,$/;"	f	file:
mem_config_read_cache	config.c	/^static struct mod_t *mem_config_read_cache(struct config_t *config, char *section)$/;"	f	file:
mem_config_read_commands	config.c	/^static void mem_config_read_commands(struct config_t *config)$/;"	f	file:
mem_config_read_cpu_entries	config.c	/^static void mem_config_read_cpu_entries(struct config_t *config)$/;"	f	file:
mem_config_read_general	config.c	/^static void mem_config_read_general(struct config_t *config)$/;"	f	file:
mem_config_read_gpu_entries	config.c	/^static void mem_config_read_gpu_entries(struct config_t *config)$/;"	f	file:
mem_config_read_low_modules	config.c	/^static void mem_config_read_low_modules(struct config_t *config)$/;"	f	file:
mem_config_read_main_memory	config.c	/^static struct mod_t *mem_config_read_main_memory(struct config_t *config, char *section)$/;"	f	file:
mem_config_read_module_address_range	config.c	/^static void mem_config_read_module_address_range(struct config_t *config,$/;"	f	file:
mem_config_read_modules	config.c	/^static void mem_config_read_modules(struct config_t *config)$/;"	f	file:
mem_config_read_networks	config.c	/^static void mem_config_read_networks(struct config_t *config)$/;"	f	file:
mem_config_set_mod_color	config.c	/^static void mem_config_set_mod_color(struct mod_t *mod, int color)$/;"	f	file:
mem_config_set_mod_level	config.c	/^static void mem_config_set_mod_level(struct mod_t *mod, int level)$/;"	f	file:
mem_config_trace	config.c	/^static void mem_config_trace(void)$/;"	f	file:
mem_copy	memory.c	/^void mem_copy(struct mem_t *mem, unsigned int dest, unsigned int src, int size)$/;"	f
mem_create	memory.c	/^struct mem_t *mem_create()$/;"	f
mem_debug	mem-system.h	871;"	d
mem_debug_category	mem-system.c	/^int mem_debug_category;$/;"	v
mem_debugging	mem-system.h	870;"	d
mem_dump	memory.c	/^void mem_dump(struct mem_t *mem, char *filename, unsigned int start, unsigned int end)$/;"	f
mem_free	memory.c	/^void mem_free(struct mem_t *mem)$/;"	f
mem_get_buffer	memory.c	/^void *mem_get_buffer(struct mem_t *mem, unsigned int addr, int size,$/;"	f
mem_link	memory.c	/^struct mem_t *mem_link(struct mem_t *mem)$/;"	f
mem_load	memory.c	/^void mem_load(struct mem_t *mem, char *file_name, unsigned int start)$/;"	f
mem_map	memory.c	/^void mem_map(struct mem_t *mem, unsigned int addr, int size,$/;"	f
mem_map_space	memory.c	/^unsigned int mem_map_space(struct mem_t *mem, unsigned int addr, int size)$/;"	f
mem_map_space_down	memory.c	/^unsigned int mem_map_space_down(struct mem_t *mem, unsigned int addr, int size)$/;"	f
mem_mapped_space	memory.c	/^unsigned long mem_mapped_space = 0;$/;"	v
mem_max_mapped_space	memory.c	/^unsigned long mem_max_mapped_space = 0;$/;"	v
mem_page_create	memory.c	/^static struct mem_page_t *mem_page_create(struct mem_t *mem, unsigned int addr, int perm)$/;"	f	file:
mem_page_free	memory.c	/^static void mem_page_free(struct mem_t *mem, unsigned int addr)$/;"	f	file:
mem_page_get	memory.c	/^struct mem_page_t *mem_page_get(struct mem_t *mem, unsigned int addr)$/;"	f
mem_page_get_next	memory.c	/^struct mem_page_t *mem_page_get_next(struct mem_t *mem, unsigned int addr)$/;"	f
mem_page_t	mem-system.h	/^struct mem_page_t$/;"	s
mem_protect	memory.c	/^void mem_protect(struct mem_t *mem, unsigned int addr, int size, enum mem_access_t perm)$/;"	f
mem_read	memory.c	/^void mem_read(struct mem_t *mem, unsigned int addr, int size, void *buf)$/;"	f
mem_read_string	memory.c	/^int mem_read_string(struct mem_t *mem, unsigned int addr, int size, char *str)$/;"	f
mem_report_file_name	config.c	/^char *mem_report_file_name = "";$/;"	v
mem_safe_mode	memory.c	/^int mem_safe_mode = 1;$/;"	v
mem_system	mem-system.c	/^struct mem_system_t *mem_system;$/;"	v	typeref:struct:mem_system_t
mem_system_command_end	command.c	/^static void mem_system_command_end(struct list_t *token_list, char *command_line)$/;"	f	file:
mem_system_command_expect	command.c	/^static void mem_system_command_expect(struct list_t *token_list, char *command_line)$/;"	f	file:
mem_system_command_get_hex	command.c	/^static unsigned int mem_system_command_get_hex(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_mod	command.c	/^static struct mod_t *mem_system_command_get_mod(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_mod_access	command.c	/^static enum mod_access_kind_t mem_system_command_get_mod_access(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_set_way	command.c	/^static void mem_system_command_get_set_way(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_state	command.c	/^static int mem_system_command_get_state(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_string	command.c	/^static void mem_system_command_get_string(struct list_t *token_list,$/;"	f	file:
mem_system_command_get_sub_block	command.c	/^static int mem_system_command_get_sub_block(struct list_t *token_list,$/;"	f	file:
mem_system_command_handler	command.c	/^void mem_system_command_handler(int event, void *data)$/;"	f
mem_system_config_read	config.c	/^void mem_system_config_read(void)$/;"	f
mem_system_done	mem-system.c	/^void mem_system_done(void)$/;"	f
mem_system_dump_report	mem-system.c	/^void mem_system_dump_report()$/;"	f
mem_system_end_command_handler	command.c	/^void mem_system_end_command_handler(int event, void *data)$/;"	f
mem_system_get_mod	mem-system.c	/^struct mod_t *mem_system_get_mod(char *mod_name)$/;"	f
mem_system_get_net	mem-system.c	/^struct net_t *mem_system_get_net(char *net_name)$/;"	f
mem_system_init	mem-system.c	/^void mem_system_init(void)$/;"	f
mem_system_t	mem-system.h	/^struct mem_system_t$/;"	s
mem_t	mem-system.h	/^struct mem_t$/;"	s
mem_trace	mem-system.h	875;"	d
mem_trace_category	mem-system.c	/^int mem_trace_category;$/;"	v
mem_trace_header	mem-system.h	876;"	d
mem_tracing	mem-system.h	874;"	d
mem_unlink	memory.c	/^void mem_unlink(struct mem_t *mem)$/;"	f
mem_unmap	memory.c	/^void mem_unmap(struct mem_t *mem, unsigned int addr, int size)$/;"	f
mem_write	memory.c	/^void mem_write(struct mem_t *mem, unsigned int addr, int size, void *buf)$/;"	f
mem_write_string	memory.c	/^void mem_write_string(struct mem_t *mem, unsigned int addr, char *str)$/;"	f
mem_zero	memory.c	/^void mem_zero(struct mem_t *mem, unsigned int addr, int size)$/;"	f
mmu	mmu.c	/^static struct mmu_t *mmu;$/;"	v	typeref:struct:mmu_t	file:
mmu_access_execute	mem-system.h	/^	mmu_access_execute$/;"	e	enum:mmu_access_t
mmu_access_invalid	mem-system.h	/^	mmu_access_invalid = 0,$/;"	e	enum:mmu_access_t
mmu_access_page	mmu.c	/^void mmu_access_page(unsigned int phy_addr, enum mmu_access_t access)$/;"	f
mmu_access_read	mem-system.h	/^	mmu_access_read,$/;"	e	enum:mmu_access_t
mmu_access_t	mem-system.h	/^enum mmu_access_t$/;"	g
mmu_access_write	mem-system.h	/^	mmu_access_write,$/;"	e	enum:mmu_access_t
mmu_address_space_new	mmu.c	/^int mmu_address_space_new(void)$/;"	f
mmu_done	mmu.c	/^void mmu_done()$/;"	f
mmu_dump_report	mmu.c	/^void mmu_dump_report(void)$/;"	f
mmu_get_page	mmu.c	/^static struct mmu_page_t *mmu_get_page(int address_space_index, unsigned int vtladdr)$/;"	f	file:
mmu_init	mmu.c	/^void mmu_init()$/;"	f
mmu_log_page_size	mmu.c	/^unsigned int mmu_log_page_size;$/;"	v
mmu_page_compare	mmu.c	/^static int mmu_page_compare(const void *ptr1, const void *ptr2)$/;"	f	file:
mmu_page_mask	mmu.c	/^unsigned int mmu_page_mask;$/;"	v
mmu_page_size	mmu.c	/^unsigned int mmu_page_size = 1 << 12;  \/* 4KB default page size *\/$/;"	v
mmu_page_t	mmu.c	/^struct mmu_page_t$/;"	s	file:
mmu_report_file_name	mmu.c	/^char *mmu_report_file_name = "";$/;"	v
mmu_t	mmu.c	/^struct mmu_t$/;"	s	file:
mmu_translate	mmu.c	/^unsigned int mmu_translate(int address_space_index, unsigned int vtl_addr)$/;"	f
mmu_valid_phy_addr	mmu.c	/^int mmu_valid_phy_addr(unsigned int phy_addr)$/;"	f
mod	mem-system.h	/^			unsigned int mod;$/;"	m	struct:mod_t::__anon1::__anon3
mod	mem-system.h	/^	struct mod_t *mod;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_t
mod_access	module.c	/^long long mod_access(struct mod_t *mod, enum mod_access_kind_t access_kind, $/;"	f
mod_access_finish	module.c	/^void mod_access_finish(struct mod_t *mod, struct mod_stack_t *stack)$/;"	f
mod_access_invalid	mem-system.h	/^	mod_access_invalid = 0,$/;"	e	enum:mod_access_kind_t
mod_access_kind_map	module.c	/^struct string_map_t mod_access_kind_map =$/;"	v	typeref:struct:string_map_t
mod_access_kind_t	mem-system.h	/^enum mod_access_kind_t$/;"	g
mod_access_load	mem-system.h	/^	mod_access_load,$/;"	e	enum:mod_access_kind_t
mod_access_nc_store	mem-system.h	/^	mod_access_nc_store,$/;"	e	enum:mod_access_kind_t
mod_access_prefetch	mem-system.h	/^	mod_access_prefetch$/;"	e	enum:mod_access_kind_t
mod_access_start	module.c	/^void mod_access_start(struct mod_t *mod, struct mod_stack_t *stack,$/;"	f
mod_access_store	mem-system.h	/^	mod_access_store,$/;"	e	enum:mod_access_kind_t
mod_can_access	module.c	/^int mod_can_access(struct mod_t *mod, unsigned int addr)$/;"	f
mod_can_coalesce	module.c	/^struct mod_stack_t *mod_can_coalesce(struct mod_t *mod,$/;"	f
mod_coalesce	module.c	/^void mod_coalesce(struct mod_t *mod, struct mod_stack_t *master_stack,$/;"	f
mod_create	module.c	/^struct mod_t *mod_create(char *name, enum mod_kind_t kind, int num_ports,$/;"	f
mod_dump	module.c	/^void mod_dump(struct mod_t *mod, FILE *f)$/;"	f
mod_find_block	module.c	/^int mod_find_block(struct mod_t *mod, unsigned int addr, unsigned int *set_ptr,$/;"	f
mod_free	module.c	/^void mod_free(struct mod_t *mod)$/;"	f
mod_get_low_mod	module.c	/^struct mod_t *mod_get_low_mod(struct mod_t *mod, unsigned int addr)$/;"	f
mod_get_retry_latency	module.c	/^int mod_get_retry_latency(struct mod_t *mod)$/;"	f
mod_handler_local_mem_find_and_lock	local-mem-protocol.c	/^void mod_handler_local_mem_find_and_lock(int event, void *data)$/;"	f
mod_handler_local_mem_load	local-mem-protocol.c	/^void mod_handler_local_mem_load(int event, void *data)$/;"	f
mod_handler_local_mem_store	local-mem-protocol.c	/^void mod_handler_local_mem_store(int event, void *data)$/;"	f
mod_handler_nmoesi_evict	nmoesi-protocol.c	/^void mod_handler_nmoesi_evict(int event, void *data)$/;"	f
mod_handler_nmoesi_find_and_lock	nmoesi-protocol.c	/^void mod_handler_nmoesi_find_and_lock(int event, void *data)$/;"	f
mod_handler_nmoesi_invalidate	nmoesi-protocol.c	/^void mod_handler_nmoesi_invalidate(int event, void *data)$/;"	f
mod_handler_nmoesi_load	nmoesi-protocol.c	/^void mod_handler_nmoesi_load(int event, void *data)$/;"	f
mod_handler_nmoesi_nc_store	nmoesi-protocol.c	/^void mod_handler_nmoesi_nc_store(int event, void *data)$/;"	f
mod_handler_nmoesi_nc_write_request	nmoesi-protocol.c	/^void mod_handler_nmoesi_nc_write_request(int event, void *data)$/;"	f
mod_handler_nmoesi_peer	nmoesi-protocol.c	/^void mod_handler_nmoesi_peer(int event, void *data)$/;"	f
mod_handler_nmoesi_read_request	nmoesi-protocol.c	/^void mod_handler_nmoesi_read_request(int event, void *data)$/;"	f
mod_handler_nmoesi_store	nmoesi-protocol.c	/^void mod_handler_nmoesi_store(int event, void *data)$/;"	f
mod_handler_nmoesi_write_request	nmoesi-protocol.c	/^void mod_handler_nmoesi_write_request(int event, void *data)$/;"	f
mod_handler_pref	nmoesi-protocol.c	/^void mod_handler_pref(int event, void *data)$/;"	f
mod_in_flight_access	module.c	/^int mod_in_flight_access(struct mod_t *mod, long long id, unsigned int addr)$/;"	f
mod_in_flight_address	module.c	/^struct mod_stack_t *mod_in_flight_address(struct mod_t *mod, unsigned int addr,$/;"	f
mod_in_flight_write	module.c	/^struct mod_stack_t *mod_in_flight_write(struct mod_t *mod,$/;"	f
mod_kind_cache	mem-system.h	/^	mod_kind_cache,$/;"	e	enum:mod_kind_t
mod_kind_invalid	mem-system.h	/^	mod_kind_invalid = 0,$/;"	e	enum:mod_kind_t
mod_kind_local_memory	mem-system.h	/^	mod_kind_local_memory$/;"	e	enum:mod_kind_t
mod_kind_main_memory	mem-system.h	/^	mod_kind_main_memory,$/;"	e	enum:mod_kind_t
mod_kind_t	mem-system.h	/^enum mod_kind_t$/;"	g
mod_list	mem-system.h	/^	struct list_t *mod_list;$/;"	m	struct:mem_system_t	typeref:struct:mem_system_t::list_t
mod_lock_port	module.c	/^void mod_lock_port(struct mod_t *mod, struct mod_stack_t *stack, int event)$/;"	f
mod_port_t	mem-system.h	/^struct mod_port_t$/;"	s
mod_range_bounds	mem-system.h	/^	mod_range_bounds,$/;"	e	enum:mod_range_kind_t
mod_range_interleaved	mem-system.h	/^	mod_range_interleaved$/;"	e	enum:mod_range_kind_t
mod_range_invalid	mem-system.h	/^	mod_range_invalid = 0,$/;"	e	enum:mod_range_kind_t
mod_range_kind_t	mem-system.h	/^enum mod_range_kind_t$/;"	g
mod_request_dir_t	mem-system.h	/^enum mod_request_dir_t$/;"	g
mod_request_down_up	mem-system.h	/^	mod_request_down_up$/;"	e	enum:mod_request_dir_t
mod_request_invalid	mem-system.h	/^	mod_request_invalid = 0,$/;"	e	enum:mod_request_dir_t
mod_request_up_down	mem-system.h	/^	mod_request_up_down,$/;"	e	enum:mod_request_dir_t
mod_serves_address	module.c	/^int mod_serves_address(struct mod_t *mod, unsigned int addr)$/;"	f
mod_stack_create	module.c	/^struct mod_stack_t *mod_stack_create(long long id, struct mod_t *mod,$/;"	f
mod_stack_id	module.c	/^long long mod_stack_id;$/;"	v
mod_stack_return	module.c	/^void mod_stack_return(struct mod_stack_t *stack)$/;"	f
mod_stack_t	mem-system.h	/^struct mod_stack_t$/;"	s
mod_stack_wait_in_mod	module.c	/^void mod_stack_wait_in_mod(struct mod_stack_t *stack,$/;"	f
mod_stack_wait_in_port	module.c	/^void mod_stack_wait_in_port(struct mod_stack_t *stack,$/;"	f
mod_stack_wait_in_stack	module.c	/^void mod_stack_wait_in_stack(struct mod_stack_t *stack,$/;"	f
mod_stack_wakeup_mod	module.c	/^void mod_stack_wakeup_mod(struct mod_t *mod)$/;"	f
mod_stack_wakeup_port	module.c	/^void mod_stack_wakeup_port(struct mod_port_t *port)$/;"	f
mod_stack_wakeup_stack	module.c	/^void mod_stack_wakeup_stack(struct mod_stack_t *master_stack)$/;"	f
mod_t	mem-system.h	/^struct mod_t$/;"	s
mod_unlock_port	module.c	/^void mod_unlock_port(struct mod_t *mod, struct mod_port_t *port,$/;"	f
msg	mem-system.h	/^	struct net_msg_t *msg;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::net_msg_t
mshr_size	mem-system.h	/^	int mshr_size;$/;"	m	struct:mod_t
name	mem-system.h	/^	char *name;$/;"	m	struct:cache_t
name	mem-system.h	/^	char *name;$/;"	m	struct:dir_t
name	mem-system.h	/^	char *name;$/;"	m	struct:mod_t
net_list	mem-system.h	/^	struct list_t *net_list;$/;"	m	struct:mem_system_t	typeref:struct:mem_system_t::list_t
next	mem-system.h	/^	struct mem_page_t *next;$/;"	m	struct:mem_page_t	typeref:struct:mem_page_t::mem_page_t
next	mem-system.h	/^	struct spec_mem_page_t *next;$/;"	m	struct:spec_mem_page_t	typeref:struct:spec_mem_page_t::spec_mem_page_t
next	mmu.c	/^	struct mmu_page_t *next;$/;"	m	struct:mmu_page_t	typeref:struct:mmu_page_t::mmu_page_t	file:
no_retry_accesses	mem-system.h	/^	long long no_retry_accesses;$/;"	m	struct:mod_t
no_retry_hits	mem-system.h	/^	long long no_retry_hits;$/;"	m	struct:mod_t
no_retry_read_hits	mem-system.h	/^	long long no_retry_read_hits;$/;"	m	struct:mod_t
no_retry_reads	mem-system.h	/^	long long no_retry_reads;$/;"	m	struct:mod_t
no_retry_write_hits	mem-system.h	/^	long long no_retry_write_hits;$/;"	m	struct:mod_t
no_retry_writes	mem-system.h	/^	long long no_retry_writes;$/;"	m	struct:mod_t
non_blocking_reads	mem-system.h	/^	long long non_blocking_reads;$/;"	m	struct:mod_t
non_blocking_writes	mem-system.h	/^	long long non_blocking_writes;$/;"	m	struct:mod_t
num_execute_accesses	mmu.c	/^	long long num_execute_accesses;$/;"	m	struct:mmu_page_t	file:
num_links	mem-system.h	/^	int num_links;$/;"	m	struct:mem_t
num_locked_ports	mem-system.h	/^	int num_locked_ports;$/;"	m	struct:mod_t
num_nodes	mem-system.h	/^	int num_nodes;$/;"	m	struct:dir_t
num_ports	mem-system.h	/^	int num_ports;$/;"	m	struct:mod_t
num_read_accesses	mmu.c	/^	long long num_read_accesses;$/;"	m	struct:mmu_page_t	file:
num_sets	mem-system.h	/^	unsigned int num_sets;$/;"	m	struct:cache_t
num_sharers	mem-system.h	/^	int num_sharers;  \/* Number of 1s in next field *\/$/;"	m	struct:dir_entry_t
num_sub_blocks	mem-system.h	/^	int num_sub_blocks;  \/* block_size \/ sub_block_size *\/$/;"	m	struct:mod_t
num_write_accesses	mmu.c	/^	long long num_write_accesses;$/;"	m	struct:mmu_page_t	file:
owner	mem-system.h	/^	int owner;  \/* Node owning the block (-1 = No owner)*\/$/;"	m	struct:dir_entry_t
page_count	mem-system.h	/^	int page_count;  \/* Number of words currently written *\/$/;"	m	struct:spec_mem_t
page_hash_table	mmu.c	/^	struct mmu_page_t *page_hash_table[MMU_PAGE_HASH_SIZE];$/;"	m	struct:mmu_t	typeref:struct:mmu_t::mmu_page_t	file:
page_list	mmu.c	/^	struct list_t *page_list;$/;"	m	struct:mmu_t	typeref:struct:mmu_t::list_t	file:
pages	mem-system.h	/^	struct mem_page_t *pages[MEM_PAGE_COUNT];$/;"	m	struct:mem_t	typeref:struct:mem_t::mem_page_t
pages	mem-system.h	/^	struct spec_mem_page_t *pages[SPEC_MEM_PAGE_TABLE_SIZE];  \/* Hash table *\/$/;"	m	struct:spec_mem_t	typeref:struct:spec_mem_t::spec_mem_page_t
peer	mem-system.h	/^	struct mod_t *peer;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_t
pending	mem-system.h	/^	int pending;$/;"	m	struct:mod_stack_t
perm	mem-system.h	/^	enum mem_access_t perm;  \/* Access permissions; combination of flags *\/$/;"	m	struct:mem_page_t	typeref:enum:mem_page_t::mem_access_t
phy_addr	mmu.c	/^	unsigned int phy_addr;  \/* Physical address *\/$/;"	m	struct:mmu_page_t	file:
policy	mem-system.h	/^	enum cache_policy_t policy;$/;"	m	struct:cache_t	typeref:enum:cache_t::cache_policy_t
port	mem-system.h	/^	struct mod_port_t *port;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_port_t
port_locked	mem-system.h	/^	int port_locked : 1;$/;"	m	struct:mod_stack_t
port_waiting_list_count	mem-system.h	/^	int port_waiting_list_count;$/;"	m	struct:mod_t
port_waiting_list_event	mem-system.h	/^	int port_waiting_list_event;$/;"	m	struct:mod_stack_t
port_waiting_list_head	mem-system.h	/^	struct mod_stack_t *port_waiting_list_head;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
port_waiting_list_max	mem-system.h	/^	int port_waiting_list_max;$/;"	m	struct:mod_t
port_waiting_list_next	mem-system.h	/^	struct mod_stack_t *port_waiting_list_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
port_waiting_list_prev	mem-system.h	/^	struct mod_stack_t *port_waiting_list_prev;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
port_waiting_list_tail	mem-system.h	/^	struct mod_stack_t *port_waiting_list_tail;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
ports	mem-system.h	/^	struct mod_port_t *ports;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_port_t
prefetch	mem-system.h	/^	int prefetch : 1;$/;"	m	struct:mod_stack_t
prefetch_enabled	mem-system.h	/^	int prefetch_enabled;$/;"	m	struct:mod_t
prefetched	mem-system.h	/^	unsigned int prefetched;$/;"	m	struct:cache_block_t
programmed_prefetches	mem-system.h	/^	long long programmed_prefetches;$/;"	m	struct:mod_t
range	mem-system.h	/^	} range;$/;"	m	struct:mod_t	typeref:union:mod_t::__anon1
range_kind	mem-system.h	/^	enum mod_range_kind_t range_kind;$/;"	m	struct:mod_t	typeref:enum:mod_t::mod_range_kind_t
read	mem-system.h	/^	int read : 1;$/;"	m	struct:mod_stack_t
read_hits	mem-system.h	/^	long long read_hits;$/;"	m	struct:mod_t
read_retries	mem-system.h	/^	long long read_retries;$/;"	m	struct:mod_t
reads	mem-system.h	/^	long long reads;$/;"	m	struct:mod_t
reply	mem-system.h	/^	int reply;$/;"	m	struct:mod_stack_t
reply_ACK	mem-system.h	/^	reply_ACK,$/;"	e	enum:ack_types
reply_ACK_DATA	mem-system.h	/^	reply_ACK_DATA,$/;"	e	enum:ack_types
reply_ACK_DATA_SENT_TO_PEER	mem-system.h	/^	reply_ACK_DATA_SENT_TO_PEER,$/;"	e	enum:ack_types
reply_ACK_ERROR	mem-system.h	/^	reply_ACK_ERROR$/;"	e	enum:ack_types
reply_NO_REPLY	mem-system.h	/^	reply_NO_REPLY = 0,$/;"	e	enum:ack_types
reply_size	mem-system.h	/^	int reply_size;$/;"	m	struct:mod_stack_t
report_file	mmu.c	/^	FILE *report_file;$/;"	m	struct:mmu_t	file:
request_dir	mem-system.h	/^	enum mod_request_dir_t request_dir;$/;"	m	struct:mod_stack_t	typeref:enum:mod_stack_t::mod_request_dir_t
ret_event	mem-system.h	/^	int ret_event;$/;"	m	struct:mod_stack_t
ret_stack	mem-system.h	/^	struct mod_stack_t *ret_stack;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
retry	mem-system.h	/^	int retry : 1;$/;"	m	struct:mod_stack_t
safe	mem-system.h	/^	int safe;$/;"	m	struct:mem_t
set	mem-system.h	/^	unsigned int set;$/;"	m	struct:mod_stack_t
sets	mem-system.h	/^	struct cache_set_t *sets;$/;"	m	struct:cache_t	typeref:struct:cache_t::cache_set_t
shared	mem-system.h	/^	int shared : 1;$/;"	m	struct:mod_stack_t
sharer	mem-system.h	/^	unsigned char sharer[0];  \/* Bitmap of sharers (must be last field) *\/$/;"	m	struct:dir_entry_t
spec_mem_access	spec-mem.c	/^static void spec_mem_access(struct spec_mem_t *spec_mem, uint32_t addr, int size,$/;"	f	file:
spec_mem_access_aligned	spec-mem.c	/^static void spec_mem_access_aligned(struct spec_mem_t *spec_mem, uint32_t addr, int size,$/;"	f	file:
spec_mem_clear	spec-mem.c	/^void spec_mem_clear(struct spec_mem_t *spec_mem)$/;"	f
spec_mem_create	spec-mem.c	/^struct spec_mem_t *spec_mem_create(struct mem_t *mem)$/;"	f
spec_mem_free	spec-mem.c	/^void spec_mem_free(struct spec_mem_t *spec_mem)$/;"	f
spec_mem_page_create	spec-mem.c	/^static struct spec_mem_page_t *spec_mem_page_create(struct spec_mem_t *spec_mem, uint32_t addr)$/;"	f	file:
spec_mem_page_get	spec-mem.c	/^static struct spec_mem_page_t *spec_mem_page_get(struct spec_mem_t *spec_mem, uint32_t addr)$/;"	f	file:
spec_mem_page_t	mem-system.h	/^struct spec_mem_page_t$/;"	s
spec_mem_read	spec-mem.c	/^void spec_mem_read(struct spec_mem_t *spec_mem, uint32_t addr, int size, void *buf)$/;"	f
spec_mem_t	mem-system.h	/^struct spec_mem_t$/;"	s
spec_mem_write	spec-mem.c	/^void spec_mem_write(struct spec_mem_t *spec_mem, uint32_t addr, int size, void *buf)$/;"	f
src_set	mem-system.h	/^	unsigned int src_set;$/;"	m	struct:mod_stack_t
src_tag	mem-system.h	/^	unsigned int src_tag;$/;"	m	struct:mod_stack_t
src_way	mem-system.h	/^	unsigned int src_way;$/;"	m	struct:mod_stack_t
stack	mem-system.h	/^	struct mod_stack_t *stack;  \/* Access locking port *\/$/;"	m	struct:mod_port_t	typeref:struct:mod_port_t::mod_stack_t
stack_id	mem-system.h	/^	long long stack_id;$/;"	m	struct:dir_lock_t
state	mem-system.h	/^	enum cache_block_state_t state;$/;"	m	struct:cache_block_t	typeref:enum:cache_block_t::cache_block_state_t
state	mem-system.h	/^	int state;$/;"	m	struct:mod_stack_t
sub_block_size	mem-system.h	/^	int sub_block_size;$/;"	m	struct:mod_t
tag	mem-system.h	/^	unsigned int tag;$/;"	m	struct:cache_block_t
tag	mem-system.h	/^	unsigned int tag;$/;"	m	struct:mem_page_t
tag	mem-system.h	/^	unsigned int tag;$/;"	m	struct:mod_stack_t
target_mod	mem-system.h	/^	struct mod_t *target_mod;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_t
thread	mem-system.h	/^	int thread;$/;"	m	struct:mod_stack_t
transient_tag	mem-system.h	/^	unsigned int transient_tag;$/;"	m	struct:cache_block_t
useful_prefetches	mem-system.h	/^	long long useful_prefetches;$/;"	m	struct:mod_t
vtl_addr	mmu.c	/^	unsigned int vtl_addr;  \/* Virtual address of page *\/$/;"	m	struct:mmu_page_t	file:
waiting_list_count	mem-system.h	/^	int waiting_list_count;$/;"	m	struct:mod_port_t
waiting_list_count	mem-system.h	/^	int waiting_list_count;$/;"	m	struct:mod_stack_t
waiting_list_count	mem-system.h	/^	int waiting_list_count;$/;"	m	struct:mod_t
waiting_list_event	mem-system.h	/^	int waiting_list_event;  \/* Event to schedule when stack is waken up *\/$/;"	m	struct:mod_stack_t
waiting_list_head	mem-system.h	/^	struct mod_stack_t *waiting_list_head;$/;"	m	struct:mod_port_t	typeref:struct:mod_port_t::mod_stack_t
waiting_list_head	mem-system.h	/^	struct mod_stack_t *waiting_list_head;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
waiting_list_head	mem-system.h	/^	struct mod_stack_t *waiting_list_head;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
waiting_list_max	mem-system.h	/^	int waiting_list_max;$/;"	m	struct:mod_port_t
waiting_list_max	mem-system.h	/^	int waiting_list_max;$/;"	m	struct:mod_stack_t
waiting_list_max	mem-system.h	/^	int waiting_list_max;$/;"	m	struct:mod_t
waiting_list_next	mem-system.h	/^	struct mod_stack_t *waiting_list_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
waiting_list_prev	mem-system.h	/^	struct mod_stack_t *waiting_list_prev;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
waiting_list_tail	mem-system.h	/^	struct mod_stack_t *waiting_list_tail;$/;"	m	struct:mod_port_t	typeref:struct:mod_port_t::mod_stack_t
waiting_list_tail	mem-system.h	/^	struct mod_stack_t *waiting_list_tail;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
waiting_list_tail	mem-system.h	/^	struct mod_stack_t *waiting_list_tail;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
way	mem-system.h	/^	unsigned int way;$/;"	m	struct:cache_block_t
way	mem-system.h	/^	unsigned int way;$/;"	m	struct:mod_stack_t
way_head	mem-system.h	/^	struct cache_block_t *way_head;$/;"	m	struct:cache_set_t	typeref:struct:cache_set_t::cache_block_t
way_next	mem-system.h	/^	struct cache_block_t *way_next;$/;"	m	struct:cache_block_t	typeref:struct:cache_block_t::cache_block_t
way_prev	mem-system.h	/^	struct cache_block_t *way_prev;$/;"	m	struct:cache_block_t	typeref:struct:cache_block_t::cache_block_t
way_tail	mem-system.h	/^	struct cache_block_t *way_tail;$/;"	m	struct:cache_set_t	typeref:struct:cache_set_t::cache_block_t
witness_ptr	mem-system.h	/^	int *witness_ptr;$/;"	m	struct:mod_stack_t
write_access_list_count	mem-system.h	/^	int write_access_list_count;$/;"	m	struct:mod_t
write_access_list_head	mem-system.h	/^	struct mod_stack_t *write_access_list_head;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
write_access_list_max	mem-system.h	/^	int write_access_list_max;$/;"	m	struct:mod_t
write_access_list_next	mem-system.h	/^	struct mod_stack_t *write_access_list_next;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
write_access_list_prev	mem-system.h	/^	struct mod_stack_t *write_access_list_prev;$/;"	m	struct:mod_stack_t	typeref:struct:mod_stack_t::mod_stack_t
write_access_list_tail	mem-system.h	/^	struct mod_stack_t *write_access_list_tail;$/;"	m	struct:mod_t	typeref:struct:mod_t::mod_stack_t
write_hits	mem-system.h	/^	long long write_hits;$/;"	m	struct:mod_t
write_retries	mem-system.h	/^	long long write_retries;$/;"	m	struct:mod_t
writeback	mem-system.h	/^	int writeback : 1;$/;"	m	struct:mod_stack_t
writes	mem-system.h	/^	long long writes;$/;"	m	struct:mod_t
xsize	mem-system.h	/^	int xsize, ysize, zsize;$/;"	m	struct:dir_t
ysize	mem-system.h	/^	int xsize, ysize, zsize;$/;"	m	struct:dir_t
zsize	mem-system.h	/^	int xsize, ysize, zsize;$/;"	m	struct:dir_t
